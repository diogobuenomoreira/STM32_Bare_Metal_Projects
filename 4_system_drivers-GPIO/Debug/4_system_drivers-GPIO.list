
4_system_drivers-GPIO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000408  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000594  0800059c  0000159c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000594  08000594  0000159c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000594  08000594  0000159c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000594  0800059c  0000159c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000594  08000594  00001594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000598  08000598  00001598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  0000159c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0000159c  2**0
                  CONTENTS
 10 .bss          00000024  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000159c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000dba  00000000  00000000  000015cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004e1  00000000  00000000  00002386  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000128  00000000  00000000  00002868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000c1  00000000  00000000  00002990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d4a1  00000000  00000000  00002a51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001f4a  00000000  00000000  0001fef2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a2855  00000000  00000000  00021e3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000c4691  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000002ac  00000000  00000000  000c46d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  000c4980  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000000 	.word	0x20000000
 80001a8:	00000000 	.word	0x00000000
 80001ac:	0800057c 	.word	0x0800057c

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000004 	.word	0x20000004
 80001c8:	0800057c 	.word	0x0800057c

080001cc <LED_Init>:
#define LED_PIN		PIN5
#define	PIN13		(1U << 13U)
#define BUTTON_PIN	PIN13

void LED_Init(void)
{
 80001cc:	b480      	push	{r7}
 80001ce:	af00      	add	r7, sp, #0
	/* Enable clock access to GPIOA */
	RCC->AHB2ENR |= GPIOAEN;
 80001d0:	4b0d      	ldr	r3, [pc, #52]	@ (8000208 <LED_Init+0x3c>)
 80001d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80001d4:	4a0c      	ldr	r2, [pc, #48]	@ (8000208 <LED_Init+0x3c>)
 80001d6:	f043 0301 	orr.w	r3, r3, #1
 80001da:	64d3      	str	r3, [r2, #76]	@ 0x4c

	/* Set PA5 mode to output mode */
	GPIOA->MODER |= (1U << 10U);
 80001dc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80001e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80001ea:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U << 11U);
 80001ec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80001f6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80001fa:	6013      	str	r3, [r2, #0]
}
 80001fc:	bf00      	nop
 80001fe:	46bd      	mov	sp, r7
 8000200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000204:	4770      	bx	lr
 8000206:	bf00      	nop
 8000208:	40021000 	.word	0x40021000

0800020c <LED_On>:

void LED_On(void)
{
 800020c:	b480      	push	{r7}
 800020e:	af00      	add	r7, sp, #0
	/* Set PA5 high */
	GPIOA->ODR |= LED_PIN;
 8000210:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000214:	695b      	ldr	r3, [r3, #20]
 8000216:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800021a:	f043 0320 	orr.w	r3, r3, #32
 800021e:	6153      	str	r3, [r2, #20]
}
 8000220:	bf00      	nop
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr

0800022a <LED_Off>:

void LED_Off(void)
{
 800022a:	b480      	push	{r7}
 800022c:	af00      	add	r7, sp, #0
	/* Set PA5 low */
	GPIOA->ODR &= ~LED_PIN;
 800022e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000232:	695b      	ldr	r3, [r3, #20]
 8000234:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 8000238:	f023 0320 	bic.w	r3, r3, #32
 800023c:	6153      	str	r3, [r2, #20]
}
 800023e:	bf00      	nop
 8000240:	46bd      	mov	sp, r7
 8000242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000246:	4770      	bx	lr

08000248 <Button_Init>:

void Button_Init(void)
{
 8000248:	b480      	push	{r7}
 800024a:	af00      	add	r7, sp, #0
	/* Enable clock access to PORTC */
	RCC->AHB2ENR |= GPIOCEN;
 800024c:	4b0b      	ldr	r3, [pc, #44]	@ (800027c <Button_Init+0x34>)
 800024e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000250:	4a0a      	ldr	r2, [pc, #40]	@ (800027c <Button_Init+0x34>)
 8000252:	f043 0304 	orr.w	r3, r3, #4
 8000256:	64d3      	str	r3, [r2, #76]	@ 0x4c

	/* Set PC13 as an input pin */
	GPIOC->MODER &= ~(1U << 26U);
 8000258:	4b09      	ldr	r3, [pc, #36]	@ (8000280 <Button_Init+0x38>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	4a08      	ldr	r2, [pc, #32]	@ (8000280 <Button_Init+0x38>)
 800025e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8000262:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~(1U << 27U);
 8000264:	4b06      	ldr	r3, [pc, #24]	@ (8000280 <Button_Init+0x38>)
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	4a05      	ldr	r2, [pc, #20]	@ (8000280 <Button_Init+0x38>)
 800026a:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 800026e:	6013      	str	r3, [r2, #0]
}
 8000270:	bf00      	nop
 8000272:	46bd      	mov	sp, r7
 8000274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000278:	4770      	bx	lr
 800027a:	bf00      	nop
 800027c:	40021000 	.word	0x40021000
 8000280:	48000800 	.word	0x48000800

08000284 <Get_Button_State>:

bool Get_Button_State(void)
{
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
	/*Note: Button is active low */
	/* Check if the button is pressed */
	if(GPIOC->IDR & BUTTON_PIN)
 8000288:	4b06      	ldr	r3, [pc, #24]	@ (80002a4 <Get_Button_State+0x20>)
 800028a:	691b      	ldr	r3, [r3, #16]
 800028c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <Get_Button_State+0x14>
	{
		return false;
 8000294:	2300      	movs	r3, #0
 8000296:	e000      	b.n	800029a <Get_Button_State+0x16>
	}

	return true;
 8000298:	2301      	movs	r3, #1
}
 800029a:	4618      	mov	r0, r3
 800029c:	46bd      	mov	sp, r7
 800029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a2:	4770      	bx	lr
 80002a4:	48000800 	.word	0x48000800

080002a8 <FPU_Enable>:

#include "fpu.h"
#include "stm32l4xx.h"

void FPU_Enable(void)
{
 80002a8:	b480      	push	{r7}
 80002aa:	af00      	add	r7, sp, #0
	/* Enable floating point unit: Enable CP10 and CPU11 full access*/
	SCB->CPACR |= (1 << 20)|(1 << 21)|(1 << 22)|(1 << 23);
 80002ac:	4b06      	ldr	r3, [pc, #24]	@ (80002c8 <FPU_Enable+0x20>)
 80002ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80002b2:	4a05      	ldr	r2, [pc, #20]	@ (80002c8 <FPU_Enable+0x20>)
 80002b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80002b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

}
 80002bc:	bf00      	nop
 80002be:	46bd      	mov	sp, r7
 80002c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c4:	4770      	bx	lr
 80002c6:	bf00      	nop
 80002c8:	e000ed00 	.word	0xe000ed00

080002cc <main>:
#include "timebase.h"
#include "bsp.h"


int main(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	af00      	add	r7, sp, #0
	/* Enable FPU */
	FPU_Enable();
 80002d0:	f7ff ffea 	bl	80002a8 <FPU_Enable>

	/* Initialize UART */
	Debug_UART_Init();
 80002d4:	f000 f884 	bl	80003e0 <Debug_UART_Init>

	/* Initialize Timebase */
	Timebase_Init();
 80002d8:	f000 f854 	bl	8000384 <Timebase_Init>

	/* Initialize LED */
	LED_Init();
 80002dc:	f7ff ff76 	bl	80001cc <LED_Init>

	/* Initialize button */
	Button_Init();
 80002e0:	f7ff ffb2 	bl	8000248 <Button_Init>

	while(1)
	{
		LED_On();
 80002e4:	f7ff ff92 	bl	800020c <LED_On>
		if(Get_Button_State())
 80002e8:	f7ff ffcc 	bl	8000284 <Get_Button_State>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <main+0x2a>
		{
			LED_Off();
 80002f2:	f7ff ff9a 	bl	800022a <LED_Off>
		}
		Delay(1);
 80002f6:	2001      	movs	r0, #1
 80002f8:	f000 f801 	bl	80002fe <Delay>
		LED_On();
 80002fc:	e7f2      	b.n	80002e4 <main+0x18>

080002fe <Delay>:
static volatile uint32_t g_current_tick_p;


/* Delay in seconds */
void Delay(uint32_t delay)
{
 80002fe:	b580      	push	{r7, lr}
 8000300:	b084      	sub	sp, #16
 8000302:	af00      	add	r7, sp, #0
 8000304:	6078      	str	r0, [r7, #4]
	uint32_t tick_start = Get_Tick();
 8000306:	f000 f819 	bl	800033c <Get_Tick>
 800030a:	60b8      	str	r0, [r7, #8]
	uint32_t wait = delay;
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	60fb      	str	r3, [r7, #12]

	if(wait < MAX_DELAY)
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000316:	d002      	beq.n	800031e <Delay+0x20>
	{
		wait += (uint32_t)TICK_FREQ;
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	3301      	adds	r3, #1
 800031c:	60fb      	str	r3, [r7, #12]
	}

	while((Get_Tick() - tick_start) < wait );
 800031e:	bf00      	nop
 8000320:	f000 f80c 	bl	800033c <Get_Tick>
 8000324:	4602      	mov	r2, r0
 8000326:	68bb      	ldr	r3, [r7, #8]
 8000328:	1ad3      	subs	r3, r2, r3
 800032a:	68fa      	ldr	r2, [r7, #12]
 800032c:	429a      	cmp	r2, r3
 800032e:	d8f7      	bhi.n	8000320 <Delay+0x22>
}
 8000330:	bf00      	nop
 8000332:	bf00      	nop
 8000334:	3710      	adds	r7, #16
 8000336:	46bd      	mov	sp, r7
 8000338:	bd80      	pop	{r7, pc}
	...

0800033c <Get_Tick>:

uint32_t Get_Tick(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000340:	b672      	cpsid	i
}
 8000342:	bf00      	nop
	__disable_irq();
	g_current_tick_p = g_current_tick;
 8000344:	4b06      	ldr	r3, [pc, #24]	@ (8000360 <Get_Tick+0x24>)
 8000346:	681b      	ldr	r3, [r3, #0]
 8000348:	4a06      	ldr	r2, [pc, #24]	@ (8000364 <Get_Tick+0x28>)
 800034a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800034c:	b662      	cpsie	i
}
 800034e:	bf00      	nop
	__enable_irq();

	return g_current_tick_p;
 8000350:	4b04      	ldr	r3, [pc, #16]	@ (8000364 <Get_Tick+0x28>)
 8000352:	681b      	ldr	r3, [r3, #0]
}
 8000354:	4618      	mov	r0, r3
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	2000001c 	.word	0x2000001c
 8000364:	20000020 	.word	0x20000020

08000368 <Tick_Increment>:

static void Tick_Increment(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0
	g_current_tick += TICK_FREQ;
 800036c:	4b04      	ldr	r3, [pc, #16]	@ (8000380 <Tick_Increment+0x18>)
 800036e:	681b      	ldr	r3, [r3, #0]
 8000370:	3301      	adds	r3, #1
 8000372:	4a03      	ldr	r2, [pc, #12]	@ (8000380 <Tick_Increment+0x18>)
 8000374:	6013      	str	r3, [r2, #0]
}
 8000376:	bf00      	nop
 8000378:	46bd      	mov	sp, r7
 800037a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037e:	4770      	bx	lr
 8000380:	2000001c 	.word	0x2000001c

08000384 <Timebase_Init>:

void Timebase_Init(void)
{
 8000384:	b480      	push	{r7}
 8000386:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000388:	b672      	cpsid	i
}
 800038a:	bf00      	nop
	/* Disable global interrupts */
	__disable_irq();

	/* Load the timer with number of clock cycles per second */
	SysTick->LOAD = ONE_SEC_LOAD - 1; // -1 because we count from zero
 800038c:	4b0f      	ldr	r3, [pc, #60]	@ (80003cc <Timebase_Init+0x48>)
 800038e:	4a10      	ldr	r2, [pc, #64]	@ (80003d0 <Timebase_Init+0x4c>)
 8000390:	605a      	str	r2, [r3, #4]

	/* Clear systick current value register */
	SysTick->VAL = 0;
 8000392:	4b0e      	ldr	r3, [pc, #56]	@ (80003cc <Timebase_Init+0x48>)
 8000394:	2200      	movs	r2, #0
 8000396:	609a      	str	r2, [r3, #8]

	/* Select internal clock source */
	SysTick->CTRL |= CTRL_CLKSRC;
 8000398:	4b0c      	ldr	r3, [pc, #48]	@ (80003cc <Timebase_Init+0x48>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	4a0b      	ldr	r2, [pc, #44]	@ (80003cc <Timebase_Init+0x48>)
 800039e:	f043 0304 	orr.w	r3, r3, #4
 80003a2:	6013      	str	r3, [r2, #0]

	/* Enable interrupt */
	SysTick->CTRL |= CTRL_TICKINT;
 80003a4:	4b09      	ldr	r3, [pc, #36]	@ (80003cc <Timebase_Init+0x48>)
 80003a6:	681b      	ldr	r3, [r3, #0]
 80003a8:	4a08      	ldr	r2, [pc, #32]	@ (80003cc <Timebase_Init+0x48>)
 80003aa:	f043 0302 	orr.w	r3, r3, #2
 80003ae:	6013      	str	r3, [r2, #0]

	/* Enable systick */
	SysTick->CTRL |= CTRL_ENABLE;
 80003b0:	4b06      	ldr	r3, [pc, #24]	@ (80003cc <Timebase_Init+0x48>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	4a05      	ldr	r2, [pc, #20]	@ (80003cc <Timebase_Init+0x48>)
 80003b6:	f043 0301 	orr.w	r3, r3, #1
 80003ba:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80003bc:	b662      	cpsie	i
}
 80003be:	bf00      	nop

	/* Enable global interrupt */
	__enable_irq();
}
 80003c0:	bf00      	nop
 80003c2:	46bd      	mov	sp, r7
 80003c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c8:	4770      	bx	lr
 80003ca:	bf00      	nop
 80003cc:	e000e010 	.word	0xe000e010
 80003d0:	003d08ff 	.word	0x003d08ff

080003d4 <SysTick_Handler>:

void SysTick_Handler(void)
{
 80003d4:	b580      	push	{r7, lr}
 80003d6:	af00      	add	r7, sp, #0
	Tick_Increment();
 80003d8:	f7ff ffc6 	bl	8000368 <Tick_Increment>
}
 80003dc:	bf00      	nop
 80003de:	bd80      	pop	{r7, pc}

080003e0 <Debug_UART_Init>:
	UART_Write(ch);
	return ch;
}

void Debug_UART_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0
	/* Enable clock access to GPIOA */
	RCC->AHB2ENR |= GPIOAEN;
 80003e4:	4b27      	ldr	r3, [pc, #156]	@ (8000484 <Debug_UART_Init+0xa4>)
 80003e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003e8:	4a26      	ldr	r2, [pc, #152]	@ (8000484 <Debug_UART_Init+0xa4>)
 80003ea:	f043 0301 	orr.w	r3, r3, #1
 80003ee:	64d3      	str	r3, [r2, #76]	@ 0x4c

	/* Set the mode of PA2 to alternate function mode */
	GPIOA->MODER &= ~(1U << 4U);
 80003f0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80003fa:	f023 0310 	bic.w	r3, r3, #16
 80003fe:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U << 5U);
 8000400:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000404:	681b      	ldr	r3, [r3, #0]
 8000406:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800040a:	f043 0320 	orr.w	r3, r3, #32
 800040e:	6013      	str	r3, [r2, #0]

	/* Set alternate function type to AF7 (UART2_TX) */
	GPIOA->AFR[0] |= (1U << 8U);
 8000410:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000414:	6a1b      	ldr	r3, [r3, #32]
 8000416:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800041a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800041e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 9U);
 8000420:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000424:	6a1b      	ldr	r3, [r3, #32]
 8000426:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800042a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800042e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 10U);
 8000430:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000434:	6a1b      	ldr	r3, [r3, #32]
 8000436:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800043a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800043e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U << 11U);
 8000440:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000444:	6a1b      	ldr	r3, [r3, #32]
 8000446:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800044a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800044e:	6213      	str	r3, [r2, #32]

	/* Enable clock access to UART2 */
	RCC->APB1ENR1 |= UART2EN;
 8000450:	4b0c      	ldr	r3, [pc, #48]	@ (8000484 <Debug_UART_Init+0xa4>)
 8000452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000454:	4a0b      	ldr	r2, [pc, #44]	@ (8000484 <Debug_UART_Init+0xa4>)
 8000456:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800045a:	6593      	str	r3, [r2, #88]	@ 0x58

	/* Configure UART baudrate */
	UART_Set_Baudrate(APB1_CLK, DEBUG_UART_BAUDRATE);
 800045c:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8000460:	4809      	ldr	r0, [pc, #36]	@ (8000488 <Debug_UART_Init+0xa8>)
 8000462:	f000 f829 	bl	80004b8 <UART_Set_Baudrate>

	/* Configure transfer direction */
	USART2->CR1 |= CR1_TE;
 8000466:	4b09      	ldr	r3, [pc, #36]	@ (800048c <Debug_UART_Init+0xac>)
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	4a08      	ldr	r2, [pc, #32]	@ (800048c <Debug_UART_Init+0xac>)
 800046c:	f043 0308 	orr.w	r3, r3, #8
 8000470:	6013      	str	r3, [r2, #0]

	/* Enable UART mode */
	USART2->CR1 |= CR1_UE;
 8000472:	4b06      	ldr	r3, [pc, #24]	@ (800048c <Debug_UART_Init+0xac>)
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	4a05      	ldr	r2, [pc, #20]	@ (800048c <Debug_UART_Init+0xac>)
 8000478:	f043 0301 	orr.w	r3, r3, #1
 800047c:	6013      	str	r3, [r2, #0]
}
 800047e:	bf00      	nop
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	40021000 	.word	0x40021000
 8000488:	003d0900 	.word	0x003d0900
 800048c:	40004400 	.word	0x40004400

08000490 <UART_Compute_Baudrate>:
	/* Write to transmit data register */
	USART2->TDR = (ch & 0xFF);
}

static uint16_t UART_Compute_Baudrate(uint32_t peripheral_clk, uint32_t baudrate)
{
 8000490:	b480      	push	{r7}
 8000492:	b083      	sub	sp, #12
 8000494:	af00      	add	r7, sp, #0
 8000496:	6078      	str	r0, [r7, #4]
 8000498:	6039      	str	r1, [r7, #0]
	return ( ( peripheral_clk + ( baudrate / 2U ) ) / baudrate );
 800049a:	683b      	ldr	r3, [r7, #0]
 800049c:	085a      	lsrs	r2, r3, #1
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	441a      	add	r2, r3
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80004a8:	b29b      	uxth	r3, r3
}
 80004aa:	4618      	mov	r0, r3
 80004ac:	370c      	adds	r7, #12
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr
	...

080004b8 <UART_Set_Baudrate>:

static void UART_Set_Baudrate(uint32_t peripheral_clk, uint32_t baudrate)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	6039      	str	r1, [r7, #0]
	USART2->BRR = UART_Compute_Baudrate(peripheral_clk, baudrate);
 80004c2:	6839      	ldr	r1, [r7, #0]
 80004c4:	6878      	ldr	r0, [r7, #4]
 80004c6:	f7ff ffe3 	bl	8000490 <UART_Compute_Baudrate>
 80004ca:	4603      	mov	r3, r0
 80004cc:	461a      	mov	r2, r3
 80004ce:	4b03      	ldr	r3, [pc, #12]	@ (80004dc <UART_Set_Baudrate+0x24>)
 80004d0:	60da      	str	r2, [r3, #12]
}
 80004d2:	bf00      	nop
 80004d4:	3708      	adds	r7, #8
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
 80004da:	bf00      	nop
 80004dc:	40004400 	.word	0x40004400

080004e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004e0:	480d      	ldr	r0, [pc, #52]	@ (8000518 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004e2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004e4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004e8:	480c      	ldr	r0, [pc, #48]	@ (800051c <LoopForever+0x6>)
  ldr r1, =_edata
 80004ea:	490d      	ldr	r1, [pc, #52]	@ (8000520 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000524 <LoopForever+0xe>)
  movs r3, #0
 80004ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004f0:	e002      	b.n	80004f8 <LoopCopyDataInit>

080004f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004f6:	3304      	adds	r3, #4

080004f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004fc:	d3f9      	bcc.n	80004f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004fe:	4a0a      	ldr	r2, [pc, #40]	@ (8000528 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000500:	4c0a      	ldr	r4, [pc, #40]	@ (800052c <LoopForever+0x16>)
  movs r3, #0
 8000502:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000504:	e001      	b.n	800050a <LoopFillZerobss>

08000506 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000506:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000508:	3204      	adds	r2, #4

0800050a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800050a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800050c:	d3fb      	bcc.n	8000506 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800050e:	f000 f811 	bl	8000534 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000512:	f7ff fedb 	bl	80002cc <main>

08000516 <LoopForever>:

LoopForever:
  b LoopForever
 8000516:	e7fe      	b.n	8000516 <LoopForever>
  ldr   r0, =_estack
 8000518:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800051c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000520:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000524:	0800059c 	.word	0x0800059c
  ldr r2, =_sbss
 8000528:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800052c:	20000024 	.word	0x20000024

08000530 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000530:	e7fe      	b.n	8000530 <ADC1_2_IRQHandler>
	...

08000534 <__libc_init_array>:
 8000534:	b570      	push	{r4, r5, r6, lr}
 8000536:	4d0d      	ldr	r5, [pc, #52]	@ (800056c <__libc_init_array+0x38>)
 8000538:	4c0d      	ldr	r4, [pc, #52]	@ (8000570 <__libc_init_array+0x3c>)
 800053a:	1b64      	subs	r4, r4, r5
 800053c:	10a4      	asrs	r4, r4, #2
 800053e:	2600      	movs	r6, #0
 8000540:	42a6      	cmp	r6, r4
 8000542:	d109      	bne.n	8000558 <__libc_init_array+0x24>
 8000544:	4d0b      	ldr	r5, [pc, #44]	@ (8000574 <__libc_init_array+0x40>)
 8000546:	4c0c      	ldr	r4, [pc, #48]	@ (8000578 <__libc_init_array+0x44>)
 8000548:	f000 f818 	bl	800057c <_init>
 800054c:	1b64      	subs	r4, r4, r5
 800054e:	10a4      	asrs	r4, r4, #2
 8000550:	2600      	movs	r6, #0
 8000552:	42a6      	cmp	r6, r4
 8000554:	d105      	bne.n	8000562 <__libc_init_array+0x2e>
 8000556:	bd70      	pop	{r4, r5, r6, pc}
 8000558:	f855 3b04 	ldr.w	r3, [r5], #4
 800055c:	4798      	blx	r3
 800055e:	3601      	adds	r6, #1
 8000560:	e7ee      	b.n	8000540 <__libc_init_array+0xc>
 8000562:	f855 3b04 	ldr.w	r3, [r5], #4
 8000566:	4798      	blx	r3
 8000568:	3601      	adds	r6, #1
 800056a:	e7f2      	b.n	8000552 <__libc_init_array+0x1e>
 800056c:	08000594 	.word	0x08000594
 8000570:	08000594 	.word	0x08000594
 8000574:	08000594 	.word	0x08000594
 8000578:	08000598 	.word	0x08000598

0800057c <_init>:
 800057c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800057e:	bf00      	nop
 8000580:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000582:	bc08      	pop	{r3}
 8000584:	469e      	mov	lr, r3
 8000586:	4770      	bx	lr

08000588 <_fini>:
 8000588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800058a:	bf00      	nop
 800058c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800058e:	bc08      	pop	{r3}
 8000590:	469e      	mov	lr, r3
 8000592:	4770      	bx	lr
