
5_system_drivers-ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001530  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080016c0  080016c0  000026c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001700  08001700  0000305c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08001700  08001700  00002700  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001708  08001708  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001708  08001708  00002708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800170c  0800170c  0000270c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001710  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0000305c  2**0
                  CONTENTS
 10 .bss          00000178  2000005c  2000005c  0000305c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001d4  200001d4  0000305c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001b37  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000089b  00000000  00000000  00004bc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000220  00000000  00000000  00005460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000016d  00000000  00000000  00005680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ec26  00000000  00000000  000057ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00003390  00000000  00000000  00024413  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a5b5e  00000000  00000000  000277a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000cd301  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000da4  00000000  00000000  000cd344  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  000ce0e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080016a8 	.word	0x080016a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	080016a8 	.word	0x080016a8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <ADC_Init>:
#define CR_ADSTART		(1U << 2U)
#define ISR_EOC			(1U << 2U)


void ADC_Init(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0
	/* Enable clock access to GPIOA */
	RCC->AHB2ENR |= GPIOAEN;
 8000274:	4b30      	ldr	r3, [pc, #192]	@ (8000338 <ADC_Init+0xc8>)
 8000276:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000278:	4a2f      	ldr	r2, [pc, #188]	@ (8000338 <ADC_Init+0xc8>)
 800027a:	f043 0301 	orr.w	r3, r3, #1
 800027e:	64d3      	str	r3, [r2, #76]	@ 0x4c

	/* Configure the ADC GPIO pin (PA1 as analog input) */
	GPIOA->MODER |= (1U << 2U);
 8000280:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800028a:	f043 0304 	orr.w	r3, r3, #4
 800028e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U << 3U);
 8000290:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000294:	681b      	ldr	r3, [r3, #0]
 8000296:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800029a:	f043 0308 	orr.w	r3, r3, #8
 800029e:	6013      	str	r3, [r2, #0]

	/* Connect GPIO analog switch to ADC input */
	GPIOA->ASCR |= ASCR_ASC1;
 80002a0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80002a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80002a6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80002aa:	f043 0302 	orr.w	r3, r3, #2
 80002ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

	/***** Configure ADC module *****/

	/* Enable clock access to ADC */
	RCC->AHB2ENR |= ADCEN;
 80002b0:	4b21      	ldr	r3, [pc, #132]	@ (8000338 <ADC_Init+0xc8>)
 80002b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80002b4:	4a20      	ldr	r2, [pc, #128]	@ (8000338 <ADC_Init+0xc8>)
 80002b6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80002ba:	64d3      	str	r3, [r2, #76]	@ 0x4c

	/* Set ADC common clock */
	ADC123_COMMON->CCR &= ~(1U << 16U);
 80002bc:	4b1f      	ldr	r3, [pc, #124]	@ (800033c <ADC_Init+0xcc>)
 80002be:	689b      	ldr	r3, [r3, #8]
 80002c0:	4a1e      	ldr	r2, [pc, #120]	@ (800033c <ADC_Init+0xcc>)
 80002c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80002c6:	6093      	str	r3, [r2, #8]
	ADC123_COMMON->CCR |= (1U << 17U);
 80002c8:	4b1c      	ldr	r3, [pc, #112]	@ (800033c <ADC_Init+0xcc>)
 80002ca:	689b      	ldr	r3, [r3, #8]
 80002cc:	4a1b      	ldr	r2, [pc, #108]	@ (800033c <ADC_Init+0xcc>)
 80002ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80002d2:	6093      	str	r3, [r2, #8]

	/* Set continuous conversion mode */
	ADC1->CFGR |= CFGR_CONT;
 80002d4:	4b1a      	ldr	r3, [pc, #104]	@ (8000340 <ADC_Init+0xd0>)
 80002d6:	68db      	ldr	r3, [r3, #12]
 80002d8:	4a19      	ldr	r2, [pc, #100]	@ (8000340 <ADC_Init+0xd0>)
 80002da:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80002de:	60d3      	str	r3, [r2, #12]

	/* Set sequence length */
	ADC1->SQR1 = SEQ_LEN_1;
 80002e0:	4b17      	ldr	r3, [pc, #92]	@ (8000340 <ADC_Init+0xd0>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	631a      	str	r2, [r3, #48]	@ 0x30

	/* Set ADC channel and rank - (PA1 is channel 6) */
	ADC1->SQR1 |= (1U << 7U); // channel 6 means 0110, so bits 7 and 8 equals to 1
 80002e6:	4b16      	ldr	r3, [pc, #88]	@ (8000340 <ADC_Init+0xd0>)
 80002e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002ea:	4a15      	ldr	r2, [pc, #84]	@ (8000340 <ADC_Init+0xd0>)
 80002ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80002f0:	6313      	str	r3, [r2, #48]	@ 0x30
	ADC1->SQR1 |= (1U << 8U);
 80002f2:	4b13      	ldr	r3, [pc, #76]	@ (8000340 <ADC_Init+0xd0>)
 80002f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002f6:	4a12      	ldr	r2, [pc, #72]	@ (8000340 <ADC_Init+0xd0>)
 80002f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80002fc:	6313      	str	r3, [r2, #48]	@ 0x30

	/* Disable ADC deep power down */
	ADC1->CR &= ~CR_DEEPPWD;
 80002fe:	4b10      	ldr	r3, [pc, #64]	@ (8000340 <ADC_Init+0xd0>)
 8000300:	689b      	ldr	r3, [r3, #8]
 8000302:	4a0f      	ldr	r2, [pc, #60]	@ (8000340 <ADC_Init+0xd0>)
 8000304:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8000308:	6093      	str	r3, [r2, #8]

	/* Enable ADC internal regulator */
	ADC1->CR |= CR_ADVREGEN;
 800030a:	4b0d      	ldr	r3, [pc, #52]	@ (8000340 <ADC_Init+0xd0>)
 800030c:	689b      	ldr	r3, [r3, #8]
 800030e:	4a0c      	ldr	r2, [pc, #48]	@ (8000340 <ADC_Init+0xd0>)
 8000310:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000314:	6093      	str	r3, [r2, #8]

	/* Start ADC calibration */
	ADC1->CR |= CR_ADCAL;
 8000316:	4b0a      	ldr	r3, [pc, #40]	@ (8000340 <ADC_Init+0xd0>)
 8000318:	689b      	ldr	r3, [r3, #8]
 800031a:	4a09      	ldr	r2, [pc, #36]	@ (8000340 <ADC_Init+0xd0>)
 800031c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000320:	6093      	str	r3, [r2, #8]

	/* Enable ADC */
	ADC1->CR |= CR_ADEN;
 8000322:	4b07      	ldr	r3, [pc, #28]	@ (8000340 <ADC_Init+0xd0>)
 8000324:	689b      	ldr	r3, [r3, #8]
 8000326:	4a06      	ldr	r2, [pc, #24]	@ (8000340 <ADC_Init+0xd0>)
 8000328:	f043 0301 	orr.w	r3, r3, #1
 800032c:	6093      	str	r3, [r2, #8]
}
 800032e:	bf00      	nop
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr
 8000338:	40021000 	.word	0x40021000
 800033c:	50040300 	.word	0x50040300
 8000340:	50040000 	.word	0x50040000

08000344 <ADC_Start_Conversion>:

void ADC_Start_Conversion(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
	ADC1->CR |= CR_ADSTART;
 8000348:	4b05      	ldr	r3, [pc, #20]	@ (8000360 <ADC_Start_Conversion+0x1c>)
 800034a:	689b      	ldr	r3, [r3, #8]
 800034c:	4a04      	ldr	r2, [pc, #16]	@ (8000360 <ADC_Start_Conversion+0x1c>)
 800034e:	f043 0304 	orr.w	r3, r3, #4
 8000352:	6093      	str	r3, [r2, #8]
}
 8000354:	bf00      	nop
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	50040000 	.word	0x50040000

08000364 <ADC_Read>:

uint32_t ADC_Read(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
	/* Wait for End-of-conversion flag */
	while(!(ADC1->ISR & ISR_EOC));
 8000368:	bf00      	nop
 800036a:	4b09      	ldr	r3, [pc, #36]	@ (8000390 <ADC_Read+0x2c>)
 800036c:	681b      	ldr	r3, [r3, #0]
 800036e:	f003 0304 	and.w	r3, r3, #4
 8000372:	2b00      	cmp	r3, #0
 8000374:	d0f9      	beq.n	800036a <ADC_Read+0x6>

	/* Clear EOC flag */
	ADC1->ISR |= ISR_EOC;
 8000376:	4b06      	ldr	r3, [pc, #24]	@ (8000390 <ADC_Read+0x2c>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	4a05      	ldr	r2, [pc, #20]	@ (8000390 <ADC_Read+0x2c>)
 800037c:	f043 0304 	orr.w	r3, r3, #4
 8000380:	6013      	str	r3, [r2, #0]

	/* Read the result */
	return ADC1->DR;
 8000382:	4b03      	ldr	r3, [pc, #12]	@ (8000390 <ADC_Read+0x2c>)
 8000384:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8000386:	4618      	mov	r0, r3
 8000388:	46bd      	mov	sp, r7
 800038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038e:	4770      	bx	lr
 8000390:	50040000 	.word	0x50040000

08000394 <LED_Init>:
#define LED_PIN		PIN5
#define	PIN13		(1U << 13U)
#define BUTTON_PIN	PIN13

void LED_Init(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0
	/* Enable clock access to GPIOA */
	RCC->AHB2ENR |= GPIOAEN;
 8000398:	4b0d      	ldr	r3, [pc, #52]	@ (80003d0 <LED_Init+0x3c>)
 800039a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800039c:	4a0c      	ldr	r2, [pc, #48]	@ (80003d0 <LED_Init+0x3c>)
 800039e:	f043 0301 	orr.w	r3, r3, #1
 80003a2:	64d3      	str	r3, [r2, #76]	@ 0x4c

	/* Set PA5 mode to output mode */
	GPIOA->MODER |= (1U << 10U);
 80003a4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80003ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80003b2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U << 11U);
 80003b4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80003be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80003c2:	6013      	str	r3, [r2, #0]
}
 80003c4:	bf00      	nop
 80003c6:	46bd      	mov	sp, r7
 80003c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop
 80003d0:	40021000 	.word	0x40021000

080003d4 <Button_Init>:
	/* Set PA5 low */
	GPIOA->ODR &= ~LED_PIN;
}

void Button_Init(void)
{
 80003d4:	b480      	push	{r7}
 80003d6:	af00      	add	r7, sp, #0
	/* Enable clock access to PORTC */
	RCC->AHB2ENR |= GPIOCEN;
 80003d8:	4b0b      	ldr	r3, [pc, #44]	@ (8000408 <Button_Init+0x34>)
 80003da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80003dc:	4a0a      	ldr	r2, [pc, #40]	@ (8000408 <Button_Init+0x34>)
 80003de:	f043 0304 	orr.w	r3, r3, #4
 80003e2:	64d3      	str	r3, [r2, #76]	@ 0x4c

	/* Set PC13 as an input pin */
	GPIOC->MODER &= ~(1U << 26U);
 80003e4:	4b09      	ldr	r3, [pc, #36]	@ (800040c <Button_Init+0x38>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4a08      	ldr	r2, [pc, #32]	@ (800040c <Button_Init+0x38>)
 80003ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80003ee:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~(1U << 27U);
 80003f0:	4b06      	ldr	r3, [pc, #24]	@ (800040c <Button_Init+0x38>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	4a05      	ldr	r2, [pc, #20]	@ (800040c <Button_Init+0x38>)
 80003f6:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
 80003fa:	6013      	str	r3, [r2, #0]
}
 80003fc:	bf00      	nop
 80003fe:	46bd      	mov	sp, r7
 8000400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop
 8000408:	40021000 	.word	0x40021000
 800040c:	48000800 	.word	0x48000800

08000410 <FPU_Enable>:

#include "fpu.h"
#include "stm32l4xx.h"

void FPU_Enable(void)
{
 8000410:	b480      	push	{r7}
 8000412:	af00      	add	r7, sp, #0
	/* Enable floating point unit: Enable CP10 and CPU11 full access*/
	SCB->CPACR |= (1 << 20)|(1 << 21)|(1 << 22)|(1 << 23);
 8000414:	4b06      	ldr	r3, [pc, #24]	@ (8000430 <FPU_Enable+0x20>)
 8000416:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800041a:	4a05      	ldr	r2, [pc, #20]	@ (8000430 <FPU_Enable+0x20>)
 800041c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000420:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

}
 8000424:	bf00      	nop
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	e000ed00 	.word	0xe000ed00

08000434 <main>:
#include <inttypes.h>

uint32_t adc_value;

int main(void)
{
 8000434:	b580      	push	{r7, lr}
 8000436:	af00      	add	r7, sp, #0
	/* Enable FPU */
	FPU_Enable();
 8000438:	f7ff ffea 	bl	8000410 <FPU_Enable>

	/* Initialize UART */
	Debug_UART_Init();
 800043c:	f000 f942 	bl	80006c4 <Debug_UART_Init>

	/* Initialize Timebase */
	Timebase_Init();
 8000440:	f000 f906 	bl	8000650 <Timebase_Init>

	/* Initialize LED */
	LED_Init();
 8000444:	f7ff ffa6 	bl	8000394 <LED_Init>

	/* Initialize button */
	Button_Init();
 8000448:	f7ff ffc4 	bl	80003d4 <Button_Init>

	/* Initialize ADC */
	ADC_Init();
 800044c:	f7ff ff10 	bl	8000270 <ADC_Init>
	Delay(1); // Delay to allow the properly initialization
 8000450:	2001      	movs	r0, #1
 8000452:	f000 f8bb 	bl	80005cc <Delay>

	/* ADC start conversion */
	ADC_Start_Conversion();
 8000456:	f7ff ff75 	bl	8000344 <ADC_Start_Conversion>

	while(1)
	{
		adc_value = ADC_Read();
 800045a:	f7ff ff83 	bl	8000364 <ADC_Read>
 800045e:	4603      	mov	r3, r0
 8000460:	4a06      	ldr	r2, [pc, #24]	@ (800047c <main+0x48>)
 8000462:	6013      	str	r3, [r2, #0]
		printf("Valor: %" PRIu32 "\r\n", adc_value);
 8000464:	4b05      	ldr	r3, [pc, #20]	@ (800047c <main+0x48>)
 8000466:	681b      	ldr	r3, [r3, #0]
 8000468:	4619      	mov	r1, r3
 800046a:	4805      	ldr	r0, [pc, #20]	@ (8000480 <main+0x4c>)
 800046c:	f000 fab0 	bl	80009d0 <iprintf>
		Delay(1);
 8000470:	2001      	movs	r0, #1
 8000472:	f000 f8ab 	bl	80005cc <Delay>
		adc_value = ADC_Read();
 8000476:	bf00      	nop
 8000478:	e7ef      	b.n	800045a <main+0x26>
 800047a:	bf00      	nop
 800047c:	20000078 	.word	0x20000078
 8000480:	080016c0 	.word	0x080016c0

08000484 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	b086      	sub	sp, #24
 8000488:	af00      	add	r7, sp, #0
 800048a:	60f8      	str	r0, [r7, #12]
 800048c:	60b9      	str	r1, [r7, #8]
 800048e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000490:	2300      	movs	r3, #0
 8000492:	617b      	str	r3, [r7, #20]
 8000494:	e00a      	b.n	80004ac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000496:	f3af 8000 	nop.w
 800049a:	4601      	mov	r1, r0
 800049c:	68bb      	ldr	r3, [r7, #8]
 800049e:	1c5a      	adds	r2, r3, #1
 80004a0:	60ba      	str	r2, [r7, #8]
 80004a2:	b2ca      	uxtb	r2, r1
 80004a4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004a6:	697b      	ldr	r3, [r7, #20]
 80004a8:	3301      	adds	r3, #1
 80004aa:	617b      	str	r3, [r7, #20]
 80004ac:	697a      	ldr	r2, [r7, #20]
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	429a      	cmp	r2, r3
 80004b2:	dbf0      	blt.n	8000496 <_read+0x12>
  }

  return len;
 80004b4:	687b      	ldr	r3, [r7, #4]
}
 80004b6:	4618      	mov	r0, r3
 80004b8:	3718      	adds	r7, #24
 80004ba:	46bd      	mov	sp, r7
 80004bc:	bd80      	pop	{r7, pc}

080004be <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004be:	b580      	push	{r7, lr}
 80004c0:	b086      	sub	sp, #24
 80004c2:	af00      	add	r7, sp, #0
 80004c4:	60f8      	str	r0, [r7, #12]
 80004c6:	60b9      	str	r1, [r7, #8]
 80004c8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004ca:	2300      	movs	r3, #0
 80004cc:	617b      	str	r3, [r7, #20]
 80004ce:	e009      	b.n	80004e4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80004d0:	68bb      	ldr	r3, [r7, #8]
 80004d2:	1c5a      	adds	r2, r3, #1
 80004d4:	60ba      	str	r2, [r7, #8]
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	4618      	mov	r0, r3
 80004da:	f000 f8e7 	bl	80006ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004de:	697b      	ldr	r3, [r7, #20]
 80004e0:	3301      	adds	r3, #1
 80004e2:	617b      	str	r3, [r7, #20]
 80004e4:	697a      	ldr	r2, [r7, #20]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	429a      	cmp	r2, r3
 80004ea:	dbf1      	blt.n	80004d0 <_write+0x12>
  }
  return len;
 80004ec:	687b      	ldr	r3, [r7, #4]
}
 80004ee:	4618      	mov	r0, r3
 80004f0:	3718      	adds	r7, #24
 80004f2:	46bd      	mov	sp, r7
 80004f4:	bd80      	pop	{r7, pc}

080004f6 <_close>:

int _close(int file)
{
 80004f6:	b480      	push	{r7}
 80004f8:	b083      	sub	sp, #12
 80004fa:	af00      	add	r7, sp, #0
 80004fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80004fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000502:	4618      	mov	r0, r3
 8000504:	370c      	adds	r7, #12
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr

0800050e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800050e:	b480      	push	{r7}
 8000510:	b083      	sub	sp, #12
 8000512:	af00      	add	r7, sp, #0
 8000514:	6078      	str	r0, [r7, #4]
 8000516:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000518:	683b      	ldr	r3, [r7, #0]
 800051a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800051e:	605a      	str	r2, [r3, #4]
  return 0;
 8000520:	2300      	movs	r3, #0
}
 8000522:	4618      	mov	r0, r3
 8000524:	370c      	adds	r7, #12
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr

0800052e <_isatty>:

int _isatty(int file)
{
 800052e:	b480      	push	{r7}
 8000530:	b083      	sub	sp, #12
 8000532:	af00      	add	r7, sp, #0
 8000534:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000536:	2301      	movs	r3, #1
}
 8000538:	4618      	mov	r0, r3
 800053a:	370c      	adds	r7, #12
 800053c:	46bd      	mov	sp, r7
 800053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000542:	4770      	bx	lr

08000544 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000544:	b480      	push	{r7}
 8000546:	b085      	sub	sp, #20
 8000548:	af00      	add	r7, sp, #0
 800054a:	60f8      	str	r0, [r7, #12]
 800054c:	60b9      	str	r1, [r7, #8]
 800054e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000550:	2300      	movs	r3, #0
}
 8000552:	4618      	mov	r0, r3
 8000554:	3714      	adds	r7, #20
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
	...

08000560 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b086      	sub	sp, #24
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000568:	4a14      	ldr	r2, [pc, #80]	@ (80005bc <_sbrk+0x5c>)
 800056a:	4b15      	ldr	r3, [pc, #84]	@ (80005c0 <_sbrk+0x60>)
 800056c:	1ad3      	subs	r3, r2, r3
 800056e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000570:	697b      	ldr	r3, [r7, #20]
 8000572:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000574:	4b13      	ldr	r3, [pc, #76]	@ (80005c4 <_sbrk+0x64>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d102      	bne.n	8000582 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800057c:	4b11      	ldr	r3, [pc, #68]	@ (80005c4 <_sbrk+0x64>)
 800057e:	4a12      	ldr	r2, [pc, #72]	@ (80005c8 <_sbrk+0x68>)
 8000580:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000582:	4b10      	ldr	r3, [pc, #64]	@ (80005c4 <_sbrk+0x64>)
 8000584:	681a      	ldr	r2, [r3, #0]
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	4413      	add	r3, r2
 800058a:	693a      	ldr	r2, [r7, #16]
 800058c:	429a      	cmp	r2, r3
 800058e:	d207      	bcs.n	80005a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000590:	f000 fac2 	bl	8000b18 <__errno>
 8000594:	4603      	mov	r3, r0
 8000596:	220c      	movs	r2, #12
 8000598:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800059a:	f04f 33ff 	mov.w	r3, #4294967295
 800059e:	e009      	b.n	80005b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005a0:	4b08      	ldr	r3, [pc, #32]	@ (80005c4 <_sbrk+0x64>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005a6:	4b07      	ldr	r3, [pc, #28]	@ (80005c4 <_sbrk+0x64>)
 80005a8:	681a      	ldr	r2, [r3, #0]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4413      	add	r3, r2
 80005ae:	4a05      	ldr	r2, [pc, #20]	@ (80005c4 <_sbrk+0x64>)
 80005b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005b2:	68fb      	ldr	r3, [r7, #12]
}
 80005b4:	4618      	mov	r0, r3
 80005b6:	3718      	adds	r7, #24
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20018000 	.word	0x20018000
 80005c0:	00000400 	.word	0x00000400
 80005c4:	2000007c 	.word	0x2000007c
 80005c8:	200001d8 	.word	0x200001d8

080005cc <Delay>:
static volatile uint32_t g_current_tick_p;


/* Delay in seconds */
void Delay(uint32_t delay)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b084      	sub	sp, #16
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	uint32_t tick_start = Get_Tick();
 80005d4:	f000 f818 	bl	8000608 <Get_Tick>
 80005d8:	60b8      	str	r0, [r7, #8]
	uint32_t wait = delay;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	60fb      	str	r3, [r7, #12]

	if(wait < MAX_DELAY)
 80005de:	68fb      	ldr	r3, [r7, #12]
 80005e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005e4:	d002      	beq.n	80005ec <Delay+0x20>
	{
		wait += (uint32_t)TICK_FREQ;
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	3301      	adds	r3, #1
 80005ea:	60fb      	str	r3, [r7, #12]
	}

	while((Get_Tick() - tick_start) < wait );
 80005ec:	bf00      	nop
 80005ee:	f000 f80b 	bl	8000608 <Get_Tick>
 80005f2:	4602      	mov	r2, r0
 80005f4:	68bb      	ldr	r3, [r7, #8]
 80005f6:	1ad3      	subs	r3, r2, r3
 80005f8:	68fa      	ldr	r2, [r7, #12]
 80005fa:	429a      	cmp	r2, r3
 80005fc:	d8f7      	bhi.n	80005ee <Delay+0x22>
}
 80005fe:	bf00      	nop
 8000600:	bf00      	nop
 8000602:	3710      	adds	r7, #16
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <Get_Tick>:

uint32_t Get_Tick(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800060c:	b672      	cpsid	i
}
 800060e:	bf00      	nop
	__disable_irq();
	g_current_tick_p = g_current_tick;
 8000610:	4b06      	ldr	r3, [pc, #24]	@ (800062c <Get_Tick+0x24>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a06      	ldr	r2, [pc, #24]	@ (8000630 <Get_Tick+0x28>)
 8000616:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000618:	b662      	cpsie	i
}
 800061a:	bf00      	nop
	__enable_irq();

	return g_current_tick_p;
 800061c:	4b04      	ldr	r3, [pc, #16]	@ (8000630 <Get_Tick+0x28>)
 800061e:	681b      	ldr	r3, [r3, #0]
}
 8000620:	4618      	mov	r0, r3
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	20000080 	.word	0x20000080
 8000630:	20000084 	.word	0x20000084

08000634 <Tick_Increment>:

static void Tick_Increment(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
	g_current_tick += TICK_FREQ;
 8000638:	4b04      	ldr	r3, [pc, #16]	@ (800064c <Tick_Increment+0x18>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	3301      	adds	r3, #1
 800063e:	4a03      	ldr	r2, [pc, #12]	@ (800064c <Tick_Increment+0x18>)
 8000640:	6013      	str	r3, [r2, #0]
}
 8000642:	bf00      	nop
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	20000080 	.word	0x20000080

08000650 <Timebase_Init>:

void Timebase_Init(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000654:	b672      	cpsid	i
}
 8000656:	bf00      	nop
	/* Disable global interrupts */
	__disable_irq();

	/* Load the timer with number of clock cycles per second */
	SysTick->LOAD = ONE_SEC_LOAD - 1; // -1 because we count from zero
 8000658:	4b0f      	ldr	r3, [pc, #60]	@ (8000698 <Timebase_Init+0x48>)
 800065a:	4a10      	ldr	r2, [pc, #64]	@ (800069c <Timebase_Init+0x4c>)
 800065c:	605a      	str	r2, [r3, #4]

	/* Clear systick current value register */
	SysTick->VAL = 0;
 800065e:	4b0e      	ldr	r3, [pc, #56]	@ (8000698 <Timebase_Init+0x48>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]

	/* Select internal clock source */
	SysTick->CTRL |= CTRL_CLKSRC;
 8000664:	4b0c      	ldr	r3, [pc, #48]	@ (8000698 <Timebase_Init+0x48>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a0b      	ldr	r2, [pc, #44]	@ (8000698 <Timebase_Init+0x48>)
 800066a:	f043 0304 	orr.w	r3, r3, #4
 800066e:	6013      	str	r3, [r2, #0]

	/* Enable interrupt */
	SysTick->CTRL |= CTRL_TICKINT;
 8000670:	4b09      	ldr	r3, [pc, #36]	@ (8000698 <Timebase_Init+0x48>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a08      	ldr	r2, [pc, #32]	@ (8000698 <Timebase_Init+0x48>)
 8000676:	f043 0302 	orr.w	r3, r3, #2
 800067a:	6013      	str	r3, [r2, #0]

	/* Enable systick */
	SysTick->CTRL |= CTRL_ENABLE;
 800067c:	4b06      	ldr	r3, [pc, #24]	@ (8000698 <Timebase_Init+0x48>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a05      	ldr	r2, [pc, #20]	@ (8000698 <Timebase_Init+0x48>)
 8000682:	f043 0301 	orr.w	r3, r3, #1
 8000686:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000688:	b662      	cpsie	i
}
 800068a:	bf00      	nop

	/* Enable global interrupt */
	__enable_irq();
}
 800068c:	bf00      	nop
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	e000e010 	.word	0xe000e010
 800069c:	003d08ff 	.word	0x003d08ff

080006a0 <SysTick_Handler>:

void SysTick_Handler(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	Tick_Increment();
 80006a4:	f7ff ffc6 	bl	8000634 <Tick_Increment>
}
 80006a8:	bf00      	nop
 80006aa:	bd80      	pop	{r7, pc}

080006ac <__io_putchar>:
static uint16_t UART_Compute_Baudrate(uint32_t peripheral_clk, uint32_t baudrate);
static void UART_Set_Baudrate(uint32_t peripheral_clk, uint32_t baudrate);
static void UART_Write(int ch);

int __io_putchar(int ch)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
	UART_Write(ch);
 80006b4:	6878      	ldr	r0, [r7, #4]
 80006b6:	f000 f85d 	bl	8000774 <UART_Write>
	return ch;
 80006ba:	687b      	ldr	r3, [r7, #4]
}
 80006bc:	4618      	mov	r0, r3
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <Debug_UART_Init>:

void Debug_UART_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
	/* Enable clock access to GPIOA */
	RCC->AHB2ENR |= GPIOAEN;
 80006c8:	4b27      	ldr	r3, [pc, #156]	@ (8000768 <Debug_UART_Init+0xa4>)
 80006ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006cc:	4a26      	ldr	r2, [pc, #152]	@ (8000768 <Debug_UART_Init+0xa4>)
 80006ce:	f043 0301 	orr.w	r3, r3, #1
 80006d2:	64d3      	str	r3, [r2, #76]	@ 0x4c

	/* Set the mode of PA2 to alternate function mode */
	GPIOA->MODER &= ~(1U << 4U);
 80006d4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80006de:	f023 0310 	bic.w	r3, r3, #16
 80006e2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U << 5U);
 80006e4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80006ee:	f043 0320 	orr.w	r3, r3, #32
 80006f2:	6013      	str	r3, [r2, #0]

	/* Set alternate function type to AF7 (UART2_TX) */
	GPIOA->AFR[0] |= (1U << 8U);
 80006f4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80006f8:	6a1b      	ldr	r3, [r3, #32]
 80006fa:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80006fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000702:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 9U);
 8000704:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000708:	6a1b      	ldr	r3, [r3, #32]
 800070a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800070e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000712:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 10U);
 8000714:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000718:	6a1b      	ldr	r3, [r3, #32]
 800071a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800071e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000722:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U << 11U);
 8000724:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000728:	6a1b      	ldr	r3, [r3, #32]
 800072a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800072e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8000732:	6213      	str	r3, [r2, #32]

	/* Enable clock access to UART2 */
	RCC->APB1ENR1 |= UART2EN;
 8000734:	4b0c      	ldr	r3, [pc, #48]	@ (8000768 <Debug_UART_Init+0xa4>)
 8000736:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000738:	4a0b      	ldr	r2, [pc, #44]	@ (8000768 <Debug_UART_Init+0xa4>)
 800073a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800073e:	6593      	str	r3, [r2, #88]	@ 0x58

	/* Configure UART baudrate */
	UART_Set_Baudrate(APB1_CLK, DEBUG_UART_BAUDRATE);
 8000740:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8000744:	4809      	ldr	r0, [pc, #36]	@ (800076c <Debug_UART_Init+0xa8>)
 8000746:	f000 f843 	bl	80007d0 <UART_Set_Baudrate>

	/* Configure transfer direction */
	USART2->CR1 |= CR1_TE;
 800074a:	4b09      	ldr	r3, [pc, #36]	@ (8000770 <Debug_UART_Init+0xac>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4a08      	ldr	r2, [pc, #32]	@ (8000770 <Debug_UART_Init+0xac>)
 8000750:	f043 0308 	orr.w	r3, r3, #8
 8000754:	6013      	str	r3, [r2, #0]

	/* Enable UART mode */
	USART2->CR1 |= CR1_UE;
 8000756:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <Debug_UART_Init+0xac>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	4a05      	ldr	r2, [pc, #20]	@ (8000770 <Debug_UART_Init+0xac>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	6013      	str	r3, [r2, #0]
}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40021000 	.word	0x40021000
 800076c:	003d0900 	.word	0x003d0900
 8000770:	40004400 	.word	0x40004400

08000774 <UART_Write>:

static void UART_Write(int ch)
{
 8000774:	b480      	push	{r7}
 8000776:	b083      	sub	sp, #12
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
	/* Make sure transmit data register is empty */
	while(!(USART2->ISR & ISR_TXE));
 800077c:	bf00      	nop
 800077e:	4b09      	ldr	r3, [pc, #36]	@ (80007a4 <UART_Write+0x30>)
 8000780:	69db      	ldr	r3, [r3, #28]
 8000782:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000786:	2b00      	cmp	r3, #0
 8000788:	d0f9      	beq.n	800077e <UART_Write+0xa>

	/* Write to transmit data register */
	USART2->TDR = (ch & 0xFF);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	b29a      	uxth	r2, r3
 800078e:	4b05      	ldr	r3, [pc, #20]	@ (80007a4 <UART_Write+0x30>)
 8000790:	b2d2      	uxtb	r2, r2
 8000792:	b292      	uxth	r2, r2
 8000794:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8000796:	bf00      	nop
 8000798:	370c      	adds	r7, #12
 800079a:	46bd      	mov	sp, r7
 800079c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	40004400 	.word	0x40004400

080007a8 <UART_Compute_Baudrate>:

static uint16_t UART_Compute_Baudrate(uint32_t peripheral_clk, uint32_t baudrate)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b083      	sub	sp, #12
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
 80007b0:	6039      	str	r1, [r7, #0]
	return ( ( peripheral_clk + ( baudrate / 2U ) ) / baudrate );
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	085a      	lsrs	r2, r3, #1
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	441a      	add	r2, r3
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80007c0:	b29b      	uxth	r3, r3
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
	...

080007d0 <UART_Set_Baudrate>:

static void UART_Set_Baudrate(uint32_t peripheral_clk, uint32_t baudrate)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
 80007d8:	6039      	str	r1, [r7, #0]
	USART2->BRR = UART_Compute_Baudrate(peripheral_clk, baudrate);
 80007da:	6839      	ldr	r1, [r7, #0]
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f7ff ffe3 	bl	80007a8 <UART_Compute_Baudrate>
 80007e2:	4603      	mov	r3, r0
 80007e4:	461a      	mov	r2, r3
 80007e6:	4b03      	ldr	r3, [pc, #12]	@ (80007f4 <UART_Set_Baudrate+0x24>)
 80007e8:	60da      	str	r2, [r3, #12]
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	40004400 	.word	0x40004400

080007f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80007f8:	480d      	ldr	r0, [pc, #52]	@ (8000830 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80007fa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80007fc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000800:	480c      	ldr	r0, [pc, #48]	@ (8000834 <LoopForever+0x6>)
  ldr r1, =_edata
 8000802:	490d      	ldr	r1, [pc, #52]	@ (8000838 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000804:	4a0d      	ldr	r2, [pc, #52]	@ (800083c <LoopForever+0xe>)
  movs r3, #0
 8000806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000808:	e002      	b.n	8000810 <LoopCopyDataInit>

0800080a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800080a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800080c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800080e:	3304      	adds	r3, #4

08000810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000814:	d3f9      	bcc.n	800080a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000816:	4a0a      	ldr	r2, [pc, #40]	@ (8000840 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000818:	4c0a      	ldr	r4, [pc, #40]	@ (8000844 <LoopForever+0x16>)
  movs r3, #0
 800081a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800081c:	e001      	b.n	8000822 <LoopFillZerobss>

0800081e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800081e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000820:	3204      	adds	r2, #4

08000822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000824:	d3fb      	bcc.n	800081e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000826:	f000 f97d 	bl	8000b24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800082a:	f7ff fe03 	bl	8000434 <main>

0800082e <LoopForever>:

LoopForever:
  b LoopForever
 800082e:	e7fe      	b.n	800082e <LoopForever>
  ldr   r0, =_estack
 8000830:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000834:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000838:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800083c:	08001710 	.word	0x08001710
  ldr r2, =_sbss
 8000840:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000844:	200001d4 	.word	0x200001d4

08000848 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000848:	e7fe      	b.n	8000848 <ADC1_2_IRQHandler>
	...

0800084c <std>:
 800084c:	2300      	movs	r3, #0
 800084e:	b510      	push	{r4, lr}
 8000850:	4604      	mov	r4, r0
 8000852:	e9c0 3300 	strd	r3, r3, [r0]
 8000856:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800085a:	6083      	str	r3, [r0, #8]
 800085c:	8181      	strh	r1, [r0, #12]
 800085e:	6643      	str	r3, [r0, #100]	@ 0x64
 8000860:	81c2      	strh	r2, [r0, #14]
 8000862:	6183      	str	r3, [r0, #24]
 8000864:	4619      	mov	r1, r3
 8000866:	2208      	movs	r2, #8
 8000868:	305c      	adds	r0, #92	@ 0x5c
 800086a:	f000 f906 	bl	8000a7a <memset>
 800086e:	4b0d      	ldr	r3, [pc, #52]	@ (80008a4 <std+0x58>)
 8000870:	6263      	str	r3, [r4, #36]	@ 0x24
 8000872:	4b0d      	ldr	r3, [pc, #52]	@ (80008a8 <std+0x5c>)
 8000874:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000876:	4b0d      	ldr	r3, [pc, #52]	@ (80008ac <std+0x60>)
 8000878:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800087a:	4b0d      	ldr	r3, [pc, #52]	@ (80008b0 <std+0x64>)
 800087c:	6323      	str	r3, [r4, #48]	@ 0x30
 800087e:	4b0d      	ldr	r3, [pc, #52]	@ (80008b4 <std+0x68>)
 8000880:	6224      	str	r4, [r4, #32]
 8000882:	429c      	cmp	r4, r3
 8000884:	d006      	beq.n	8000894 <std+0x48>
 8000886:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800088a:	4294      	cmp	r4, r2
 800088c:	d002      	beq.n	8000894 <std+0x48>
 800088e:	33d0      	adds	r3, #208	@ 0xd0
 8000890:	429c      	cmp	r4, r3
 8000892:	d105      	bne.n	80008a0 <std+0x54>
 8000894:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000898:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800089c:	f000 b966 	b.w	8000b6c <__retarget_lock_init_recursive>
 80008a0:	bd10      	pop	{r4, pc}
 80008a2:	bf00      	nop
 80008a4:	080009f5 	.word	0x080009f5
 80008a8:	08000a17 	.word	0x08000a17
 80008ac:	08000a4f 	.word	0x08000a4f
 80008b0:	08000a73 	.word	0x08000a73
 80008b4:	20000088 	.word	0x20000088

080008b8 <stdio_exit_handler>:
 80008b8:	4a02      	ldr	r2, [pc, #8]	@ (80008c4 <stdio_exit_handler+0xc>)
 80008ba:	4903      	ldr	r1, [pc, #12]	@ (80008c8 <stdio_exit_handler+0x10>)
 80008bc:	4803      	ldr	r0, [pc, #12]	@ (80008cc <stdio_exit_handler+0x14>)
 80008be:	f000 b869 	b.w	8000994 <_fwalk_sglue>
 80008c2:	bf00      	nop
 80008c4:	20000000 	.word	0x20000000
 80008c8:	08001409 	.word	0x08001409
 80008cc:	20000010 	.word	0x20000010

080008d0 <cleanup_stdio>:
 80008d0:	6841      	ldr	r1, [r0, #4]
 80008d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000904 <cleanup_stdio+0x34>)
 80008d4:	4299      	cmp	r1, r3
 80008d6:	b510      	push	{r4, lr}
 80008d8:	4604      	mov	r4, r0
 80008da:	d001      	beq.n	80008e0 <cleanup_stdio+0x10>
 80008dc:	f000 fd94 	bl	8001408 <_fflush_r>
 80008e0:	68a1      	ldr	r1, [r4, #8]
 80008e2:	4b09      	ldr	r3, [pc, #36]	@ (8000908 <cleanup_stdio+0x38>)
 80008e4:	4299      	cmp	r1, r3
 80008e6:	d002      	beq.n	80008ee <cleanup_stdio+0x1e>
 80008e8:	4620      	mov	r0, r4
 80008ea:	f000 fd8d 	bl	8001408 <_fflush_r>
 80008ee:	68e1      	ldr	r1, [r4, #12]
 80008f0:	4b06      	ldr	r3, [pc, #24]	@ (800090c <cleanup_stdio+0x3c>)
 80008f2:	4299      	cmp	r1, r3
 80008f4:	d004      	beq.n	8000900 <cleanup_stdio+0x30>
 80008f6:	4620      	mov	r0, r4
 80008f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008fc:	f000 bd84 	b.w	8001408 <_fflush_r>
 8000900:	bd10      	pop	{r4, pc}
 8000902:	bf00      	nop
 8000904:	20000088 	.word	0x20000088
 8000908:	200000f0 	.word	0x200000f0
 800090c:	20000158 	.word	0x20000158

08000910 <global_stdio_init.part.0>:
 8000910:	b510      	push	{r4, lr}
 8000912:	4b0b      	ldr	r3, [pc, #44]	@ (8000940 <global_stdio_init.part.0+0x30>)
 8000914:	4c0b      	ldr	r4, [pc, #44]	@ (8000944 <global_stdio_init.part.0+0x34>)
 8000916:	4a0c      	ldr	r2, [pc, #48]	@ (8000948 <global_stdio_init.part.0+0x38>)
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	4620      	mov	r0, r4
 800091c:	2200      	movs	r2, #0
 800091e:	2104      	movs	r1, #4
 8000920:	f7ff ff94 	bl	800084c <std>
 8000924:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000928:	2201      	movs	r2, #1
 800092a:	2109      	movs	r1, #9
 800092c:	f7ff ff8e 	bl	800084c <std>
 8000930:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000934:	2202      	movs	r2, #2
 8000936:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800093a:	2112      	movs	r1, #18
 800093c:	f7ff bf86 	b.w	800084c <std>
 8000940:	200001c0 	.word	0x200001c0
 8000944:	20000088 	.word	0x20000088
 8000948:	080008b9 	.word	0x080008b9

0800094c <__sfp_lock_acquire>:
 800094c:	4801      	ldr	r0, [pc, #4]	@ (8000954 <__sfp_lock_acquire+0x8>)
 800094e:	f000 b90e 	b.w	8000b6e <__retarget_lock_acquire_recursive>
 8000952:	bf00      	nop
 8000954:	200001c9 	.word	0x200001c9

08000958 <__sfp_lock_release>:
 8000958:	4801      	ldr	r0, [pc, #4]	@ (8000960 <__sfp_lock_release+0x8>)
 800095a:	f000 b909 	b.w	8000b70 <__retarget_lock_release_recursive>
 800095e:	bf00      	nop
 8000960:	200001c9 	.word	0x200001c9

08000964 <__sinit>:
 8000964:	b510      	push	{r4, lr}
 8000966:	4604      	mov	r4, r0
 8000968:	f7ff fff0 	bl	800094c <__sfp_lock_acquire>
 800096c:	6a23      	ldr	r3, [r4, #32]
 800096e:	b11b      	cbz	r3, 8000978 <__sinit+0x14>
 8000970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000974:	f7ff bff0 	b.w	8000958 <__sfp_lock_release>
 8000978:	4b04      	ldr	r3, [pc, #16]	@ (800098c <__sinit+0x28>)
 800097a:	6223      	str	r3, [r4, #32]
 800097c:	4b04      	ldr	r3, [pc, #16]	@ (8000990 <__sinit+0x2c>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d1f5      	bne.n	8000970 <__sinit+0xc>
 8000984:	f7ff ffc4 	bl	8000910 <global_stdio_init.part.0>
 8000988:	e7f2      	b.n	8000970 <__sinit+0xc>
 800098a:	bf00      	nop
 800098c:	080008d1 	.word	0x080008d1
 8000990:	200001c0 	.word	0x200001c0

08000994 <_fwalk_sglue>:
 8000994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000998:	4607      	mov	r7, r0
 800099a:	4688      	mov	r8, r1
 800099c:	4614      	mov	r4, r2
 800099e:	2600      	movs	r6, #0
 80009a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80009a4:	f1b9 0901 	subs.w	r9, r9, #1
 80009a8:	d505      	bpl.n	80009b6 <_fwalk_sglue+0x22>
 80009aa:	6824      	ldr	r4, [r4, #0]
 80009ac:	2c00      	cmp	r4, #0
 80009ae:	d1f7      	bne.n	80009a0 <_fwalk_sglue+0xc>
 80009b0:	4630      	mov	r0, r6
 80009b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80009b6:	89ab      	ldrh	r3, [r5, #12]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	d907      	bls.n	80009cc <_fwalk_sglue+0x38>
 80009bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80009c0:	3301      	adds	r3, #1
 80009c2:	d003      	beq.n	80009cc <_fwalk_sglue+0x38>
 80009c4:	4629      	mov	r1, r5
 80009c6:	4638      	mov	r0, r7
 80009c8:	47c0      	blx	r8
 80009ca:	4306      	orrs	r6, r0
 80009cc:	3568      	adds	r5, #104	@ 0x68
 80009ce:	e7e9      	b.n	80009a4 <_fwalk_sglue+0x10>

080009d0 <iprintf>:
 80009d0:	b40f      	push	{r0, r1, r2, r3}
 80009d2:	b507      	push	{r0, r1, r2, lr}
 80009d4:	4906      	ldr	r1, [pc, #24]	@ (80009f0 <iprintf+0x20>)
 80009d6:	ab04      	add	r3, sp, #16
 80009d8:	6808      	ldr	r0, [r1, #0]
 80009da:	f853 2b04 	ldr.w	r2, [r3], #4
 80009de:	6881      	ldr	r1, [r0, #8]
 80009e0:	9301      	str	r3, [sp, #4]
 80009e2:	f000 f9e9 	bl	8000db8 <_vfiprintf_r>
 80009e6:	b003      	add	sp, #12
 80009e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80009ec:	b004      	add	sp, #16
 80009ee:	4770      	bx	lr
 80009f0:	2000000c 	.word	0x2000000c

080009f4 <__sread>:
 80009f4:	b510      	push	{r4, lr}
 80009f6:	460c      	mov	r4, r1
 80009f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80009fc:	f000 f868 	bl	8000ad0 <_read_r>
 8000a00:	2800      	cmp	r0, #0
 8000a02:	bfab      	itete	ge
 8000a04:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8000a06:	89a3      	ldrhlt	r3, [r4, #12]
 8000a08:	181b      	addge	r3, r3, r0
 8000a0a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000a0e:	bfac      	ite	ge
 8000a10:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000a12:	81a3      	strhlt	r3, [r4, #12]
 8000a14:	bd10      	pop	{r4, pc}

08000a16 <__swrite>:
 8000a16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a1a:	461f      	mov	r7, r3
 8000a1c:	898b      	ldrh	r3, [r1, #12]
 8000a1e:	05db      	lsls	r3, r3, #23
 8000a20:	4605      	mov	r5, r0
 8000a22:	460c      	mov	r4, r1
 8000a24:	4616      	mov	r6, r2
 8000a26:	d505      	bpl.n	8000a34 <__swrite+0x1e>
 8000a28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	2200      	movs	r2, #0
 8000a30:	f000 f83c 	bl	8000aac <_lseek_r>
 8000a34:	89a3      	ldrh	r3, [r4, #12]
 8000a36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000a3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000a3e:	81a3      	strh	r3, [r4, #12]
 8000a40:	4632      	mov	r2, r6
 8000a42:	463b      	mov	r3, r7
 8000a44:	4628      	mov	r0, r5
 8000a46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000a4a:	f000 b853 	b.w	8000af4 <_write_r>

08000a4e <__sseek>:
 8000a4e:	b510      	push	{r4, lr}
 8000a50:	460c      	mov	r4, r1
 8000a52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a56:	f000 f829 	bl	8000aac <_lseek_r>
 8000a5a:	1c43      	adds	r3, r0, #1
 8000a5c:	89a3      	ldrh	r3, [r4, #12]
 8000a5e:	bf15      	itete	ne
 8000a60:	6560      	strne	r0, [r4, #84]	@ 0x54
 8000a62:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8000a66:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000a6a:	81a3      	strheq	r3, [r4, #12]
 8000a6c:	bf18      	it	ne
 8000a6e:	81a3      	strhne	r3, [r4, #12]
 8000a70:	bd10      	pop	{r4, pc}

08000a72 <__sclose>:
 8000a72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a76:	f000 b809 	b.w	8000a8c <_close_r>

08000a7a <memset>:
 8000a7a:	4402      	add	r2, r0
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	4293      	cmp	r3, r2
 8000a80:	d100      	bne.n	8000a84 <memset+0xa>
 8000a82:	4770      	bx	lr
 8000a84:	f803 1b01 	strb.w	r1, [r3], #1
 8000a88:	e7f9      	b.n	8000a7e <memset+0x4>
	...

08000a8c <_close_r>:
 8000a8c:	b538      	push	{r3, r4, r5, lr}
 8000a8e:	4d06      	ldr	r5, [pc, #24]	@ (8000aa8 <_close_r+0x1c>)
 8000a90:	2300      	movs	r3, #0
 8000a92:	4604      	mov	r4, r0
 8000a94:	4608      	mov	r0, r1
 8000a96:	602b      	str	r3, [r5, #0]
 8000a98:	f7ff fd2d 	bl	80004f6 <_close>
 8000a9c:	1c43      	adds	r3, r0, #1
 8000a9e:	d102      	bne.n	8000aa6 <_close_r+0x1a>
 8000aa0:	682b      	ldr	r3, [r5, #0]
 8000aa2:	b103      	cbz	r3, 8000aa6 <_close_r+0x1a>
 8000aa4:	6023      	str	r3, [r4, #0]
 8000aa6:	bd38      	pop	{r3, r4, r5, pc}
 8000aa8:	200001c4 	.word	0x200001c4

08000aac <_lseek_r>:
 8000aac:	b538      	push	{r3, r4, r5, lr}
 8000aae:	4d07      	ldr	r5, [pc, #28]	@ (8000acc <_lseek_r+0x20>)
 8000ab0:	4604      	mov	r4, r0
 8000ab2:	4608      	mov	r0, r1
 8000ab4:	4611      	mov	r1, r2
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	602a      	str	r2, [r5, #0]
 8000aba:	461a      	mov	r2, r3
 8000abc:	f7ff fd42 	bl	8000544 <_lseek>
 8000ac0:	1c43      	adds	r3, r0, #1
 8000ac2:	d102      	bne.n	8000aca <_lseek_r+0x1e>
 8000ac4:	682b      	ldr	r3, [r5, #0]
 8000ac6:	b103      	cbz	r3, 8000aca <_lseek_r+0x1e>
 8000ac8:	6023      	str	r3, [r4, #0]
 8000aca:	bd38      	pop	{r3, r4, r5, pc}
 8000acc:	200001c4 	.word	0x200001c4

08000ad0 <_read_r>:
 8000ad0:	b538      	push	{r3, r4, r5, lr}
 8000ad2:	4d07      	ldr	r5, [pc, #28]	@ (8000af0 <_read_r+0x20>)
 8000ad4:	4604      	mov	r4, r0
 8000ad6:	4608      	mov	r0, r1
 8000ad8:	4611      	mov	r1, r2
 8000ada:	2200      	movs	r2, #0
 8000adc:	602a      	str	r2, [r5, #0]
 8000ade:	461a      	mov	r2, r3
 8000ae0:	f7ff fcd0 	bl	8000484 <_read>
 8000ae4:	1c43      	adds	r3, r0, #1
 8000ae6:	d102      	bne.n	8000aee <_read_r+0x1e>
 8000ae8:	682b      	ldr	r3, [r5, #0]
 8000aea:	b103      	cbz	r3, 8000aee <_read_r+0x1e>
 8000aec:	6023      	str	r3, [r4, #0]
 8000aee:	bd38      	pop	{r3, r4, r5, pc}
 8000af0:	200001c4 	.word	0x200001c4

08000af4 <_write_r>:
 8000af4:	b538      	push	{r3, r4, r5, lr}
 8000af6:	4d07      	ldr	r5, [pc, #28]	@ (8000b14 <_write_r+0x20>)
 8000af8:	4604      	mov	r4, r0
 8000afa:	4608      	mov	r0, r1
 8000afc:	4611      	mov	r1, r2
 8000afe:	2200      	movs	r2, #0
 8000b00:	602a      	str	r2, [r5, #0]
 8000b02:	461a      	mov	r2, r3
 8000b04:	f7ff fcdb 	bl	80004be <_write>
 8000b08:	1c43      	adds	r3, r0, #1
 8000b0a:	d102      	bne.n	8000b12 <_write_r+0x1e>
 8000b0c:	682b      	ldr	r3, [r5, #0]
 8000b0e:	b103      	cbz	r3, 8000b12 <_write_r+0x1e>
 8000b10:	6023      	str	r3, [r4, #0]
 8000b12:	bd38      	pop	{r3, r4, r5, pc}
 8000b14:	200001c4 	.word	0x200001c4

08000b18 <__errno>:
 8000b18:	4b01      	ldr	r3, [pc, #4]	@ (8000b20 <__errno+0x8>)
 8000b1a:	6818      	ldr	r0, [r3, #0]
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	2000000c 	.word	0x2000000c

08000b24 <__libc_init_array>:
 8000b24:	b570      	push	{r4, r5, r6, lr}
 8000b26:	4d0d      	ldr	r5, [pc, #52]	@ (8000b5c <__libc_init_array+0x38>)
 8000b28:	4c0d      	ldr	r4, [pc, #52]	@ (8000b60 <__libc_init_array+0x3c>)
 8000b2a:	1b64      	subs	r4, r4, r5
 8000b2c:	10a4      	asrs	r4, r4, #2
 8000b2e:	2600      	movs	r6, #0
 8000b30:	42a6      	cmp	r6, r4
 8000b32:	d109      	bne.n	8000b48 <__libc_init_array+0x24>
 8000b34:	4d0b      	ldr	r5, [pc, #44]	@ (8000b64 <__libc_init_array+0x40>)
 8000b36:	4c0c      	ldr	r4, [pc, #48]	@ (8000b68 <__libc_init_array+0x44>)
 8000b38:	f000 fdb6 	bl	80016a8 <_init>
 8000b3c:	1b64      	subs	r4, r4, r5
 8000b3e:	10a4      	asrs	r4, r4, #2
 8000b40:	2600      	movs	r6, #0
 8000b42:	42a6      	cmp	r6, r4
 8000b44:	d105      	bne.n	8000b52 <__libc_init_array+0x2e>
 8000b46:	bd70      	pop	{r4, r5, r6, pc}
 8000b48:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b4c:	4798      	blx	r3
 8000b4e:	3601      	adds	r6, #1
 8000b50:	e7ee      	b.n	8000b30 <__libc_init_array+0xc>
 8000b52:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b56:	4798      	blx	r3
 8000b58:	3601      	adds	r6, #1
 8000b5a:	e7f2      	b.n	8000b42 <__libc_init_array+0x1e>
 8000b5c:	08001708 	.word	0x08001708
 8000b60:	08001708 	.word	0x08001708
 8000b64:	08001708 	.word	0x08001708
 8000b68:	0800170c 	.word	0x0800170c

08000b6c <__retarget_lock_init_recursive>:
 8000b6c:	4770      	bx	lr

08000b6e <__retarget_lock_acquire_recursive>:
 8000b6e:	4770      	bx	lr

08000b70 <__retarget_lock_release_recursive>:
 8000b70:	4770      	bx	lr
	...

08000b74 <_free_r>:
 8000b74:	b538      	push	{r3, r4, r5, lr}
 8000b76:	4605      	mov	r5, r0
 8000b78:	2900      	cmp	r1, #0
 8000b7a:	d041      	beq.n	8000c00 <_free_r+0x8c>
 8000b7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000b80:	1f0c      	subs	r4, r1, #4
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	bfb8      	it	lt
 8000b86:	18e4      	addlt	r4, r4, r3
 8000b88:	f000 f8e0 	bl	8000d4c <__malloc_lock>
 8000b8c:	4a1d      	ldr	r2, [pc, #116]	@ (8000c04 <_free_r+0x90>)
 8000b8e:	6813      	ldr	r3, [r2, #0]
 8000b90:	b933      	cbnz	r3, 8000ba0 <_free_r+0x2c>
 8000b92:	6063      	str	r3, [r4, #4]
 8000b94:	6014      	str	r4, [r2, #0]
 8000b96:	4628      	mov	r0, r5
 8000b98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b9c:	f000 b8dc 	b.w	8000d58 <__malloc_unlock>
 8000ba0:	42a3      	cmp	r3, r4
 8000ba2:	d908      	bls.n	8000bb6 <_free_r+0x42>
 8000ba4:	6820      	ldr	r0, [r4, #0]
 8000ba6:	1821      	adds	r1, r4, r0
 8000ba8:	428b      	cmp	r3, r1
 8000baa:	bf01      	itttt	eq
 8000bac:	6819      	ldreq	r1, [r3, #0]
 8000bae:	685b      	ldreq	r3, [r3, #4]
 8000bb0:	1809      	addeq	r1, r1, r0
 8000bb2:	6021      	streq	r1, [r4, #0]
 8000bb4:	e7ed      	b.n	8000b92 <_free_r+0x1e>
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	b10b      	cbz	r3, 8000bc0 <_free_r+0x4c>
 8000bbc:	42a3      	cmp	r3, r4
 8000bbe:	d9fa      	bls.n	8000bb6 <_free_r+0x42>
 8000bc0:	6811      	ldr	r1, [r2, #0]
 8000bc2:	1850      	adds	r0, r2, r1
 8000bc4:	42a0      	cmp	r0, r4
 8000bc6:	d10b      	bne.n	8000be0 <_free_r+0x6c>
 8000bc8:	6820      	ldr	r0, [r4, #0]
 8000bca:	4401      	add	r1, r0
 8000bcc:	1850      	adds	r0, r2, r1
 8000bce:	4283      	cmp	r3, r0
 8000bd0:	6011      	str	r1, [r2, #0]
 8000bd2:	d1e0      	bne.n	8000b96 <_free_r+0x22>
 8000bd4:	6818      	ldr	r0, [r3, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	6053      	str	r3, [r2, #4]
 8000bda:	4408      	add	r0, r1
 8000bdc:	6010      	str	r0, [r2, #0]
 8000bde:	e7da      	b.n	8000b96 <_free_r+0x22>
 8000be0:	d902      	bls.n	8000be8 <_free_r+0x74>
 8000be2:	230c      	movs	r3, #12
 8000be4:	602b      	str	r3, [r5, #0]
 8000be6:	e7d6      	b.n	8000b96 <_free_r+0x22>
 8000be8:	6820      	ldr	r0, [r4, #0]
 8000bea:	1821      	adds	r1, r4, r0
 8000bec:	428b      	cmp	r3, r1
 8000bee:	bf04      	itt	eq
 8000bf0:	6819      	ldreq	r1, [r3, #0]
 8000bf2:	685b      	ldreq	r3, [r3, #4]
 8000bf4:	6063      	str	r3, [r4, #4]
 8000bf6:	bf04      	itt	eq
 8000bf8:	1809      	addeq	r1, r1, r0
 8000bfa:	6021      	streq	r1, [r4, #0]
 8000bfc:	6054      	str	r4, [r2, #4]
 8000bfe:	e7ca      	b.n	8000b96 <_free_r+0x22>
 8000c00:	bd38      	pop	{r3, r4, r5, pc}
 8000c02:	bf00      	nop
 8000c04:	200001d0 	.word	0x200001d0

08000c08 <sbrk_aligned>:
 8000c08:	b570      	push	{r4, r5, r6, lr}
 8000c0a:	4e0f      	ldr	r6, [pc, #60]	@ (8000c48 <sbrk_aligned+0x40>)
 8000c0c:	460c      	mov	r4, r1
 8000c0e:	6831      	ldr	r1, [r6, #0]
 8000c10:	4605      	mov	r5, r0
 8000c12:	b911      	cbnz	r1, 8000c1a <sbrk_aligned+0x12>
 8000c14:	f000 fcb4 	bl	8001580 <_sbrk_r>
 8000c18:	6030      	str	r0, [r6, #0]
 8000c1a:	4621      	mov	r1, r4
 8000c1c:	4628      	mov	r0, r5
 8000c1e:	f000 fcaf 	bl	8001580 <_sbrk_r>
 8000c22:	1c43      	adds	r3, r0, #1
 8000c24:	d103      	bne.n	8000c2e <sbrk_aligned+0x26>
 8000c26:	f04f 34ff 	mov.w	r4, #4294967295
 8000c2a:	4620      	mov	r0, r4
 8000c2c:	bd70      	pop	{r4, r5, r6, pc}
 8000c2e:	1cc4      	adds	r4, r0, #3
 8000c30:	f024 0403 	bic.w	r4, r4, #3
 8000c34:	42a0      	cmp	r0, r4
 8000c36:	d0f8      	beq.n	8000c2a <sbrk_aligned+0x22>
 8000c38:	1a21      	subs	r1, r4, r0
 8000c3a:	4628      	mov	r0, r5
 8000c3c:	f000 fca0 	bl	8001580 <_sbrk_r>
 8000c40:	3001      	adds	r0, #1
 8000c42:	d1f2      	bne.n	8000c2a <sbrk_aligned+0x22>
 8000c44:	e7ef      	b.n	8000c26 <sbrk_aligned+0x1e>
 8000c46:	bf00      	nop
 8000c48:	200001cc 	.word	0x200001cc

08000c4c <_malloc_r>:
 8000c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c50:	1ccd      	adds	r5, r1, #3
 8000c52:	f025 0503 	bic.w	r5, r5, #3
 8000c56:	3508      	adds	r5, #8
 8000c58:	2d0c      	cmp	r5, #12
 8000c5a:	bf38      	it	cc
 8000c5c:	250c      	movcc	r5, #12
 8000c5e:	2d00      	cmp	r5, #0
 8000c60:	4606      	mov	r6, r0
 8000c62:	db01      	blt.n	8000c68 <_malloc_r+0x1c>
 8000c64:	42a9      	cmp	r1, r5
 8000c66:	d904      	bls.n	8000c72 <_malloc_r+0x26>
 8000c68:	230c      	movs	r3, #12
 8000c6a:	6033      	str	r3, [r6, #0]
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000d48 <_malloc_r+0xfc>
 8000c76:	f000 f869 	bl	8000d4c <__malloc_lock>
 8000c7a:	f8d8 3000 	ldr.w	r3, [r8]
 8000c7e:	461c      	mov	r4, r3
 8000c80:	bb44      	cbnz	r4, 8000cd4 <_malloc_r+0x88>
 8000c82:	4629      	mov	r1, r5
 8000c84:	4630      	mov	r0, r6
 8000c86:	f7ff ffbf 	bl	8000c08 <sbrk_aligned>
 8000c8a:	1c43      	adds	r3, r0, #1
 8000c8c:	4604      	mov	r4, r0
 8000c8e:	d158      	bne.n	8000d42 <_malloc_r+0xf6>
 8000c90:	f8d8 4000 	ldr.w	r4, [r8]
 8000c94:	4627      	mov	r7, r4
 8000c96:	2f00      	cmp	r7, #0
 8000c98:	d143      	bne.n	8000d22 <_malloc_r+0xd6>
 8000c9a:	2c00      	cmp	r4, #0
 8000c9c:	d04b      	beq.n	8000d36 <_malloc_r+0xea>
 8000c9e:	6823      	ldr	r3, [r4, #0]
 8000ca0:	4639      	mov	r1, r7
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	eb04 0903 	add.w	r9, r4, r3
 8000ca8:	f000 fc6a 	bl	8001580 <_sbrk_r>
 8000cac:	4581      	cmp	r9, r0
 8000cae:	d142      	bne.n	8000d36 <_malloc_r+0xea>
 8000cb0:	6821      	ldr	r1, [r4, #0]
 8000cb2:	1a6d      	subs	r5, r5, r1
 8000cb4:	4629      	mov	r1, r5
 8000cb6:	4630      	mov	r0, r6
 8000cb8:	f7ff ffa6 	bl	8000c08 <sbrk_aligned>
 8000cbc:	3001      	adds	r0, #1
 8000cbe:	d03a      	beq.n	8000d36 <_malloc_r+0xea>
 8000cc0:	6823      	ldr	r3, [r4, #0]
 8000cc2:	442b      	add	r3, r5
 8000cc4:	6023      	str	r3, [r4, #0]
 8000cc6:	f8d8 3000 	ldr.w	r3, [r8]
 8000cca:	685a      	ldr	r2, [r3, #4]
 8000ccc:	bb62      	cbnz	r2, 8000d28 <_malloc_r+0xdc>
 8000cce:	f8c8 7000 	str.w	r7, [r8]
 8000cd2:	e00f      	b.n	8000cf4 <_malloc_r+0xa8>
 8000cd4:	6822      	ldr	r2, [r4, #0]
 8000cd6:	1b52      	subs	r2, r2, r5
 8000cd8:	d420      	bmi.n	8000d1c <_malloc_r+0xd0>
 8000cda:	2a0b      	cmp	r2, #11
 8000cdc:	d917      	bls.n	8000d0e <_malloc_r+0xc2>
 8000cde:	1961      	adds	r1, r4, r5
 8000ce0:	42a3      	cmp	r3, r4
 8000ce2:	6025      	str	r5, [r4, #0]
 8000ce4:	bf18      	it	ne
 8000ce6:	6059      	strne	r1, [r3, #4]
 8000ce8:	6863      	ldr	r3, [r4, #4]
 8000cea:	bf08      	it	eq
 8000cec:	f8c8 1000 	streq.w	r1, [r8]
 8000cf0:	5162      	str	r2, [r4, r5]
 8000cf2:	604b      	str	r3, [r1, #4]
 8000cf4:	4630      	mov	r0, r6
 8000cf6:	f000 f82f 	bl	8000d58 <__malloc_unlock>
 8000cfa:	f104 000b 	add.w	r0, r4, #11
 8000cfe:	1d23      	adds	r3, r4, #4
 8000d00:	f020 0007 	bic.w	r0, r0, #7
 8000d04:	1ac2      	subs	r2, r0, r3
 8000d06:	bf1c      	itt	ne
 8000d08:	1a1b      	subne	r3, r3, r0
 8000d0a:	50a3      	strne	r3, [r4, r2]
 8000d0c:	e7af      	b.n	8000c6e <_malloc_r+0x22>
 8000d0e:	6862      	ldr	r2, [r4, #4]
 8000d10:	42a3      	cmp	r3, r4
 8000d12:	bf0c      	ite	eq
 8000d14:	f8c8 2000 	streq.w	r2, [r8]
 8000d18:	605a      	strne	r2, [r3, #4]
 8000d1a:	e7eb      	b.n	8000cf4 <_malloc_r+0xa8>
 8000d1c:	4623      	mov	r3, r4
 8000d1e:	6864      	ldr	r4, [r4, #4]
 8000d20:	e7ae      	b.n	8000c80 <_malloc_r+0x34>
 8000d22:	463c      	mov	r4, r7
 8000d24:	687f      	ldr	r7, [r7, #4]
 8000d26:	e7b6      	b.n	8000c96 <_malloc_r+0x4a>
 8000d28:	461a      	mov	r2, r3
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	42a3      	cmp	r3, r4
 8000d2e:	d1fb      	bne.n	8000d28 <_malloc_r+0xdc>
 8000d30:	2300      	movs	r3, #0
 8000d32:	6053      	str	r3, [r2, #4]
 8000d34:	e7de      	b.n	8000cf4 <_malloc_r+0xa8>
 8000d36:	230c      	movs	r3, #12
 8000d38:	6033      	str	r3, [r6, #0]
 8000d3a:	4630      	mov	r0, r6
 8000d3c:	f000 f80c 	bl	8000d58 <__malloc_unlock>
 8000d40:	e794      	b.n	8000c6c <_malloc_r+0x20>
 8000d42:	6005      	str	r5, [r0, #0]
 8000d44:	e7d6      	b.n	8000cf4 <_malloc_r+0xa8>
 8000d46:	bf00      	nop
 8000d48:	200001d0 	.word	0x200001d0

08000d4c <__malloc_lock>:
 8000d4c:	4801      	ldr	r0, [pc, #4]	@ (8000d54 <__malloc_lock+0x8>)
 8000d4e:	f7ff bf0e 	b.w	8000b6e <__retarget_lock_acquire_recursive>
 8000d52:	bf00      	nop
 8000d54:	200001c8 	.word	0x200001c8

08000d58 <__malloc_unlock>:
 8000d58:	4801      	ldr	r0, [pc, #4]	@ (8000d60 <__malloc_unlock+0x8>)
 8000d5a:	f7ff bf09 	b.w	8000b70 <__retarget_lock_release_recursive>
 8000d5e:	bf00      	nop
 8000d60:	200001c8 	.word	0x200001c8

08000d64 <__sfputc_r>:
 8000d64:	6893      	ldr	r3, [r2, #8]
 8000d66:	3b01      	subs	r3, #1
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	b410      	push	{r4}
 8000d6c:	6093      	str	r3, [r2, #8]
 8000d6e:	da08      	bge.n	8000d82 <__sfputc_r+0x1e>
 8000d70:	6994      	ldr	r4, [r2, #24]
 8000d72:	42a3      	cmp	r3, r4
 8000d74:	db01      	blt.n	8000d7a <__sfputc_r+0x16>
 8000d76:	290a      	cmp	r1, #10
 8000d78:	d103      	bne.n	8000d82 <__sfputc_r+0x1e>
 8000d7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d7e:	f000 bb6b 	b.w	8001458 <__swbuf_r>
 8000d82:	6813      	ldr	r3, [r2, #0]
 8000d84:	1c58      	adds	r0, r3, #1
 8000d86:	6010      	str	r0, [r2, #0]
 8000d88:	7019      	strb	r1, [r3, #0]
 8000d8a:	4608      	mov	r0, r1
 8000d8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <__sfputs_r>:
 8000d92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d94:	4606      	mov	r6, r0
 8000d96:	460f      	mov	r7, r1
 8000d98:	4614      	mov	r4, r2
 8000d9a:	18d5      	adds	r5, r2, r3
 8000d9c:	42ac      	cmp	r4, r5
 8000d9e:	d101      	bne.n	8000da4 <__sfputs_r+0x12>
 8000da0:	2000      	movs	r0, #0
 8000da2:	e007      	b.n	8000db4 <__sfputs_r+0x22>
 8000da4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000da8:	463a      	mov	r2, r7
 8000daa:	4630      	mov	r0, r6
 8000dac:	f7ff ffda 	bl	8000d64 <__sfputc_r>
 8000db0:	1c43      	adds	r3, r0, #1
 8000db2:	d1f3      	bne.n	8000d9c <__sfputs_r+0xa>
 8000db4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000db8 <_vfiprintf_r>:
 8000db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000dbc:	460d      	mov	r5, r1
 8000dbe:	b09d      	sub	sp, #116	@ 0x74
 8000dc0:	4614      	mov	r4, r2
 8000dc2:	4698      	mov	r8, r3
 8000dc4:	4606      	mov	r6, r0
 8000dc6:	b118      	cbz	r0, 8000dd0 <_vfiprintf_r+0x18>
 8000dc8:	6a03      	ldr	r3, [r0, #32]
 8000dca:	b90b      	cbnz	r3, 8000dd0 <_vfiprintf_r+0x18>
 8000dcc:	f7ff fdca 	bl	8000964 <__sinit>
 8000dd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000dd2:	07d9      	lsls	r1, r3, #31
 8000dd4:	d405      	bmi.n	8000de2 <_vfiprintf_r+0x2a>
 8000dd6:	89ab      	ldrh	r3, [r5, #12]
 8000dd8:	059a      	lsls	r2, r3, #22
 8000dda:	d402      	bmi.n	8000de2 <_vfiprintf_r+0x2a>
 8000ddc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000dde:	f7ff fec6 	bl	8000b6e <__retarget_lock_acquire_recursive>
 8000de2:	89ab      	ldrh	r3, [r5, #12]
 8000de4:	071b      	lsls	r3, r3, #28
 8000de6:	d501      	bpl.n	8000dec <_vfiprintf_r+0x34>
 8000de8:	692b      	ldr	r3, [r5, #16]
 8000dea:	b99b      	cbnz	r3, 8000e14 <_vfiprintf_r+0x5c>
 8000dec:	4629      	mov	r1, r5
 8000dee:	4630      	mov	r0, r6
 8000df0:	f000 fb70 	bl	80014d4 <__swsetup_r>
 8000df4:	b170      	cbz	r0, 8000e14 <_vfiprintf_r+0x5c>
 8000df6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000df8:	07dc      	lsls	r4, r3, #31
 8000dfa:	d504      	bpl.n	8000e06 <_vfiprintf_r+0x4e>
 8000dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000e00:	b01d      	add	sp, #116	@ 0x74
 8000e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e06:	89ab      	ldrh	r3, [r5, #12]
 8000e08:	0598      	lsls	r0, r3, #22
 8000e0a:	d4f7      	bmi.n	8000dfc <_vfiprintf_r+0x44>
 8000e0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000e0e:	f7ff feaf 	bl	8000b70 <__retarget_lock_release_recursive>
 8000e12:	e7f3      	b.n	8000dfc <_vfiprintf_r+0x44>
 8000e14:	2300      	movs	r3, #0
 8000e16:	9309      	str	r3, [sp, #36]	@ 0x24
 8000e18:	2320      	movs	r3, #32
 8000e1a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000e1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8000e22:	2330      	movs	r3, #48	@ 0x30
 8000e24:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000fd4 <_vfiprintf_r+0x21c>
 8000e28:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000e2c:	f04f 0901 	mov.w	r9, #1
 8000e30:	4623      	mov	r3, r4
 8000e32:	469a      	mov	sl, r3
 8000e34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000e38:	b10a      	cbz	r2, 8000e3e <_vfiprintf_r+0x86>
 8000e3a:	2a25      	cmp	r2, #37	@ 0x25
 8000e3c:	d1f9      	bne.n	8000e32 <_vfiprintf_r+0x7a>
 8000e3e:	ebba 0b04 	subs.w	fp, sl, r4
 8000e42:	d00b      	beq.n	8000e5c <_vfiprintf_r+0xa4>
 8000e44:	465b      	mov	r3, fp
 8000e46:	4622      	mov	r2, r4
 8000e48:	4629      	mov	r1, r5
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	f7ff ffa1 	bl	8000d92 <__sfputs_r>
 8000e50:	3001      	adds	r0, #1
 8000e52:	f000 80a7 	beq.w	8000fa4 <_vfiprintf_r+0x1ec>
 8000e56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000e58:	445a      	add	r2, fp
 8000e5a:	9209      	str	r2, [sp, #36]	@ 0x24
 8000e5c:	f89a 3000 	ldrb.w	r3, [sl]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	f000 809f 	beq.w	8000fa4 <_vfiprintf_r+0x1ec>
 8000e66:	2300      	movs	r3, #0
 8000e68:	f04f 32ff 	mov.w	r2, #4294967295
 8000e6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000e70:	f10a 0a01 	add.w	sl, sl, #1
 8000e74:	9304      	str	r3, [sp, #16]
 8000e76:	9307      	str	r3, [sp, #28]
 8000e78:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000e7c:	931a      	str	r3, [sp, #104]	@ 0x68
 8000e7e:	4654      	mov	r4, sl
 8000e80:	2205      	movs	r2, #5
 8000e82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e86:	4853      	ldr	r0, [pc, #332]	@ (8000fd4 <_vfiprintf_r+0x21c>)
 8000e88:	f7ff f9a2 	bl	80001d0 <memchr>
 8000e8c:	9a04      	ldr	r2, [sp, #16]
 8000e8e:	b9d8      	cbnz	r0, 8000ec8 <_vfiprintf_r+0x110>
 8000e90:	06d1      	lsls	r1, r2, #27
 8000e92:	bf44      	itt	mi
 8000e94:	2320      	movmi	r3, #32
 8000e96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000e9a:	0713      	lsls	r3, r2, #28
 8000e9c:	bf44      	itt	mi
 8000e9e:	232b      	movmi	r3, #43	@ 0x2b
 8000ea0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000ea4:	f89a 3000 	ldrb.w	r3, [sl]
 8000ea8:	2b2a      	cmp	r3, #42	@ 0x2a
 8000eaa:	d015      	beq.n	8000ed8 <_vfiprintf_r+0x120>
 8000eac:	9a07      	ldr	r2, [sp, #28]
 8000eae:	4654      	mov	r4, sl
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	f04f 0c0a 	mov.w	ip, #10
 8000eb6:	4621      	mov	r1, r4
 8000eb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000ebc:	3b30      	subs	r3, #48	@ 0x30
 8000ebe:	2b09      	cmp	r3, #9
 8000ec0:	d94b      	bls.n	8000f5a <_vfiprintf_r+0x1a2>
 8000ec2:	b1b0      	cbz	r0, 8000ef2 <_vfiprintf_r+0x13a>
 8000ec4:	9207      	str	r2, [sp, #28]
 8000ec6:	e014      	b.n	8000ef2 <_vfiprintf_r+0x13a>
 8000ec8:	eba0 0308 	sub.w	r3, r0, r8
 8000ecc:	fa09 f303 	lsl.w	r3, r9, r3
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	9304      	str	r3, [sp, #16]
 8000ed4:	46a2      	mov	sl, r4
 8000ed6:	e7d2      	b.n	8000e7e <_vfiprintf_r+0xc6>
 8000ed8:	9b03      	ldr	r3, [sp, #12]
 8000eda:	1d19      	adds	r1, r3, #4
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	9103      	str	r1, [sp, #12]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	bfbb      	ittet	lt
 8000ee4:	425b      	neglt	r3, r3
 8000ee6:	f042 0202 	orrlt.w	r2, r2, #2
 8000eea:	9307      	strge	r3, [sp, #28]
 8000eec:	9307      	strlt	r3, [sp, #28]
 8000eee:	bfb8      	it	lt
 8000ef0:	9204      	strlt	r2, [sp, #16]
 8000ef2:	7823      	ldrb	r3, [r4, #0]
 8000ef4:	2b2e      	cmp	r3, #46	@ 0x2e
 8000ef6:	d10a      	bne.n	8000f0e <_vfiprintf_r+0x156>
 8000ef8:	7863      	ldrb	r3, [r4, #1]
 8000efa:	2b2a      	cmp	r3, #42	@ 0x2a
 8000efc:	d132      	bne.n	8000f64 <_vfiprintf_r+0x1ac>
 8000efe:	9b03      	ldr	r3, [sp, #12]
 8000f00:	1d1a      	adds	r2, r3, #4
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	9203      	str	r2, [sp, #12]
 8000f06:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000f0a:	3402      	adds	r4, #2
 8000f0c:	9305      	str	r3, [sp, #20]
 8000f0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000fe4 <_vfiprintf_r+0x22c>
 8000f12:	7821      	ldrb	r1, [r4, #0]
 8000f14:	2203      	movs	r2, #3
 8000f16:	4650      	mov	r0, sl
 8000f18:	f7ff f95a 	bl	80001d0 <memchr>
 8000f1c:	b138      	cbz	r0, 8000f2e <_vfiprintf_r+0x176>
 8000f1e:	9b04      	ldr	r3, [sp, #16]
 8000f20:	eba0 000a 	sub.w	r0, r0, sl
 8000f24:	2240      	movs	r2, #64	@ 0x40
 8000f26:	4082      	lsls	r2, r0
 8000f28:	4313      	orrs	r3, r2
 8000f2a:	3401      	adds	r4, #1
 8000f2c:	9304      	str	r3, [sp, #16]
 8000f2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f32:	4829      	ldr	r0, [pc, #164]	@ (8000fd8 <_vfiprintf_r+0x220>)
 8000f34:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000f38:	2206      	movs	r2, #6
 8000f3a:	f7ff f949 	bl	80001d0 <memchr>
 8000f3e:	2800      	cmp	r0, #0
 8000f40:	d03f      	beq.n	8000fc2 <_vfiprintf_r+0x20a>
 8000f42:	4b26      	ldr	r3, [pc, #152]	@ (8000fdc <_vfiprintf_r+0x224>)
 8000f44:	bb1b      	cbnz	r3, 8000f8e <_vfiprintf_r+0x1d6>
 8000f46:	9b03      	ldr	r3, [sp, #12]
 8000f48:	3307      	adds	r3, #7
 8000f4a:	f023 0307 	bic.w	r3, r3, #7
 8000f4e:	3308      	adds	r3, #8
 8000f50:	9303      	str	r3, [sp, #12]
 8000f52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000f54:	443b      	add	r3, r7
 8000f56:	9309      	str	r3, [sp, #36]	@ 0x24
 8000f58:	e76a      	b.n	8000e30 <_vfiprintf_r+0x78>
 8000f5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8000f5e:	460c      	mov	r4, r1
 8000f60:	2001      	movs	r0, #1
 8000f62:	e7a8      	b.n	8000eb6 <_vfiprintf_r+0xfe>
 8000f64:	2300      	movs	r3, #0
 8000f66:	3401      	adds	r4, #1
 8000f68:	9305      	str	r3, [sp, #20]
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	f04f 0c0a 	mov.w	ip, #10
 8000f70:	4620      	mov	r0, r4
 8000f72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000f76:	3a30      	subs	r2, #48	@ 0x30
 8000f78:	2a09      	cmp	r2, #9
 8000f7a:	d903      	bls.n	8000f84 <_vfiprintf_r+0x1cc>
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d0c6      	beq.n	8000f0e <_vfiprintf_r+0x156>
 8000f80:	9105      	str	r1, [sp, #20]
 8000f82:	e7c4      	b.n	8000f0e <_vfiprintf_r+0x156>
 8000f84:	fb0c 2101 	mla	r1, ip, r1, r2
 8000f88:	4604      	mov	r4, r0
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e7f0      	b.n	8000f70 <_vfiprintf_r+0x1b8>
 8000f8e:	ab03      	add	r3, sp, #12
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	462a      	mov	r2, r5
 8000f94:	4b12      	ldr	r3, [pc, #72]	@ (8000fe0 <_vfiprintf_r+0x228>)
 8000f96:	a904      	add	r1, sp, #16
 8000f98:	4630      	mov	r0, r6
 8000f9a:	f3af 8000 	nop.w
 8000f9e:	4607      	mov	r7, r0
 8000fa0:	1c78      	adds	r0, r7, #1
 8000fa2:	d1d6      	bne.n	8000f52 <_vfiprintf_r+0x19a>
 8000fa4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000fa6:	07d9      	lsls	r1, r3, #31
 8000fa8:	d405      	bmi.n	8000fb6 <_vfiprintf_r+0x1fe>
 8000faa:	89ab      	ldrh	r3, [r5, #12]
 8000fac:	059a      	lsls	r2, r3, #22
 8000fae:	d402      	bmi.n	8000fb6 <_vfiprintf_r+0x1fe>
 8000fb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000fb2:	f7ff fddd 	bl	8000b70 <__retarget_lock_release_recursive>
 8000fb6:	89ab      	ldrh	r3, [r5, #12]
 8000fb8:	065b      	lsls	r3, r3, #25
 8000fba:	f53f af1f 	bmi.w	8000dfc <_vfiprintf_r+0x44>
 8000fbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000fc0:	e71e      	b.n	8000e00 <_vfiprintf_r+0x48>
 8000fc2:	ab03      	add	r3, sp, #12
 8000fc4:	9300      	str	r3, [sp, #0]
 8000fc6:	462a      	mov	r2, r5
 8000fc8:	4b05      	ldr	r3, [pc, #20]	@ (8000fe0 <_vfiprintf_r+0x228>)
 8000fca:	a904      	add	r1, sp, #16
 8000fcc:	4630      	mov	r0, r6
 8000fce:	f000 f879 	bl	80010c4 <_printf_i>
 8000fd2:	e7e4      	b.n	8000f9e <_vfiprintf_r+0x1e6>
 8000fd4:	080016cd 	.word	0x080016cd
 8000fd8:	080016d7 	.word	0x080016d7
 8000fdc:	00000000 	.word	0x00000000
 8000fe0:	08000d93 	.word	0x08000d93
 8000fe4:	080016d3 	.word	0x080016d3

08000fe8 <_printf_common>:
 8000fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fec:	4616      	mov	r6, r2
 8000fee:	4698      	mov	r8, r3
 8000ff0:	688a      	ldr	r2, [r1, #8]
 8000ff2:	690b      	ldr	r3, [r1, #16]
 8000ff4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	bfb8      	it	lt
 8000ffc:	4613      	movlt	r3, r2
 8000ffe:	6033      	str	r3, [r6, #0]
 8001000:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001004:	4607      	mov	r7, r0
 8001006:	460c      	mov	r4, r1
 8001008:	b10a      	cbz	r2, 800100e <_printf_common+0x26>
 800100a:	3301      	adds	r3, #1
 800100c:	6033      	str	r3, [r6, #0]
 800100e:	6823      	ldr	r3, [r4, #0]
 8001010:	0699      	lsls	r1, r3, #26
 8001012:	bf42      	ittt	mi
 8001014:	6833      	ldrmi	r3, [r6, #0]
 8001016:	3302      	addmi	r3, #2
 8001018:	6033      	strmi	r3, [r6, #0]
 800101a:	6825      	ldr	r5, [r4, #0]
 800101c:	f015 0506 	ands.w	r5, r5, #6
 8001020:	d106      	bne.n	8001030 <_printf_common+0x48>
 8001022:	f104 0a19 	add.w	sl, r4, #25
 8001026:	68e3      	ldr	r3, [r4, #12]
 8001028:	6832      	ldr	r2, [r6, #0]
 800102a:	1a9b      	subs	r3, r3, r2
 800102c:	42ab      	cmp	r3, r5
 800102e:	dc26      	bgt.n	800107e <_printf_common+0x96>
 8001030:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001034:	6822      	ldr	r2, [r4, #0]
 8001036:	3b00      	subs	r3, #0
 8001038:	bf18      	it	ne
 800103a:	2301      	movne	r3, #1
 800103c:	0692      	lsls	r2, r2, #26
 800103e:	d42b      	bmi.n	8001098 <_printf_common+0xb0>
 8001040:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001044:	4641      	mov	r1, r8
 8001046:	4638      	mov	r0, r7
 8001048:	47c8      	blx	r9
 800104a:	3001      	adds	r0, #1
 800104c:	d01e      	beq.n	800108c <_printf_common+0xa4>
 800104e:	6823      	ldr	r3, [r4, #0]
 8001050:	6922      	ldr	r2, [r4, #16]
 8001052:	f003 0306 	and.w	r3, r3, #6
 8001056:	2b04      	cmp	r3, #4
 8001058:	bf02      	ittt	eq
 800105a:	68e5      	ldreq	r5, [r4, #12]
 800105c:	6833      	ldreq	r3, [r6, #0]
 800105e:	1aed      	subeq	r5, r5, r3
 8001060:	68a3      	ldr	r3, [r4, #8]
 8001062:	bf0c      	ite	eq
 8001064:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001068:	2500      	movne	r5, #0
 800106a:	4293      	cmp	r3, r2
 800106c:	bfc4      	itt	gt
 800106e:	1a9b      	subgt	r3, r3, r2
 8001070:	18ed      	addgt	r5, r5, r3
 8001072:	2600      	movs	r6, #0
 8001074:	341a      	adds	r4, #26
 8001076:	42b5      	cmp	r5, r6
 8001078:	d11a      	bne.n	80010b0 <_printf_common+0xc8>
 800107a:	2000      	movs	r0, #0
 800107c:	e008      	b.n	8001090 <_printf_common+0xa8>
 800107e:	2301      	movs	r3, #1
 8001080:	4652      	mov	r2, sl
 8001082:	4641      	mov	r1, r8
 8001084:	4638      	mov	r0, r7
 8001086:	47c8      	blx	r9
 8001088:	3001      	adds	r0, #1
 800108a:	d103      	bne.n	8001094 <_printf_common+0xac>
 800108c:	f04f 30ff 	mov.w	r0, #4294967295
 8001090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001094:	3501      	adds	r5, #1
 8001096:	e7c6      	b.n	8001026 <_printf_common+0x3e>
 8001098:	18e1      	adds	r1, r4, r3
 800109a:	1c5a      	adds	r2, r3, #1
 800109c:	2030      	movs	r0, #48	@ 0x30
 800109e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80010a2:	4422      	add	r2, r4
 80010a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80010a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80010ac:	3302      	adds	r3, #2
 80010ae:	e7c7      	b.n	8001040 <_printf_common+0x58>
 80010b0:	2301      	movs	r3, #1
 80010b2:	4622      	mov	r2, r4
 80010b4:	4641      	mov	r1, r8
 80010b6:	4638      	mov	r0, r7
 80010b8:	47c8      	blx	r9
 80010ba:	3001      	adds	r0, #1
 80010bc:	d0e6      	beq.n	800108c <_printf_common+0xa4>
 80010be:	3601      	adds	r6, #1
 80010c0:	e7d9      	b.n	8001076 <_printf_common+0x8e>
	...

080010c4 <_printf_i>:
 80010c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80010c8:	7e0f      	ldrb	r7, [r1, #24]
 80010ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80010cc:	2f78      	cmp	r7, #120	@ 0x78
 80010ce:	4691      	mov	r9, r2
 80010d0:	4680      	mov	r8, r0
 80010d2:	460c      	mov	r4, r1
 80010d4:	469a      	mov	sl, r3
 80010d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80010da:	d807      	bhi.n	80010ec <_printf_i+0x28>
 80010dc:	2f62      	cmp	r7, #98	@ 0x62
 80010de:	d80a      	bhi.n	80010f6 <_printf_i+0x32>
 80010e0:	2f00      	cmp	r7, #0
 80010e2:	f000 80d1 	beq.w	8001288 <_printf_i+0x1c4>
 80010e6:	2f58      	cmp	r7, #88	@ 0x58
 80010e8:	f000 80b8 	beq.w	800125c <_printf_i+0x198>
 80010ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80010f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80010f4:	e03a      	b.n	800116c <_printf_i+0xa8>
 80010f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80010fa:	2b15      	cmp	r3, #21
 80010fc:	d8f6      	bhi.n	80010ec <_printf_i+0x28>
 80010fe:	a101      	add	r1, pc, #4	@ (adr r1, 8001104 <_printf_i+0x40>)
 8001100:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001104:	0800115d 	.word	0x0800115d
 8001108:	08001171 	.word	0x08001171
 800110c:	080010ed 	.word	0x080010ed
 8001110:	080010ed 	.word	0x080010ed
 8001114:	080010ed 	.word	0x080010ed
 8001118:	080010ed 	.word	0x080010ed
 800111c:	08001171 	.word	0x08001171
 8001120:	080010ed 	.word	0x080010ed
 8001124:	080010ed 	.word	0x080010ed
 8001128:	080010ed 	.word	0x080010ed
 800112c:	080010ed 	.word	0x080010ed
 8001130:	0800126f 	.word	0x0800126f
 8001134:	0800119b 	.word	0x0800119b
 8001138:	08001229 	.word	0x08001229
 800113c:	080010ed 	.word	0x080010ed
 8001140:	080010ed 	.word	0x080010ed
 8001144:	08001291 	.word	0x08001291
 8001148:	080010ed 	.word	0x080010ed
 800114c:	0800119b 	.word	0x0800119b
 8001150:	080010ed 	.word	0x080010ed
 8001154:	080010ed 	.word	0x080010ed
 8001158:	08001231 	.word	0x08001231
 800115c:	6833      	ldr	r3, [r6, #0]
 800115e:	1d1a      	adds	r2, r3, #4
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	6032      	str	r2, [r6, #0]
 8001164:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8001168:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800116c:	2301      	movs	r3, #1
 800116e:	e09c      	b.n	80012aa <_printf_i+0x1e6>
 8001170:	6833      	ldr	r3, [r6, #0]
 8001172:	6820      	ldr	r0, [r4, #0]
 8001174:	1d19      	adds	r1, r3, #4
 8001176:	6031      	str	r1, [r6, #0]
 8001178:	0606      	lsls	r6, r0, #24
 800117a:	d501      	bpl.n	8001180 <_printf_i+0xbc>
 800117c:	681d      	ldr	r5, [r3, #0]
 800117e:	e003      	b.n	8001188 <_printf_i+0xc4>
 8001180:	0645      	lsls	r5, r0, #25
 8001182:	d5fb      	bpl.n	800117c <_printf_i+0xb8>
 8001184:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001188:	2d00      	cmp	r5, #0
 800118a:	da03      	bge.n	8001194 <_printf_i+0xd0>
 800118c:	232d      	movs	r3, #45	@ 0x2d
 800118e:	426d      	negs	r5, r5
 8001190:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8001194:	4858      	ldr	r0, [pc, #352]	@ (80012f8 <_printf_i+0x234>)
 8001196:	230a      	movs	r3, #10
 8001198:	e011      	b.n	80011be <_printf_i+0xfa>
 800119a:	6821      	ldr	r1, [r4, #0]
 800119c:	6833      	ldr	r3, [r6, #0]
 800119e:	0608      	lsls	r0, r1, #24
 80011a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80011a4:	d402      	bmi.n	80011ac <_printf_i+0xe8>
 80011a6:	0649      	lsls	r1, r1, #25
 80011a8:	bf48      	it	mi
 80011aa:	b2ad      	uxthmi	r5, r5
 80011ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80011ae:	4852      	ldr	r0, [pc, #328]	@ (80012f8 <_printf_i+0x234>)
 80011b0:	6033      	str	r3, [r6, #0]
 80011b2:	bf14      	ite	ne
 80011b4:	230a      	movne	r3, #10
 80011b6:	2308      	moveq	r3, #8
 80011b8:	2100      	movs	r1, #0
 80011ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80011be:	6866      	ldr	r6, [r4, #4]
 80011c0:	60a6      	str	r6, [r4, #8]
 80011c2:	2e00      	cmp	r6, #0
 80011c4:	db05      	blt.n	80011d2 <_printf_i+0x10e>
 80011c6:	6821      	ldr	r1, [r4, #0]
 80011c8:	432e      	orrs	r6, r5
 80011ca:	f021 0104 	bic.w	r1, r1, #4
 80011ce:	6021      	str	r1, [r4, #0]
 80011d0:	d04b      	beq.n	800126a <_printf_i+0x1a6>
 80011d2:	4616      	mov	r6, r2
 80011d4:	fbb5 f1f3 	udiv	r1, r5, r3
 80011d8:	fb03 5711 	mls	r7, r3, r1, r5
 80011dc:	5dc7      	ldrb	r7, [r0, r7]
 80011de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80011e2:	462f      	mov	r7, r5
 80011e4:	42bb      	cmp	r3, r7
 80011e6:	460d      	mov	r5, r1
 80011e8:	d9f4      	bls.n	80011d4 <_printf_i+0x110>
 80011ea:	2b08      	cmp	r3, #8
 80011ec:	d10b      	bne.n	8001206 <_printf_i+0x142>
 80011ee:	6823      	ldr	r3, [r4, #0]
 80011f0:	07df      	lsls	r7, r3, #31
 80011f2:	d508      	bpl.n	8001206 <_printf_i+0x142>
 80011f4:	6923      	ldr	r3, [r4, #16]
 80011f6:	6861      	ldr	r1, [r4, #4]
 80011f8:	4299      	cmp	r1, r3
 80011fa:	bfde      	ittt	le
 80011fc:	2330      	movle	r3, #48	@ 0x30
 80011fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8001202:	f106 36ff 	addle.w	r6, r6, #4294967295
 8001206:	1b92      	subs	r2, r2, r6
 8001208:	6122      	str	r2, [r4, #16]
 800120a:	f8cd a000 	str.w	sl, [sp]
 800120e:	464b      	mov	r3, r9
 8001210:	aa03      	add	r2, sp, #12
 8001212:	4621      	mov	r1, r4
 8001214:	4640      	mov	r0, r8
 8001216:	f7ff fee7 	bl	8000fe8 <_printf_common>
 800121a:	3001      	adds	r0, #1
 800121c:	d14a      	bne.n	80012b4 <_printf_i+0x1f0>
 800121e:	f04f 30ff 	mov.w	r0, #4294967295
 8001222:	b004      	add	sp, #16
 8001224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001228:	6823      	ldr	r3, [r4, #0]
 800122a:	f043 0320 	orr.w	r3, r3, #32
 800122e:	6023      	str	r3, [r4, #0]
 8001230:	4832      	ldr	r0, [pc, #200]	@ (80012fc <_printf_i+0x238>)
 8001232:	2778      	movs	r7, #120	@ 0x78
 8001234:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8001238:	6823      	ldr	r3, [r4, #0]
 800123a:	6831      	ldr	r1, [r6, #0]
 800123c:	061f      	lsls	r7, r3, #24
 800123e:	f851 5b04 	ldr.w	r5, [r1], #4
 8001242:	d402      	bmi.n	800124a <_printf_i+0x186>
 8001244:	065f      	lsls	r7, r3, #25
 8001246:	bf48      	it	mi
 8001248:	b2ad      	uxthmi	r5, r5
 800124a:	6031      	str	r1, [r6, #0]
 800124c:	07d9      	lsls	r1, r3, #31
 800124e:	bf44      	itt	mi
 8001250:	f043 0320 	orrmi.w	r3, r3, #32
 8001254:	6023      	strmi	r3, [r4, #0]
 8001256:	b11d      	cbz	r5, 8001260 <_printf_i+0x19c>
 8001258:	2310      	movs	r3, #16
 800125a:	e7ad      	b.n	80011b8 <_printf_i+0xf4>
 800125c:	4826      	ldr	r0, [pc, #152]	@ (80012f8 <_printf_i+0x234>)
 800125e:	e7e9      	b.n	8001234 <_printf_i+0x170>
 8001260:	6823      	ldr	r3, [r4, #0]
 8001262:	f023 0320 	bic.w	r3, r3, #32
 8001266:	6023      	str	r3, [r4, #0]
 8001268:	e7f6      	b.n	8001258 <_printf_i+0x194>
 800126a:	4616      	mov	r6, r2
 800126c:	e7bd      	b.n	80011ea <_printf_i+0x126>
 800126e:	6833      	ldr	r3, [r6, #0]
 8001270:	6825      	ldr	r5, [r4, #0]
 8001272:	6961      	ldr	r1, [r4, #20]
 8001274:	1d18      	adds	r0, r3, #4
 8001276:	6030      	str	r0, [r6, #0]
 8001278:	062e      	lsls	r6, r5, #24
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	d501      	bpl.n	8001282 <_printf_i+0x1be>
 800127e:	6019      	str	r1, [r3, #0]
 8001280:	e002      	b.n	8001288 <_printf_i+0x1c4>
 8001282:	0668      	lsls	r0, r5, #25
 8001284:	d5fb      	bpl.n	800127e <_printf_i+0x1ba>
 8001286:	8019      	strh	r1, [r3, #0]
 8001288:	2300      	movs	r3, #0
 800128a:	6123      	str	r3, [r4, #16]
 800128c:	4616      	mov	r6, r2
 800128e:	e7bc      	b.n	800120a <_printf_i+0x146>
 8001290:	6833      	ldr	r3, [r6, #0]
 8001292:	1d1a      	adds	r2, r3, #4
 8001294:	6032      	str	r2, [r6, #0]
 8001296:	681e      	ldr	r6, [r3, #0]
 8001298:	6862      	ldr	r2, [r4, #4]
 800129a:	2100      	movs	r1, #0
 800129c:	4630      	mov	r0, r6
 800129e:	f7fe ff97 	bl	80001d0 <memchr>
 80012a2:	b108      	cbz	r0, 80012a8 <_printf_i+0x1e4>
 80012a4:	1b80      	subs	r0, r0, r6
 80012a6:	6060      	str	r0, [r4, #4]
 80012a8:	6863      	ldr	r3, [r4, #4]
 80012aa:	6123      	str	r3, [r4, #16]
 80012ac:	2300      	movs	r3, #0
 80012ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80012b2:	e7aa      	b.n	800120a <_printf_i+0x146>
 80012b4:	6923      	ldr	r3, [r4, #16]
 80012b6:	4632      	mov	r2, r6
 80012b8:	4649      	mov	r1, r9
 80012ba:	4640      	mov	r0, r8
 80012bc:	47d0      	blx	sl
 80012be:	3001      	adds	r0, #1
 80012c0:	d0ad      	beq.n	800121e <_printf_i+0x15a>
 80012c2:	6823      	ldr	r3, [r4, #0]
 80012c4:	079b      	lsls	r3, r3, #30
 80012c6:	d413      	bmi.n	80012f0 <_printf_i+0x22c>
 80012c8:	68e0      	ldr	r0, [r4, #12]
 80012ca:	9b03      	ldr	r3, [sp, #12]
 80012cc:	4298      	cmp	r0, r3
 80012ce:	bfb8      	it	lt
 80012d0:	4618      	movlt	r0, r3
 80012d2:	e7a6      	b.n	8001222 <_printf_i+0x15e>
 80012d4:	2301      	movs	r3, #1
 80012d6:	4632      	mov	r2, r6
 80012d8:	4649      	mov	r1, r9
 80012da:	4640      	mov	r0, r8
 80012dc:	47d0      	blx	sl
 80012de:	3001      	adds	r0, #1
 80012e0:	d09d      	beq.n	800121e <_printf_i+0x15a>
 80012e2:	3501      	adds	r5, #1
 80012e4:	68e3      	ldr	r3, [r4, #12]
 80012e6:	9903      	ldr	r1, [sp, #12]
 80012e8:	1a5b      	subs	r3, r3, r1
 80012ea:	42ab      	cmp	r3, r5
 80012ec:	dcf2      	bgt.n	80012d4 <_printf_i+0x210>
 80012ee:	e7eb      	b.n	80012c8 <_printf_i+0x204>
 80012f0:	2500      	movs	r5, #0
 80012f2:	f104 0619 	add.w	r6, r4, #25
 80012f6:	e7f5      	b.n	80012e4 <_printf_i+0x220>
 80012f8:	080016de 	.word	0x080016de
 80012fc:	080016ef 	.word	0x080016ef

08001300 <__sflush_r>:
 8001300:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001308:	0716      	lsls	r6, r2, #28
 800130a:	4605      	mov	r5, r0
 800130c:	460c      	mov	r4, r1
 800130e:	d454      	bmi.n	80013ba <__sflush_r+0xba>
 8001310:	684b      	ldr	r3, [r1, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	dc02      	bgt.n	800131c <__sflush_r+0x1c>
 8001316:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001318:	2b00      	cmp	r3, #0
 800131a:	dd48      	ble.n	80013ae <__sflush_r+0xae>
 800131c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800131e:	2e00      	cmp	r6, #0
 8001320:	d045      	beq.n	80013ae <__sflush_r+0xae>
 8001322:	2300      	movs	r3, #0
 8001324:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001328:	682f      	ldr	r7, [r5, #0]
 800132a:	6a21      	ldr	r1, [r4, #32]
 800132c:	602b      	str	r3, [r5, #0]
 800132e:	d030      	beq.n	8001392 <__sflush_r+0x92>
 8001330:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001332:	89a3      	ldrh	r3, [r4, #12]
 8001334:	0759      	lsls	r1, r3, #29
 8001336:	d505      	bpl.n	8001344 <__sflush_r+0x44>
 8001338:	6863      	ldr	r3, [r4, #4]
 800133a:	1ad2      	subs	r2, r2, r3
 800133c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800133e:	b10b      	cbz	r3, 8001344 <__sflush_r+0x44>
 8001340:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001342:	1ad2      	subs	r2, r2, r3
 8001344:	2300      	movs	r3, #0
 8001346:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001348:	6a21      	ldr	r1, [r4, #32]
 800134a:	4628      	mov	r0, r5
 800134c:	47b0      	blx	r6
 800134e:	1c43      	adds	r3, r0, #1
 8001350:	89a3      	ldrh	r3, [r4, #12]
 8001352:	d106      	bne.n	8001362 <__sflush_r+0x62>
 8001354:	6829      	ldr	r1, [r5, #0]
 8001356:	291d      	cmp	r1, #29
 8001358:	d82b      	bhi.n	80013b2 <__sflush_r+0xb2>
 800135a:	4a2a      	ldr	r2, [pc, #168]	@ (8001404 <__sflush_r+0x104>)
 800135c:	40ca      	lsrs	r2, r1
 800135e:	07d6      	lsls	r6, r2, #31
 8001360:	d527      	bpl.n	80013b2 <__sflush_r+0xb2>
 8001362:	2200      	movs	r2, #0
 8001364:	6062      	str	r2, [r4, #4]
 8001366:	04d9      	lsls	r1, r3, #19
 8001368:	6922      	ldr	r2, [r4, #16]
 800136a:	6022      	str	r2, [r4, #0]
 800136c:	d504      	bpl.n	8001378 <__sflush_r+0x78>
 800136e:	1c42      	adds	r2, r0, #1
 8001370:	d101      	bne.n	8001376 <__sflush_r+0x76>
 8001372:	682b      	ldr	r3, [r5, #0]
 8001374:	b903      	cbnz	r3, 8001378 <__sflush_r+0x78>
 8001376:	6560      	str	r0, [r4, #84]	@ 0x54
 8001378:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800137a:	602f      	str	r7, [r5, #0]
 800137c:	b1b9      	cbz	r1, 80013ae <__sflush_r+0xae>
 800137e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001382:	4299      	cmp	r1, r3
 8001384:	d002      	beq.n	800138c <__sflush_r+0x8c>
 8001386:	4628      	mov	r0, r5
 8001388:	f7ff fbf4 	bl	8000b74 <_free_r>
 800138c:	2300      	movs	r3, #0
 800138e:	6363      	str	r3, [r4, #52]	@ 0x34
 8001390:	e00d      	b.n	80013ae <__sflush_r+0xae>
 8001392:	2301      	movs	r3, #1
 8001394:	4628      	mov	r0, r5
 8001396:	47b0      	blx	r6
 8001398:	4602      	mov	r2, r0
 800139a:	1c50      	adds	r0, r2, #1
 800139c:	d1c9      	bne.n	8001332 <__sflush_r+0x32>
 800139e:	682b      	ldr	r3, [r5, #0]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d0c6      	beq.n	8001332 <__sflush_r+0x32>
 80013a4:	2b1d      	cmp	r3, #29
 80013a6:	d001      	beq.n	80013ac <__sflush_r+0xac>
 80013a8:	2b16      	cmp	r3, #22
 80013aa:	d11e      	bne.n	80013ea <__sflush_r+0xea>
 80013ac:	602f      	str	r7, [r5, #0]
 80013ae:	2000      	movs	r0, #0
 80013b0:	e022      	b.n	80013f8 <__sflush_r+0xf8>
 80013b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013b6:	b21b      	sxth	r3, r3
 80013b8:	e01b      	b.n	80013f2 <__sflush_r+0xf2>
 80013ba:	690f      	ldr	r7, [r1, #16]
 80013bc:	2f00      	cmp	r7, #0
 80013be:	d0f6      	beq.n	80013ae <__sflush_r+0xae>
 80013c0:	0793      	lsls	r3, r2, #30
 80013c2:	680e      	ldr	r6, [r1, #0]
 80013c4:	bf08      	it	eq
 80013c6:	694b      	ldreq	r3, [r1, #20]
 80013c8:	600f      	str	r7, [r1, #0]
 80013ca:	bf18      	it	ne
 80013cc:	2300      	movne	r3, #0
 80013ce:	eba6 0807 	sub.w	r8, r6, r7
 80013d2:	608b      	str	r3, [r1, #8]
 80013d4:	f1b8 0f00 	cmp.w	r8, #0
 80013d8:	dde9      	ble.n	80013ae <__sflush_r+0xae>
 80013da:	6a21      	ldr	r1, [r4, #32]
 80013dc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80013de:	4643      	mov	r3, r8
 80013e0:	463a      	mov	r2, r7
 80013e2:	4628      	mov	r0, r5
 80013e4:	47b0      	blx	r6
 80013e6:	2800      	cmp	r0, #0
 80013e8:	dc08      	bgt.n	80013fc <__sflush_r+0xfc>
 80013ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80013f2:	81a3      	strh	r3, [r4, #12]
 80013f4:	f04f 30ff 	mov.w	r0, #4294967295
 80013f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013fc:	4407      	add	r7, r0
 80013fe:	eba8 0800 	sub.w	r8, r8, r0
 8001402:	e7e7      	b.n	80013d4 <__sflush_r+0xd4>
 8001404:	20400001 	.word	0x20400001

08001408 <_fflush_r>:
 8001408:	b538      	push	{r3, r4, r5, lr}
 800140a:	690b      	ldr	r3, [r1, #16]
 800140c:	4605      	mov	r5, r0
 800140e:	460c      	mov	r4, r1
 8001410:	b913      	cbnz	r3, 8001418 <_fflush_r+0x10>
 8001412:	2500      	movs	r5, #0
 8001414:	4628      	mov	r0, r5
 8001416:	bd38      	pop	{r3, r4, r5, pc}
 8001418:	b118      	cbz	r0, 8001422 <_fflush_r+0x1a>
 800141a:	6a03      	ldr	r3, [r0, #32]
 800141c:	b90b      	cbnz	r3, 8001422 <_fflush_r+0x1a>
 800141e:	f7ff faa1 	bl	8000964 <__sinit>
 8001422:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d0f3      	beq.n	8001412 <_fflush_r+0xa>
 800142a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800142c:	07d0      	lsls	r0, r2, #31
 800142e:	d404      	bmi.n	800143a <_fflush_r+0x32>
 8001430:	0599      	lsls	r1, r3, #22
 8001432:	d402      	bmi.n	800143a <_fflush_r+0x32>
 8001434:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001436:	f7ff fb9a 	bl	8000b6e <__retarget_lock_acquire_recursive>
 800143a:	4628      	mov	r0, r5
 800143c:	4621      	mov	r1, r4
 800143e:	f7ff ff5f 	bl	8001300 <__sflush_r>
 8001442:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001444:	07da      	lsls	r2, r3, #31
 8001446:	4605      	mov	r5, r0
 8001448:	d4e4      	bmi.n	8001414 <_fflush_r+0xc>
 800144a:	89a3      	ldrh	r3, [r4, #12]
 800144c:	059b      	lsls	r3, r3, #22
 800144e:	d4e1      	bmi.n	8001414 <_fflush_r+0xc>
 8001450:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001452:	f7ff fb8d 	bl	8000b70 <__retarget_lock_release_recursive>
 8001456:	e7dd      	b.n	8001414 <_fflush_r+0xc>

08001458 <__swbuf_r>:
 8001458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800145a:	460e      	mov	r6, r1
 800145c:	4614      	mov	r4, r2
 800145e:	4605      	mov	r5, r0
 8001460:	b118      	cbz	r0, 800146a <__swbuf_r+0x12>
 8001462:	6a03      	ldr	r3, [r0, #32]
 8001464:	b90b      	cbnz	r3, 800146a <__swbuf_r+0x12>
 8001466:	f7ff fa7d 	bl	8000964 <__sinit>
 800146a:	69a3      	ldr	r3, [r4, #24]
 800146c:	60a3      	str	r3, [r4, #8]
 800146e:	89a3      	ldrh	r3, [r4, #12]
 8001470:	071a      	lsls	r2, r3, #28
 8001472:	d501      	bpl.n	8001478 <__swbuf_r+0x20>
 8001474:	6923      	ldr	r3, [r4, #16]
 8001476:	b943      	cbnz	r3, 800148a <__swbuf_r+0x32>
 8001478:	4621      	mov	r1, r4
 800147a:	4628      	mov	r0, r5
 800147c:	f000 f82a 	bl	80014d4 <__swsetup_r>
 8001480:	b118      	cbz	r0, 800148a <__swbuf_r+0x32>
 8001482:	f04f 37ff 	mov.w	r7, #4294967295
 8001486:	4638      	mov	r0, r7
 8001488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800148a:	6823      	ldr	r3, [r4, #0]
 800148c:	6922      	ldr	r2, [r4, #16]
 800148e:	1a98      	subs	r0, r3, r2
 8001490:	6963      	ldr	r3, [r4, #20]
 8001492:	b2f6      	uxtb	r6, r6
 8001494:	4283      	cmp	r3, r0
 8001496:	4637      	mov	r7, r6
 8001498:	dc05      	bgt.n	80014a6 <__swbuf_r+0x4e>
 800149a:	4621      	mov	r1, r4
 800149c:	4628      	mov	r0, r5
 800149e:	f7ff ffb3 	bl	8001408 <_fflush_r>
 80014a2:	2800      	cmp	r0, #0
 80014a4:	d1ed      	bne.n	8001482 <__swbuf_r+0x2a>
 80014a6:	68a3      	ldr	r3, [r4, #8]
 80014a8:	3b01      	subs	r3, #1
 80014aa:	60a3      	str	r3, [r4, #8]
 80014ac:	6823      	ldr	r3, [r4, #0]
 80014ae:	1c5a      	adds	r2, r3, #1
 80014b0:	6022      	str	r2, [r4, #0]
 80014b2:	701e      	strb	r6, [r3, #0]
 80014b4:	6962      	ldr	r2, [r4, #20]
 80014b6:	1c43      	adds	r3, r0, #1
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d004      	beq.n	80014c6 <__swbuf_r+0x6e>
 80014bc:	89a3      	ldrh	r3, [r4, #12]
 80014be:	07db      	lsls	r3, r3, #31
 80014c0:	d5e1      	bpl.n	8001486 <__swbuf_r+0x2e>
 80014c2:	2e0a      	cmp	r6, #10
 80014c4:	d1df      	bne.n	8001486 <__swbuf_r+0x2e>
 80014c6:	4621      	mov	r1, r4
 80014c8:	4628      	mov	r0, r5
 80014ca:	f7ff ff9d 	bl	8001408 <_fflush_r>
 80014ce:	2800      	cmp	r0, #0
 80014d0:	d0d9      	beq.n	8001486 <__swbuf_r+0x2e>
 80014d2:	e7d6      	b.n	8001482 <__swbuf_r+0x2a>

080014d4 <__swsetup_r>:
 80014d4:	b538      	push	{r3, r4, r5, lr}
 80014d6:	4b29      	ldr	r3, [pc, #164]	@ (800157c <__swsetup_r+0xa8>)
 80014d8:	4605      	mov	r5, r0
 80014da:	6818      	ldr	r0, [r3, #0]
 80014dc:	460c      	mov	r4, r1
 80014de:	b118      	cbz	r0, 80014e8 <__swsetup_r+0x14>
 80014e0:	6a03      	ldr	r3, [r0, #32]
 80014e2:	b90b      	cbnz	r3, 80014e8 <__swsetup_r+0x14>
 80014e4:	f7ff fa3e 	bl	8000964 <__sinit>
 80014e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014ec:	0719      	lsls	r1, r3, #28
 80014ee:	d422      	bmi.n	8001536 <__swsetup_r+0x62>
 80014f0:	06da      	lsls	r2, r3, #27
 80014f2:	d407      	bmi.n	8001504 <__swsetup_r+0x30>
 80014f4:	2209      	movs	r2, #9
 80014f6:	602a      	str	r2, [r5, #0]
 80014f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80014fc:	81a3      	strh	r3, [r4, #12]
 80014fe:	f04f 30ff 	mov.w	r0, #4294967295
 8001502:	e033      	b.n	800156c <__swsetup_r+0x98>
 8001504:	0758      	lsls	r0, r3, #29
 8001506:	d512      	bpl.n	800152e <__swsetup_r+0x5a>
 8001508:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800150a:	b141      	cbz	r1, 800151e <__swsetup_r+0x4a>
 800150c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001510:	4299      	cmp	r1, r3
 8001512:	d002      	beq.n	800151a <__swsetup_r+0x46>
 8001514:	4628      	mov	r0, r5
 8001516:	f7ff fb2d 	bl	8000b74 <_free_r>
 800151a:	2300      	movs	r3, #0
 800151c:	6363      	str	r3, [r4, #52]	@ 0x34
 800151e:	89a3      	ldrh	r3, [r4, #12]
 8001520:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001524:	81a3      	strh	r3, [r4, #12]
 8001526:	2300      	movs	r3, #0
 8001528:	6063      	str	r3, [r4, #4]
 800152a:	6923      	ldr	r3, [r4, #16]
 800152c:	6023      	str	r3, [r4, #0]
 800152e:	89a3      	ldrh	r3, [r4, #12]
 8001530:	f043 0308 	orr.w	r3, r3, #8
 8001534:	81a3      	strh	r3, [r4, #12]
 8001536:	6923      	ldr	r3, [r4, #16]
 8001538:	b94b      	cbnz	r3, 800154e <__swsetup_r+0x7a>
 800153a:	89a3      	ldrh	r3, [r4, #12]
 800153c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001540:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001544:	d003      	beq.n	800154e <__swsetup_r+0x7a>
 8001546:	4621      	mov	r1, r4
 8001548:	4628      	mov	r0, r5
 800154a:	f000 f84f 	bl	80015ec <__smakebuf_r>
 800154e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001552:	f013 0201 	ands.w	r2, r3, #1
 8001556:	d00a      	beq.n	800156e <__swsetup_r+0x9a>
 8001558:	2200      	movs	r2, #0
 800155a:	60a2      	str	r2, [r4, #8]
 800155c:	6962      	ldr	r2, [r4, #20]
 800155e:	4252      	negs	r2, r2
 8001560:	61a2      	str	r2, [r4, #24]
 8001562:	6922      	ldr	r2, [r4, #16]
 8001564:	b942      	cbnz	r2, 8001578 <__swsetup_r+0xa4>
 8001566:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800156a:	d1c5      	bne.n	80014f8 <__swsetup_r+0x24>
 800156c:	bd38      	pop	{r3, r4, r5, pc}
 800156e:	0799      	lsls	r1, r3, #30
 8001570:	bf58      	it	pl
 8001572:	6962      	ldrpl	r2, [r4, #20]
 8001574:	60a2      	str	r2, [r4, #8]
 8001576:	e7f4      	b.n	8001562 <__swsetup_r+0x8e>
 8001578:	2000      	movs	r0, #0
 800157a:	e7f7      	b.n	800156c <__swsetup_r+0x98>
 800157c:	2000000c 	.word	0x2000000c

08001580 <_sbrk_r>:
 8001580:	b538      	push	{r3, r4, r5, lr}
 8001582:	4d06      	ldr	r5, [pc, #24]	@ (800159c <_sbrk_r+0x1c>)
 8001584:	2300      	movs	r3, #0
 8001586:	4604      	mov	r4, r0
 8001588:	4608      	mov	r0, r1
 800158a:	602b      	str	r3, [r5, #0]
 800158c:	f7fe ffe8 	bl	8000560 <_sbrk>
 8001590:	1c43      	adds	r3, r0, #1
 8001592:	d102      	bne.n	800159a <_sbrk_r+0x1a>
 8001594:	682b      	ldr	r3, [r5, #0]
 8001596:	b103      	cbz	r3, 800159a <_sbrk_r+0x1a>
 8001598:	6023      	str	r3, [r4, #0]
 800159a:	bd38      	pop	{r3, r4, r5, pc}
 800159c:	200001c4 	.word	0x200001c4

080015a0 <__swhatbuf_r>:
 80015a0:	b570      	push	{r4, r5, r6, lr}
 80015a2:	460c      	mov	r4, r1
 80015a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80015a8:	2900      	cmp	r1, #0
 80015aa:	b096      	sub	sp, #88	@ 0x58
 80015ac:	4615      	mov	r5, r2
 80015ae:	461e      	mov	r6, r3
 80015b0:	da0d      	bge.n	80015ce <__swhatbuf_r+0x2e>
 80015b2:	89a3      	ldrh	r3, [r4, #12]
 80015b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80015b8:	f04f 0100 	mov.w	r1, #0
 80015bc:	bf14      	ite	ne
 80015be:	2340      	movne	r3, #64	@ 0x40
 80015c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80015c4:	2000      	movs	r0, #0
 80015c6:	6031      	str	r1, [r6, #0]
 80015c8:	602b      	str	r3, [r5, #0]
 80015ca:	b016      	add	sp, #88	@ 0x58
 80015cc:	bd70      	pop	{r4, r5, r6, pc}
 80015ce:	466a      	mov	r2, sp
 80015d0:	f000 f848 	bl	8001664 <_fstat_r>
 80015d4:	2800      	cmp	r0, #0
 80015d6:	dbec      	blt.n	80015b2 <__swhatbuf_r+0x12>
 80015d8:	9901      	ldr	r1, [sp, #4]
 80015da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80015de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80015e2:	4259      	negs	r1, r3
 80015e4:	4159      	adcs	r1, r3
 80015e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80015ea:	e7eb      	b.n	80015c4 <__swhatbuf_r+0x24>

080015ec <__smakebuf_r>:
 80015ec:	898b      	ldrh	r3, [r1, #12]
 80015ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80015f0:	079d      	lsls	r5, r3, #30
 80015f2:	4606      	mov	r6, r0
 80015f4:	460c      	mov	r4, r1
 80015f6:	d507      	bpl.n	8001608 <__smakebuf_r+0x1c>
 80015f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80015fc:	6023      	str	r3, [r4, #0]
 80015fe:	6123      	str	r3, [r4, #16]
 8001600:	2301      	movs	r3, #1
 8001602:	6163      	str	r3, [r4, #20]
 8001604:	b003      	add	sp, #12
 8001606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001608:	ab01      	add	r3, sp, #4
 800160a:	466a      	mov	r2, sp
 800160c:	f7ff ffc8 	bl	80015a0 <__swhatbuf_r>
 8001610:	9f00      	ldr	r7, [sp, #0]
 8001612:	4605      	mov	r5, r0
 8001614:	4639      	mov	r1, r7
 8001616:	4630      	mov	r0, r6
 8001618:	f7ff fb18 	bl	8000c4c <_malloc_r>
 800161c:	b948      	cbnz	r0, 8001632 <__smakebuf_r+0x46>
 800161e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001622:	059a      	lsls	r2, r3, #22
 8001624:	d4ee      	bmi.n	8001604 <__smakebuf_r+0x18>
 8001626:	f023 0303 	bic.w	r3, r3, #3
 800162a:	f043 0302 	orr.w	r3, r3, #2
 800162e:	81a3      	strh	r3, [r4, #12]
 8001630:	e7e2      	b.n	80015f8 <__smakebuf_r+0xc>
 8001632:	89a3      	ldrh	r3, [r4, #12]
 8001634:	6020      	str	r0, [r4, #0]
 8001636:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800163a:	81a3      	strh	r3, [r4, #12]
 800163c:	9b01      	ldr	r3, [sp, #4]
 800163e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001642:	b15b      	cbz	r3, 800165c <__smakebuf_r+0x70>
 8001644:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001648:	4630      	mov	r0, r6
 800164a:	f000 f81d 	bl	8001688 <_isatty_r>
 800164e:	b128      	cbz	r0, 800165c <__smakebuf_r+0x70>
 8001650:	89a3      	ldrh	r3, [r4, #12]
 8001652:	f023 0303 	bic.w	r3, r3, #3
 8001656:	f043 0301 	orr.w	r3, r3, #1
 800165a:	81a3      	strh	r3, [r4, #12]
 800165c:	89a3      	ldrh	r3, [r4, #12]
 800165e:	431d      	orrs	r5, r3
 8001660:	81a5      	strh	r5, [r4, #12]
 8001662:	e7cf      	b.n	8001604 <__smakebuf_r+0x18>

08001664 <_fstat_r>:
 8001664:	b538      	push	{r3, r4, r5, lr}
 8001666:	4d07      	ldr	r5, [pc, #28]	@ (8001684 <_fstat_r+0x20>)
 8001668:	2300      	movs	r3, #0
 800166a:	4604      	mov	r4, r0
 800166c:	4608      	mov	r0, r1
 800166e:	4611      	mov	r1, r2
 8001670:	602b      	str	r3, [r5, #0]
 8001672:	f7fe ff4c 	bl	800050e <_fstat>
 8001676:	1c43      	adds	r3, r0, #1
 8001678:	d102      	bne.n	8001680 <_fstat_r+0x1c>
 800167a:	682b      	ldr	r3, [r5, #0]
 800167c:	b103      	cbz	r3, 8001680 <_fstat_r+0x1c>
 800167e:	6023      	str	r3, [r4, #0]
 8001680:	bd38      	pop	{r3, r4, r5, pc}
 8001682:	bf00      	nop
 8001684:	200001c4 	.word	0x200001c4

08001688 <_isatty_r>:
 8001688:	b538      	push	{r3, r4, r5, lr}
 800168a:	4d06      	ldr	r5, [pc, #24]	@ (80016a4 <_isatty_r+0x1c>)
 800168c:	2300      	movs	r3, #0
 800168e:	4604      	mov	r4, r0
 8001690:	4608      	mov	r0, r1
 8001692:	602b      	str	r3, [r5, #0]
 8001694:	f7fe ff4b 	bl	800052e <_isatty>
 8001698:	1c43      	adds	r3, r0, #1
 800169a:	d102      	bne.n	80016a2 <_isatty_r+0x1a>
 800169c:	682b      	ldr	r3, [r5, #0]
 800169e:	b103      	cbz	r3, 80016a2 <_isatty_r+0x1a>
 80016a0:	6023      	str	r3, [r4, #0]
 80016a2:	bd38      	pop	{r3, r4, r5, pc}
 80016a4:	200001c4 	.word	0x200001c4

080016a8 <_init>:
 80016a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016aa:	bf00      	nop
 80016ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016ae:	bc08      	pop	{r3}
 80016b0:	469e      	mov	lr, r3
 80016b2:	4770      	bx	lr

080016b4 <_fini>:
 80016b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016b6:	bf00      	nop
 80016b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016ba:	bc08      	pop	{r3}
 80016bc:	469e      	mov	lr, r3
 80016be:	4770      	bx	lr
