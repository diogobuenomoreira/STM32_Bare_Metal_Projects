
3_system_drivers-timebase.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000dc0  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08000f4c  08000f4c  00001f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000f60  08000f60  0000205c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000f60  08000f60  0000205c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000f60  08000f60  0000205c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000f60  08000f60  00001f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000f64  08000f64  00001f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08000f68  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0000205c  2**0
                  CONTENTS
 10 .bss          00000174  2000005c  2000005c  0000205c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001d0  200001d0  0000205c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000205c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001223  00000000  00000000  0000208c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000066c  00000000  00000000  000032af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001b0  00000000  00000000  00003920  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000122  00000000  00000000  00003ad0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e537  00000000  00000000  00003bf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000277e  00000000  00000000  00022129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a4884  00000000  00000000  000248a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000c912b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000b4c  00000000  00000000  000c9170  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  000c9cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000005c 	.word	0x2000005c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08000f34 	.word	0x08000f34

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000060 	.word	0x20000060
 80001c8:	08000f34 	.word	0x08000f34

080001cc <FPU_Enable>:

#include "fpu.h"
#include "stm32l4xx.h"

void FPU_Enable(void)
{
 80001cc:	b480      	push	{r7}
 80001ce:	af00      	add	r7, sp, #0
	/* Enable floating point unit: Enable CP10 and CPU11 full access*/
	SCB->CPACR |= (1 << 20)|(1 << 21)|(1 << 22)|(1 << 23);
 80001d0:	4b06      	ldr	r3, [pc, #24]	@ (80001ec <FPU_Enable+0x20>)
 80001d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80001d6:	4a05      	ldr	r2, [pc, #20]	@ (80001ec <FPU_Enable+0x20>)
 80001d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80001dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

}
 80001e0:	bf00      	nop
 80001e2:	46bd      	mov	sp, r7
 80001e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop
 80001ec:	e000ed00 	.word	0xe000ed00

080001f0 <main>:
#include <stdio.h>
#include "timebase.h"


int main(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	af00      	add	r7, sp, #0
	/* Enable FPU */
	FPU_Enable();
 80001f4:	f7ff ffea 	bl	80001cc <FPU_Enable>

	/* Initialize UART */
	Debug_UART_Init();
 80001f8:	f000 f92c 	bl	8000454 <Debug_UART_Init>

	/* Initialize Timebase */
	Timebase_Init();
 80001fc:	f000 f8f0 	bl	80003e0 <Timebase_Init>

	while(1)
	{
		printf("Hello from STM32\r\n");
 8000200:	4803      	ldr	r0, [pc, #12]	@ (8000210 <main+0x20>)
 8000202:	f000 fb03 	bl	800080c <puts>
		Delay(5);
 8000206:	2005      	movs	r0, #5
 8000208:	f000 f8a8 	bl	800035c <Delay>
		printf("Hello from STM32\r\n");
 800020c:	bf00      	nop
 800020e:	e7f7      	b.n	8000200 <main+0x10>
 8000210:	08000f4c 	.word	0x08000f4c

08000214 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b086      	sub	sp, #24
 8000218:	af00      	add	r7, sp, #0
 800021a:	60f8      	str	r0, [r7, #12]
 800021c:	60b9      	str	r1, [r7, #8]
 800021e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000220:	2300      	movs	r3, #0
 8000222:	617b      	str	r3, [r7, #20]
 8000224:	e00a      	b.n	800023c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000226:	f3af 8000 	nop.w
 800022a:	4601      	mov	r1, r0
 800022c:	68bb      	ldr	r3, [r7, #8]
 800022e:	1c5a      	adds	r2, r3, #1
 8000230:	60ba      	str	r2, [r7, #8]
 8000232:	b2ca      	uxtb	r2, r1
 8000234:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000236:	697b      	ldr	r3, [r7, #20]
 8000238:	3301      	adds	r3, #1
 800023a:	617b      	str	r3, [r7, #20]
 800023c:	697a      	ldr	r2, [r7, #20]
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	429a      	cmp	r2, r3
 8000242:	dbf0      	blt.n	8000226 <_read+0x12>
  }

  return len;
 8000244:	687b      	ldr	r3, [r7, #4]
}
 8000246:	4618      	mov	r0, r3
 8000248:	3718      	adds	r7, #24
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}

0800024e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800024e:	b580      	push	{r7, lr}
 8000250:	b086      	sub	sp, #24
 8000252:	af00      	add	r7, sp, #0
 8000254:	60f8      	str	r0, [r7, #12]
 8000256:	60b9      	str	r1, [r7, #8]
 8000258:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800025a:	2300      	movs	r3, #0
 800025c:	617b      	str	r3, [r7, #20]
 800025e:	e009      	b.n	8000274 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000260:	68bb      	ldr	r3, [r7, #8]
 8000262:	1c5a      	adds	r2, r3, #1
 8000264:	60ba      	str	r2, [r7, #8]
 8000266:	781b      	ldrb	r3, [r3, #0]
 8000268:	4618      	mov	r0, r3
 800026a:	f000 f8e7 	bl	800043c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800026e:	697b      	ldr	r3, [r7, #20]
 8000270:	3301      	adds	r3, #1
 8000272:	617b      	str	r3, [r7, #20]
 8000274:	697a      	ldr	r2, [r7, #20]
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	429a      	cmp	r2, r3
 800027a:	dbf1      	blt.n	8000260 <_write+0x12>
  }
  return len;
 800027c:	687b      	ldr	r3, [r7, #4]
}
 800027e:	4618      	mov	r0, r3
 8000280:	3718      	adds	r7, #24
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}

08000286 <_close>:

int _close(int file)
{
 8000286:	b480      	push	{r7}
 8000288:	b083      	sub	sp, #12
 800028a:	af00      	add	r7, sp, #0
 800028c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800028e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000292:	4618      	mov	r0, r3
 8000294:	370c      	adds	r7, #12
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr

0800029e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800029e:	b480      	push	{r7}
 80002a0:	b083      	sub	sp, #12
 80002a2:	af00      	add	r7, sp, #0
 80002a4:	6078      	str	r0, [r7, #4]
 80002a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80002a8:	683b      	ldr	r3, [r7, #0]
 80002aa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80002ae:	605a      	str	r2, [r3, #4]
  return 0;
 80002b0:	2300      	movs	r3, #0
}
 80002b2:	4618      	mov	r0, r3
 80002b4:	370c      	adds	r7, #12
 80002b6:	46bd      	mov	sp, r7
 80002b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002bc:	4770      	bx	lr

080002be <_isatty>:

int _isatty(int file)
{
 80002be:	b480      	push	{r7}
 80002c0:	b083      	sub	sp, #12
 80002c2:	af00      	add	r7, sp, #0
 80002c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80002c6:	2301      	movs	r3, #1
}
 80002c8:	4618      	mov	r0, r3
 80002ca:	370c      	adds	r7, #12
 80002cc:	46bd      	mov	sp, r7
 80002ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d2:	4770      	bx	lr

080002d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80002d4:	b480      	push	{r7}
 80002d6:	b085      	sub	sp, #20
 80002d8:	af00      	add	r7, sp, #0
 80002da:	60f8      	str	r0, [r7, #12]
 80002dc:	60b9      	str	r1, [r7, #8]
 80002de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80002e0:	2300      	movs	r3, #0
}
 80002e2:	4618      	mov	r0, r3
 80002e4:	3714      	adds	r7, #20
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr
	...

080002f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b086      	sub	sp, #24
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80002f8:	4a14      	ldr	r2, [pc, #80]	@ (800034c <_sbrk+0x5c>)
 80002fa:	4b15      	ldr	r3, [pc, #84]	@ (8000350 <_sbrk+0x60>)
 80002fc:	1ad3      	subs	r3, r2, r3
 80002fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000300:	697b      	ldr	r3, [r7, #20]
 8000302:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000304:	4b13      	ldr	r3, [pc, #76]	@ (8000354 <_sbrk+0x64>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	2b00      	cmp	r3, #0
 800030a:	d102      	bne.n	8000312 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800030c:	4b11      	ldr	r3, [pc, #68]	@ (8000354 <_sbrk+0x64>)
 800030e:	4a12      	ldr	r2, [pc, #72]	@ (8000358 <_sbrk+0x68>)
 8000310:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000312:	4b10      	ldr	r3, [pc, #64]	@ (8000354 <_sbrk+0x64>)
 8000314:	681a      	ldr	r2, [r3, #0]
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	4413      	add	r3, r2
 800031a:	693a      	ldr	r2, [r7, #16]
 800031c:	429a      	cmp	r2, r3
 800031e:	d207      	bcs.n	8000330 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000320:	f000 fba2 	bl	8000a68 <__errno>
 8000324:	4603      	mov	r3, r0
 8000326:	220c      	movs	r2, #12
 8000328:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800032a:	f04f 33ff 	mov.w	r3, #4294967295
 800032e:	e009      	b.n	8000344 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000330:	4b08      	ldr	r3, [pc, #32]	@ (8000354 <_sbrk+0x64>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000336:	4b07      	ldr	r3, [pc, #28]	@ (8000354 <_sbrk+0x64>)
 8000338:	681a      	ldr	r2, [r3, #0]
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	4413      	add	r3, r2
 800033e:	4a05      	ldr	r2, [pc, #20]	@ (8000354 <_sbrk+0x64>)
 8000340:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000342:	68fb      	ldr	r3, [r7, #12]
}
 8000344:	4618      	mov	r0, r3
 8000346:	3718      	adds	r7, #24
 8000348:	46bd      	mov	sp, r7
 800034a:	bd80      	pop	{r7, pc}
 800034c:	20018000 	.word	0x20018000
 8000350:	00000400 	.word	0x00000400
 8000354:	20000078 	.word	0x20000078
 8000358:	200001d0 	.word	0x200001d0

0800035c <Delay>:
static volatile uint32_t g_current_tick_p;


/* Delay in seconds */
void Delay(uint32_t delay)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b084      	sub	sp, #16
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
	uint32_t tick_start = Get_Tick();
 8000364:	f000 f818 	bl	8000398 <Get_Tick>
 8000368:	60b8      	str	r0, [r7, #8]
	uint32_t wait = delay;
 800036a:	687b      	ldr	r3, [r7, #4]
 800036c:	60fb      	str	r3, [r7, #12]

	if(wait < MAX_DELAY)
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000374:	d002      	beq.n	800037c <Delay+0x20>
	{
		wait += (uint32_t)TICK_FREQ;
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	3301      	adds	r3, #1
 800037a:	60fb      	str	r3, [r7, #12]
	}

	while((Get_Tick() - tick_start) < wait );
 800037c:	bf00      	nop
 800037e:	f000 f80b 	bl	8000398 <Get_Tick>
 8000382:	4602      	mov	r2, r0
 8000384:	68bb      	ldr	r3, [r7, #8]
 8000386:	1ad3      	subs	r3, r2, r3
 8000388:	68fa      	ldr	r2, [r7, #12]
 800038a:	429a      	cmp	r2, r3
 800038c:	d8f7      	bhi.n	800037e <Delay+0x22>
}
 800038e:	bf00      	nop
 8000390:	bf00      	nop
 8000392:	3710      	adds	r7, #16
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}

08000398 <Get_Tick>:

uint32_t Get_Tick(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800039c:	b672      	cpsid	i
}
 800039e:	bf00      	nop
	__disable_irq();
	g_current_tick_p = g_current_tick;
 80003a0:	4b06      	ldr	r3, [pc, #24]	@ (80003bc <Get_Tick+0x24>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a06      	ldr	r2, [pc, #24]	@ (80003c0 <Get_Tick+0x28>)
 80003a6:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80003a8:	b662      	cpsie	i
}
 80003aa:	bf00      	nop
	__enable_irq();

	return g_current_tick_p;
 80003ac:	4b04      	ldr	r3, [pc, #16]	@ (80003c0 <Get_Tick+0x28>)
 80003ae:	681b      	ldr	r3, [r3, #0]
}
 80003b0:	4618      	mov	r0, r3
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	2000007c 	.word	0x2000007c
 80003c0:	20000080 	.word	0x20000080

080003c4 <Tick_Increment>:

static void Tick_Increment(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	af00      	add	r7, sp, #0
	g_current_tick += TICK_FREQ;
 80003c8:	4b04      	ldr	r3, [pc, #16]	@ (80003dc <Tick_Increment+0x18>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	3301      	adds	r3, #1
 80003ce:	4a03      	ldr	r2, [pc, #12]	@ (80003dc <Tick_Increment+0x18>)
 80003d0:	6013      	str	r3, [r2, #0]
}
 80003d2:	bf00      	nop
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	2000007c 	.word	0x2000007c

080003e0 <Timebase_Init>:

void Timebase_Init(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80003e4:	b672      	cpsid	i
}
 80003e6:	bf00      	nop
	/* Disable global interrupts */
	__disable_irq();

	/* Load the timer with number of clock cycles per second */
	SysTick->LOAD = ONE_SEC_LOAD - 1; // -1 because we count from zero
 80003e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000428 <Timebase_Init+0x48>)
 80003ea:	4a10      	ldr	r2, [pc, #64]	@ (800042c <Timebase_Init+0x4c>)
 80003ec:	605a      	str	r2, [r3, #4]

	/* Clear systick current value register */
	SysTick->VAL = 0;
 80003ee:	4b0e      	ldr	r3, [pc, #56]	@ (8000428 <Timebase_Init+0x48>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	609a      	str	r2, [r3, #8]

	/* Select internal clock source */
	SysTick->CTRL |= CTRL_CLKSRC;
 80003f4:	4b0c      	ldr	r3, [pc, #48]	@ (8000428 <Timebase_Init+0x48>)
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	4a0b      	ldr	r2, [pc, #44]	@ (8000428 <Timebase_Init+0x48>)
 80003fa:	f043 0304 	orr.w	r3, r3, #4
 80003fe:	6013      	str	r3, [r2, #0]

	/* Enable interrupt */
	SysTick->CTRL |= CTRL_TICKINT;
 8000400:	4b09      	ldr	r3, [pc, #36]	@ (8000428 <Timebase_Init+0x48>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a08      	ldr	r2, [pc, #32]	@ (8000428 <Timebase_Init+0x48>)
 8000406:	f043 0302 	orr.w	r3, r3, #2
 800040a:	6013      	str	r3, [r2, #0]

	/* Enable systick */
	SysTick->CTRL |= CTRL_ENABLE;
 800040c:	4b06      	ldr	r3, [pc, #24]	@ (8000428 <Timebase_Init+0x48>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	4a05      	ldr	r2, [pc, #20]	@ (8000428 <Timebase_Init+0x48>)
 8000412:	f043 0301 	orr.w	r3, r3, #1
 8000416:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000418:	b662      	cpsie	i
}
 800041a:	bf00      	nop

	/* Enable global interrupt */
	__enable_irq();
}
 800041c:	bf00      	nop
 800041e:	46bd      	mov	sp, r7
 8000420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000424:	4770      	bx	lr
 8000426:	bf00      	nop
 8000428:	e000e010 	.word	0xe000e010
 800042c:	003d08ff 	.word	0x003d08ff

08000430 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	af00      	add	r7, sp, #0
	Tick_Increment();
 8000434:	f7ff ffc6 	bl	80003c4 <Tick_Increment>
}
 8000438:	bf00      	nop
 800043a:	bd80      	pop	{r7, pc}

0800043c <__io_putchar>:
static uint16_t UART_Compute_Baudrate(uint32_t peripheral_clk, uint32_t baudrate);
static void UART_Set_Baudrate(uint32_t peripheral_clk, uint32_t baudrate);
static void UART_Write(int ch);

int __io_putchar(int ch)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
	UART_Write(ch);
 8000444:	6878      	ldr	r0, [r7, #4]
 8000446:	f000 f85d 	bl	8000504 <UART_Write>
	return ch;
 800044a:	687b      	ldr	r3, [r7, #4]
}
 800044c:	4618      	mov	r0, r3
 800044e:	3708      	adds	r7, #8
 8000450:	46bd      	mov	sp, r7
 8000452:	bd80      	pop	{r7, pc}

08000454 <Debug_UART_Init>:

void Debug_UART_Init(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	af00      	add	r7, sp, #0
	/* Enable clock access to GPIOA */
	RCC->AHB2ENR |= GPIOAEN;
 8000458:	4b27      	ldr	r3, [pc, #156]	@ (80004f8 <Debug_UART_Init+0xa4>)
 800045a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800045c:	4a26      	ldr	r2, [pc, #152]	@ (80004f8 <Debug_UART_Init+0xa4>)
 800045e:	f043 0301 	orr.w	r3, r3, #1
 8000462:	64d3      	str	r3, [r2, #76]	@ 0x4c

	/* Set the mode of PA2 to alternate function mode */
	GPIOA->MODER &= ~(1U << 4U);
 8000464:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800046e:	f023 0310 	bic.w	r3, r3, #16
 8000472:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U << 5U);
 8000474:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800047e:	f043 0320 	orr.w	r3, r3, #32
 8000482:	6013      	str	r3, [r2, #0]

	/* Set alternate function type to AF7 (UART2_TX) */
	GPIOA->AFR[0] |= (1U << 8U);
 8000484:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000488:	6a1b      	ldr	r3, [r3, #32]
 800048a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800048e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000492:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 9U);
 8000494:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000498:	6a1b      	ldr	r3, [r3, #32]
 800049a:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800049e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80004a2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 10U);
 80004a4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80004a8:	6a1b      	ldr	r3, [r3, #32]
 80004aa:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80004ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80004b2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U << 11U);
 80004b4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80004b8:	6a1b      	ldr	r3, [r3, #32]
 80004ba:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80004be:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80004c2:	6213      	str	r3, [r2, #32]

	/* Enable clock access to UART2 */
	RCC->APB1ENR1 |= UART2EN;
 80004c4:	4b0c      	ldr	r3, [pc, #48]	@ (80004f8 <Debug_UART_Init+0xa4>)
 80004c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80004c8:	4a0b      	ldr	r2, [pc, #44]	@ (80004f8 <Debug_UART_Init+0xa4>)
 80004ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80004ce:	6593      	str	r3, [r2, #88]	@ 0x58

	/* Configure UART baudrate */
	UART_Set_Baudrate(APB1_CLK, DEBUG_UART_BAUDRATE);
 80004d0:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 80004d4:	4809      	ldr	r0, [pc, #36]	@ (80004fc <Debug_UART_Init+0xa8>)
 80004d6:	f000 f843 	bl	8000560 <UART_Set_Baudrate>

	/* Configure transfer direction */
	USART2->CR1 |= CR1_TE;
 80004da:	4b09      	ldr	r3, [pc, #36]	@ (8000500 <Debug_UART_Init+0xac>)
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a08      	ldr	r2, [pc, #32]	@ (8000500 <Debug_UART_Init+0xac>)
 80004e0:	f043 0308 	orr.w	r3, r3, #8
 80004e4:	6013      	str	r3, [r2, #0]

	/* Enable UART mode */
	USART2->CR1 |= CR1_UE;
 80004e6:	4b06      	ldr	r3, [pc, #24]	@ (8000500 <Debug_UART_Init+0xac>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	4a05      	ldr	r2, [pc, #20]	@ (8000500 <Debug_UART_Init+0xac>)
 80004ec:	f043 0301 	orr.w	r3, r3, #1
 80004f0:	6013      	str	r3, [r2, #0]
}
 80004f2:	bf00      	nop
 80004f4:	bd80      	pop	{r7, pc}
 80004f6:	bf00      	nop
 80004f8:	40021000 	.word	0x40021000
 80004fc:	003d0900 	.word	0x003d0900
 8000500:	40004400 	.word	0x40004400

08000504 <UART_Write>:

static void UART_Write(int ch)
{
 8000504:	b480      	push	{r7}
 8000506:	b083      	sub	sp, #12
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	/* Make sure transmit data register is empty */
	while(!(USART2->ISR & ISR_TXE));
 800050c:	bf00      	nop
 800050e:	4b09      	ldr	r3, [pc, #36]	@ (8000534 <UART_Write+0x30>)
 8000510:	69db      	ldr	r3, [r3, #28]
 8000512:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000516:	2b00      	cmp	r3, #0
 8000518:	d0f9      	beq.n	800050e <UART_Write+0xa>

	/* Write to transmit data register */
	USART2->TDR = (ch & 0xFF);
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	b29a      	uxth	r2, r3
 800051e:	4b05      	ldr	r3, [pc, #20]	@ (8000534 <UART_Write+0x30>)
 8000520:	b2d2      	uxtb	r2, r2
 8000522:	b292      	uxth	r2, r2
 8000524:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8000526:	bf00      	nop
 8000528:	370c      	adds	r7, #12
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	40004400 	.word	0x40004400

08000538 <UART_Compute_Baudrate>:

static uint16_t UART_Compute_Baudrate(uint32_t peripheral_clk, uint32_t baudrate)
{
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
 8000540:	6039      	str	r1, [r7, #0]
	return ( ( peripheral_clk + ( baudrate / 2U ) ) / baudrate );
 8000542:	683b      	ldr	r3, [r7, #0]
 8000544:	085a      	lsrs	r2, r3, #1
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	441a      	add	r2, r3
 800054a:	683b      	ldr	r3, [r7, #0]
 800054c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000550:	b29b      	uxth	r3, r3
}
 8000552:	4618      	mov	r0, r3
 8000554:	370c      	adds	r7, #12
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
	...

08000560 <UART_Set_Baudrate>:

static void UART_Set_Baudrate(uint32_t peripheral_clk, uint32_t baudrate)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
 8000568:	6039      	str	r1, [r7, #0]
	USART2->BRR = UART_Compute_Baudrate(peripheral_clk, baudrate);
 800056a:	6839      	ldr	r1, [r7, #0]
 800056c:	6878      	ldr	r0, [r7, #4]
 800056e:	f7ff ffe3 	bl	8000538 <UART_Compute_Baudrate>
 8000572:	4603      	mov	r3, r0
 8000574:	461a      	mov	r2, r3
 8000576:	4b03      	ldr	r3, [pc, #12]	@ (8000584 <UART_Set_Baudrate+0x24>)
 8000578:	60da      	str	r2, [r3, #12]
}
 800057a:	bf00      	nop
 800057c:	3708      	adds	r7, #8
 800057e:	46bd      	mov	sp, r7
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	40004400 	.word	0x40004400

08000588 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000588:	480d      	ldr	r0, [pc, #52]	@ (80005c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800058a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800058c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000590:	480c      	ldr	r0, [pc, #48]	@ (80005c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000592:	490d      	ldr	r1, [pc, #52]	@ (80005c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000594:	4a0d      	ldr	r2, [pc, #52]	@ (80005cc <LoopForever+0xe>)
  movs r3, #0
 8000596:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000598:	e002      	b.n	80005a0 <LoopCopyDataInit>

0800059a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800059a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800059c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800059e:	3304      	adds	r3, #4

080005a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005a4:	d3f9      	bcc.n	800059a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005a6:	4a0a      	ldr	r2, [pc, #40]	@ (80005d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005a8:	4c0a      	ldr	r4, [pc, #40]	@ (80005d4 <LoopForever+0x16>)
  movs r3, #0
 80005aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005ac:	e001      	b.n	80005b2 <LoopFillZerobss>

080005ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005b0:	3204      	adds	r2, #4

080005b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005b4:	d3fb      	bcc.n	80005ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80005b6:	f000 fa5d 	bl	8000a74 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80005ba:	f7ff fe19 	bl	80001f0 <main>

080005be <LoopForever>:

LoopForever:
  b LoopForever
 80005be:	e7fe      	b.n	80005be <LoopForever>
  ldr   r0, =_estack
 80005c0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80005c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005c8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80005cc:	08000f68 	.word	0x08000f68
  ldr r2, =_sbss
 80005d0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80005d4:	200001d0 	.word	0x200001d0

080005d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80005d8:	e7fe      	b.n	80005d8 <ADC1_2_IRQHandler>
	...

080005dc <std>:
 80005dc:	2300      	movs	r3, #0
 80005de:	b510      	push	{r4, lr}
 80005e0:	4604      	mov	r4, r0
 80005e2:	e9c0 3300 	strd	r3, r3, [r0]
 80005e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80005ea:	6083      	str	r3, [r0, #8]
 80005ec:	8181      	strh	r1, [r0, #12]
 80005ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80005f0:	81c2      	strh	r2, [r0, #14]
 80005f2:	6183      	str	r3, [r0, #24]
 80005f4:	4619      	mov	r1, r3
 80005f6:	2208      	movs	r2, #8
 80005f8:	305c      	adds	r0, #92	@ 0x5c
 80005fa:	f000 f9e7 	bl	80009cc <memset>
 80005fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000634 <std+0x58>)
 8000600:	6263      	str	r3, [r4, #36]	@ 0x24
 8000602:	4b0d      	ldr	r3, [pc, #52]	@ (8000638 <std+0x5c>)
 8000604:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000606:	4b0d      	ldr	r3, [pc, #52]	@ (800063c <std+0x60>)
 8000608:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800060a:	4b0d      	ldr	r3, [pc, #52]	@ (8000640 <std+0x64>)
 800060c:	6323      	str	r3, [r4, #48]	@ 0x30
 800060e:	4b0d      	ldr	r3, [pc, #52]	@ (8000644 <std+0x68>)
 8000610:	6224      	str	r4, [r4, #32]
 8000612:	429c      	cmp	r4, r3
 8000614:	d006      	beq.n	8000624 <std+0x48>
 8000616:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800061a:	4294      	cmp	r4, r2
 800061c:	d002      	beq.n	8000624 <std+0x48>
 800061e:	33d0      	adds	r3, #208	@ 0xd0
 8000620:	429c      	cmp	r4, r3
 8000622:	d105      	bne.n	8000630 <std+0x54>
 8000624:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000628:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800062c:	f000 ba46 	b.w	8000abc <__retarget_lock_init_recursive>
 8000630:	bd10      	pop	{r4, pc}
 8000632:	bf00      	nop
 8000634:	0800081d 	.word	0x0800081d
 8000638:	0800083f 	.word	0x0800083f
 800063c:	08000877 	.word	0x08000877
 8000640:	0800089b 	.word	0x0800089b
 8000644:	20000084 	.word	0x20000084

08000648 <stdio_exit_handler>:
 8000648:	4a02      	ldr	r2, [pc, #8]	@ (8000654 <stdio_exit_handler+0xc>)
 800064a:	4903      	ldr	r1, [pc, #12]	@ (8000658 <stdio_exit_handler+0x10>)
 800064c:	4803      	ldr	r0, [pc, #12]	@ (800065c <stdio_exit_handler+0x14>)
 800064e:	f000 b869 	b.w	8000724 <_fwalk_sglue>
 8000652:	bf00      	nop
 8000654:	20000000 	.word	0x20000000
 8000658:	08000dbd 	.word	0x08000dbd
 800065c:	20000010 	.word	0x20000010

08000660 <cleanup_stdio>:
 8000660:	6841      	ldr	r1, [r0, #4]
 8000662:	4b0c      	ldr	r3, [pc, #48]	@ (8000694 <cleanup_stdio+0x34>)
 8000664:	4299      	cmp	r1, r3
 8000666:	b510      	push	{r4, lr}
 8000668:	4604      	mov	r4, r0
 800066a:	d001      	beq.n	8000670 <cleanup_stdio+0x10>
 800066c:	f000 fba6 	bl	8000dbc <_fflush_r>
 8000670:	68a1      	ldr	r1, [r4, #8]
 8000672:	4b09      	ldr	r3, [pc, #36]	@ (8000698 <cleanup_stdio+0x38>)
 8000674:	4299      	cmp	r1, r3
 8000676:	d002      	beq.n	800067e <cleanup_stdio+0x1e>
 8000678:	4620      	mov	r0, r4
 800067a:	f000 fb9f 	bl	8000dbc <_fflush_r>
 800067e:	68e1      	ldr	r1, [r4, #12]
 8000680:	4b06      	ldr	r3, [pc, #24]	@ (800069c <cleanup_stdio+0x3c>)
 8000682:	4299      	cmp	r1, r3
 8000684:	d004      	beq.n	8000690 <cleanup_stdio+0x30>
 8000686:	4620      	mov	r0, r4
 8000688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800068c:	f000 bb96 	b.w	8000dbc <_fflush_r>
 8000690:	bd10      	pop	{r4, pc}
 8000692:	bf00      	nop
 8000694:	20000084 	.word	0x20000084
 8000698:	200000ec 	.word	0x200000ec
 800069c:	20000154 	.word	0x20000154

080006a0 <global_stdio_init.part.0>:
 80006a0:	b510      	push	{r4, lr}
 80006a2:	4b0b      	ldr	r3, [pc, #44]	@ (80006d0 <global_stdio_init.part.0+0x30>)
 80006a4:	4c0b      	ldr	r4, [pc, #44]	@ (80006d4 <global_stdio_init.part.0+0x34>)
 80006a6:	4a0c      	ldr	r2, [pc, #48]	@ (80006d8 <global_stdio_init.part.0+0x38>)
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	4620      	mov	r0, r4
 80006ac:	2200      	movs	r2, #0
 80006ae:	2104      	movs	r1, #4
 80006b0:	f7ff ff94 	bl	80005dc <std>
 80006b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80006b8:	2201      	movs	r2, #1
 80006ba:	2109      	movs	r1, #9
 80006bc:	f7ff ff8e 	bl	80005dc <std>
 80006c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80006c4:	2202      	movs	r2, #2
 80006c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006ca:	2112      	movs	r1, #18
 80006cc:	f7ff bf86 	b.w	80005dc <std>
 80006d0:	200001bc 	.word	0x200001bc
 80006d4:	20000084 	.word	0x20000084
 80006d8:	08000649 	.word	0x08000649

080006dc <__sfp_lock_acquire>:
 80006dc:	4801      	ldr	r0, [pc, #4]	@ (80006e4 <__sfp_lock_acquire+0x8>)
 80006de:	f000 b9ee 	b.w	8000abe <__retarget_lock_acquire_recursive>
 80006e2:	bf00      	nop
 80006e4:	200001c5 	.word	0x200001c5

080006e8 <__sfp_lock_release>:
 80006e8:	4801      	ldr	r0, [pc, #4]	@ (80006f0 <__sfp_lock_release+0x8>)
 80006ea:	f000 b9e9 	b.w	8000ac0 <__retarget_lock_release_recursive>
 80006ee:	bf00      	nop
 80006f0:	200001c5 	.word	0x200001c5

080006f4 <__sinit>:
 80006f4:	b510      	push	{r4, lr}
 80006f6:	4604      	mov	r4, r0
 80006f8:	f7ff fff0 	bl	80006dc <__sfp_lock_acquire>
 80006fc:	6a23      	ldr	r3, [r4, #32]
 80006fe:	b11b      	cbz	r3, 8000708 <__sinit+0x14>
 8000700:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000704:	f7ff bff0 	b.w	80006e8 <__sfp_lock_release>
 8000708:	4b04      	ldr	r3, [pc, #16]	@ (800071c <__sinit+0x28>)
 800070a:	6223      	str	r3, [r4, #32]
 800070c:	4b04      	ldr	r3, [pc, #16]	@ (8000720 <__sinit+0x2c>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	2b00      	cmp	r3, #0
 8000712:	d1f5      	bne.n	8000700 <__sinit+0xc>
 8000714:	f7ff ffc4 	bl	80006a0 <global_stdio_init.part.0>
 8000718:	e7f2      	b.n	8000700 <__sinit+0xc>
 800071a:	bf00      	nop
 800071c:	08000661 	.word	0x08000661
 8000720:	200001bc 	.word	0x200001bc

08000724 <_fwalk_sglue>:
 8000724:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000728:	4607      	mov	r7, r0
 800072a:	4688      	mov	r8, r1
 800072c:	4614      	mov	r4, r2
 800072e:	2600      	movs	r6, #0
 8000730:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000734:	f1b9 0901 	subs.w	r9, r9, #1
 8000738:	d505      	bpl.n	8000746 <_fwalk_sglue+0x22>
 800073a:	6824      	ldr	r4, [r4, #0]
 800073c:	2c00      	cmp	r4, #0
 800073e:	d1f7      	bne.n	8000730 <_fwalk_sglue+0xc>
 8000740:	4630      	mov	r0, r6
 8000742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000746:	89ab      	ldrh	r3, [r5, #12]
 8000748:	2b01      	cmp	r3, #1
 800074a:	d907      	bls.n	800075c <_fwalk_sglue+0x38>
 800074c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000750:	3301      	adds	r3, #1
 8000752:	d003      	beq.n	800075c <_fwalk_sglue+0x38>
 8000754:	4629      	mov	r1, r5
 8000756:	4638      	mov	r0, r7
 8000758:	47c0      	blx	r8
 800075a:	4306      	orrs	r6, r0
 800075c:	3568      	adds	r5, #104	@ 0x68
 800075e:	e7e9      	b.n	8000734 <_fwalk_sglue+0x10>

08000760 <_puts_r>:
 8000760:	6a03      	ldr	r3, [r0, #32]
 8000762:	b570      	push	{r4, r5, r6, lr}
 8000764:	6884      	ldr	r4, [r0, #8]
 8000766:	4605      	mov	r5, r0
 8000768:	460e      	mov	r6, r1
 800076a:	b90b      	cbnz	r3, 8000770 <_puts_r+0x10>
 800076c:	f7ff ffc2 	bl	80006f4 <__sinit>
 8000770:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000772:	07db      	lsls	r3, r3, #31
 8000774:	d405      	bmi.n	8000782 <_puts_r+0x22>
 8000776:	89a3      	ldrh	r3, [r4, #12]
 8000778:	0598      	lsls	r0, r3, #22
 800077a:	d402      	bmi.n	8000782 <_puts_r+0x22>
 800077c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800077e:	f000 f99e 	bl	8000abe <__retarget_lock_acquire_recursive>
 8000782:	89a3      	ldrh	r3, [r4, #12]
 8000784:	0719      	lsls	r1, r3, #28
 8000786:	d502      	bpl.n	800078e <_puts_r+0x2e>
 8000788:	6923      	ldr	r3, [r4, #16]
 800078a:	2b00      	cmp	r3, #0
 800078c:	d135      	bne.n	80007fa <_puts_r+0x9a>
 800078e:	4621      	mov	r1, r4
 8000790:	4628      	mov	r0, r5
 8000792:	f000 f8c5 	bl	8000920 <__swsetup_r>
 8000796:	b380      	cbz	r0, 80007fa <_puts_r+0x9a>
 8000798:	f04f 35ff 	mov.w	r5, #4294967295
 800079c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800079e:	07da      	lsls	r2, r3, #31
 80007a0:	d405      	bmi.n	80007ae <_puts_r+0x4e>
 80007a2:	89a3      	ldrh	r3, [r4, #12]
 80007a4:	059b      	lsls	r3, r3, #22
 80007a6:	d402      	bmi.n	80007ae <_puts_r+0x4e>
 80007a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80007aa:	f000 f989 	bl	8000ac0 <__retarget_lock_release_recursive>
 80007ae:	4628      	mov	r0, r5
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	da04      	bge.n	80007c0 <_puts_r+0x60>
 80007b6:	69a2      	ldr	r2, [r4, #24]
 80007b8:	429a      	cmp	r2, r3
 80007ba:	dc17      	bgt.n	80007ec <_puts_r+0x8c>
 80007bc:	290a      	cmp	r1, #10
 80007be:	d015      	beq.n	80007ec <_puts_r+0x8c>
 80007c0:	6823      	ldr	r3, [r4, #0]
 80007c2:	1c5a      	adds	r2, r3, #1
 80007c4:	6022      	str	r2, [r4, #0]
 80007c6:	7019      	strb	r1, [r3, #0]
 80007c8:	68a3      	ldr	r3, [r4, #8]
 80007ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80007ce:	3b01      	subs	r3, #1
 80007d0:	60a3      	str	r3, [r4, #8]
 80007d2:	2900      	cmp	r1, #0
 80007d4:	d1ed      	bne.n	80007b2 <_puts_r+0x52>
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	da11      	bge.n	80007fe <_puts_r+0x9e>
 80007da:	4622      	mov	r2, r4
 80007dc:	210a      	movs	r1, #10
 80007de:	4628      	mov	r0, r5
 80007e0:	f000 f85f 	bl	80008a2 <__swbuf_r>
 80007e4:	3001      	adds	r0, #1
 80007e6:	d0d7      	beq.n	8000798 <_puts_r+0x38>
 80007e8:	250a      	movs	r5, #10
 80007ea:	e7d7      	b.n	800079c <_puts_r+0x3c>
 80007ec:	4622      	mov	r2, r4
 80007ee:	4628      	mov	r0, r5
 80007f0:	f000 f857 	bl	80008a2 <__swbuf_r>
 80007f4:	3001      	adds	r0, #1
 80007f6:	d1e7      	bne.n	80007c8 <_puts_r+0x68>
 80007f8:	e7ce      	b.n	8000798 <_puts_r+0x38>
 80007fa:	3e01      	subs	r6, #1
 80007fc:	e7e4      	b.n	80007c8 <_puts_r+0x68>
 80007fe:	6823      	ldr	r3, [r4, #0]
 8000800:	1c5a      	adds	r2, r3, #1
 8000802:	6022      	str	r2, [r4, #0]
 8000804:	220a      	movs	r2, #10
 8000806:	701a      	strb	r2, [r3, #0]
 8000808:	e7ee      	b.n	80007e8 <_puts_r+0x88>
	...

0800080c <puts>:
 800080c:	4b02      	ldr	r3, [pc, #8]	@ (8000818 <puts+0xc>)
 800080e:	4601      	mov	r1, r0
 8000810:	6818      	ldr	r0, [r3, #0]
 8000812:	f7ff bfa5 	b.w	8000760 <_puts_r>
 8000816:	bf00      	nop
 8000818:	2000000c 	.word	0x2000000c

0800081c <__sread>:
 800081c:	b510      	push	{r4, lr}
 800081e:	460c      	mov	r4, r1
 8000820:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000824:	f000 f8fc 	bl	8000a20 <_read_r>
 8000828:	2800      	cmp	r0, #0
 800082a:	bfab      	itete	ge
 800082c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800082e:	89a3      	ldrhlt	r3, [r4, #12]
 8000830:	181b      	addge	r3, r3, r0
 8000832:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000836:	bfac      	ite	ge
 8000838:	6563      	strge	r3, [r4, #84]	@ 0x54
 800083a:	81a3      	strhlt	r3, [r4, #12]
 800083c:	bd10      	pop	{r4, pc}

0800083e <__swrite>:
 800083e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000842:	461f      	mov	r7, r3
 8000844:	898b      	ldrh	r3, [r1, #12]
 8000846:	05db      	lsls	r3, r3, #23
 8000848:	4605      	mov	r5, r0
 800084a:	460c      	mov	r4, r1
 800084c:	4616      	mov	r6, r2
 800084e:	d505      	bpl.n	800085c <__swrite+0x1e>
 8000850:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000854:	2302      	movs	r3, #2
 8000856:	2200      	movs	r2, #0
 8000858:	f000 f8d0 	bl	80009fc <_lseek_r>
 800085c:	89a3      	ldrh	r3, [r4, #12]
 800085e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000862:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000866:	81a3      	strh	r3, [r4, #12]
 8000868:	4632      	mov	r2, r6
 800086a:	463b      	mov	r3, r7
 800086c:	4628      	mov	r0, r5
 800086e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000872:	f000 b8e7 	b.w	8000a44 <_write_r>

08000876 <__sseek>:
 8000876:	b510      	push	{r4, lr}
 8000878:	460c      	mov	r4, r1
 800087a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800087e:	f000 f8bd 	bl	80009fc <_lseek_r>
 8000882:	1c43      	adds	r3, r0, #1
 8000884:	89a3      	ldrh	r3, [r4, #12]
 8000886:	bf15      	itete	ne
 8000888:	6560      	strne	r0, [r4, #84]	@ 0x54
 800088a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800088e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000892:	81a3      	strheq	r3, [r4, #12]
 8000894:	bf18      	it	ne
 8000896:	81a3      	strhne	r3, [r4, #12]
 8000898:	bd10      	pop	{r4, pc}

0800089a <__sclose>:
 800089a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800089e:	f000 b89d 	b.w	80009dc <_close_r>

080008a2 <__swbuf_r>:
 80008a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008a4:	460e      	mov	r6, r1
 80008a6:	4614      	mov	r4, r2
 80008a8:	4605      	mov	r5, r0
 80008aa:	b118      	cbz	r0, 80008b4 <__swbuf_r+0x12>
 80008ac:	6a03      	ldr	r3, [r0, #32]
 80008ae:	b90b      	cbnz	r3, 80008b4 <__swbuf_r+0x12>
 80008b0:	f7ff ff20 	bl	80006f4 <__sinit>
 80008b4:	69a3      	ldr	r3, [r4, #24]
 80008b6:	60a3      	str	r3, [r4, #8]
 80008b8:	89a3      	ldrh	r3, [r4, #12]
 80008ba:	071a      	lsls	r2, r3, #28
 80008bc:	d501      	bpl.n	80008c2 <__swbuf_r+0x20>
 80008be:	6923      	ldr	r3, [r4, #16]
 80008c0:	b943      	cbnz	r3, 80008d4 <__swbuf_r+0x32>
 80008c2:	4621      	mov	r1, r4
 80008c4:	4628      	mov	r0, r5
 80008c6:	f000 f82b 	bl	8000920 <__swsetup_r>
 80008ca:	b118      	cbz	r0, 80008d4 <__swbuf_r+0x32>
 80008cc:	f04f 37ff 	mov.w	r7, #4294967295
 80008d0:	4638      	mov	r0, r7
 80008d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008d4:	6823      	ldr	r3, [r4, #0]
 80008d6:	6922      	ldr	r2, [r4, #16]
 80008d8:	1a98      	subs	r0, r3, r2
 80008da:	6963      	ldr	r3, [r4, #20]
 80008dc:	b2f6      	uxtb	r6, r6
 80008de:	4283      	cmp	r3, r0
 80008e0:	4637      	mov	r7, r6
 80008e2:	dc05      	bgt.n	80008f0 <__swbuf_r+0x4e>
 80008e4:	4621      	mov	r1, r4
 80008e6:	4628      	mov	r0, r5
 80008e8:	f000 fa68 	bl	8000dbc <_fflush_r>
 80008ec:	2800      	cmp	r0, #0
 80008ee:	d1ed      	bne.n	80008cc <__swbuf_r+0x2a>
 80008f0:	68a3      	ldr	r3, [r4, #8]
 80008f2:	3b01      	subs	r3, #1
 80008f4:	60a3      	str	r3, [r4, #8]
 80008f6:	6823      	ldr	r3, [r4, #0]
 80008f8:	1c5a      	adds	r2, r3, #1
 80008fa:	6022      	str	r2, [r4, #0]
 80008fc:	701e      	strb	r6, [r3, #0]
 80008fe:	6962      	ldr	r2, [r4, #20]
 8000900:	1c43      	adds	r3, r0, #1
 8000902:	429a      	cmp	r2, r3
 8000904:	d004      	beq.n	8000910 <__swbuf_r+0x6e>
 8000906:	89a3      	ldrh	r3, [r4, #12]
 8000908:	07db      	lsls	r3, r3, #31
 800090a:	d5e1      	bpl.n	80008d0 <__swbuf_r+0x2e>
 800090c:	2e0a      	cmp	r6, #10
 800090e:	d1df      	bne.n	80008d0 <__swbuf_r+0x2e>
 8000910:	4621      	mov	r1, r4
 8000912:	4628      	mov	r0, r5
 8000914:	f000 fa52 	bl	8000dbc <_fflush_r>
 8000918:	2800      	cmp	r0, #0
 800091a:	d0d9      	beq.n	80008d0 <__swbuf_r+0x2e>
 800091c:	e7d6      	b.n	80008cc <__swbuf_r+0x2a>
	...

08000920 <__swsetup_r>:
 8000920:	b538      	push	{r3, r4, r5, lr}
 8000922:	4b29      	ldr	r3, [pc, #164]	@ (80009c8 <__swsetup_r+0xa8>)
 8000924:	4605      	mov	r5, r0
 8000926:	6818      	ldr	r0, [r3, #0]
 8000928:	460c      	mov	r4, r1
 800092a:	b118      	cbz	r0, 8000934 <__swsetup_r+0x14>
 800092c:	6a03      	ldr	r3, [r0, #32]
 800092e:	b90b      	cbnz	r3, 8000934 <__swsetup_r+0x14>
 8000930:	f7ff fee0 	bl	80006f4 <__sinit>
 8000934:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000938:	0719      	lsls	r1, r3, #28
 800093a:	d422      	bmi.n	8000982 <__swsetup_r+0x62>
 800093c:	06da      	lsls	r2, r3, #27
 800093e:	d407      	bmi.n	8000950 <__swsetup_r+0x30>
 8000940:	2209      	movs	r2, #9
 8000942:	602a      	str	r2, [r5, #0]
 8000944:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000948:	81a3      	strh	r3, [r4, #12]
 800094a:	f04f 30ff 	mov.w	r0, #4294967295
 800094e:	e033      	b.n	80009b8 <__swsetup_r+0x98>
 8000950:	0758      	lsls	r0, r3, #29
 8000952:	d512      	bpl.n	800097a <__swsetup_r+0x5a>
 8000954:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000956:	b141      	cbz	r1, 800096a <__swsetup_r+0x4a>
 8000958:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800095c:	4299      	cmp	r1, r3
 800095e:	d002      	beq.n	8000966 <__swsetup_r+0x46>
 8000960:	4628      	mov	r0, r5
 8000962:	f000 f8af 	bl	8000ac4 <_free_r>
 8000966:	2300      	movs	r3, #0
 8000968:	6363      	str	r3, [r4, #52]	@ 0x34
 800096a:	89a3      	ldrh	r3, [r4, #12]
 800096c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000970:	81a3      	strh	r3, [r4, #12]
 8000972:	2300      	movs	r3, #0
 8000974:	6063      	str	r3, [r4, #4]
 8000976:	6923      	ldr	r3, [r4, #16]
 8000978:	6023      	str	r3, [r4, #0]
 800097a:	89a3      	ldrh	r3, [r4, #12]
 800097c:	f043 0308 	orr.w	r3, r3, #8
 8000980:	81a3      	strh	r3, [r4, #12]
 8000982:	6923      	ldr	r3, [r4, #16]
 8000984:	b94b      	cbnz	r3, 800099a <__swsetup_r+0x7a>
 8000986:	89a3      	ldrh	r3, [r4, #12]
 8000988:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800098c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000990:	d003      	beq.n	800099a <__swsetup_r+0x7a>
 8000992:	4621      	mov	r1, r4
 8000994:	4628      	mov	r0, r5
 8000996:	f000 fa5f 	bl	8000e58 <__smakebuf_r>
 800099a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800099e:	f013 0201 	ands.w	r2, r3, #1
 80009a2:	d00a      	beq.n	80009ba <__swsetup_r+0x9a>
 80009a4:	2200      	movs	r2, #0
 80009a6:	60a2      	str	r2, [r4, #8]
 80009a8:	6962      	ldr	r2, [r4, #20]
 80009aa:	4252      	negs	r2, r2
 80009ac:	61a2      	str	r2, [r4, #24]
 80009ae:	6922      	ldr	r2, [r4, #16]
 80009b0:	b942      	cbnz	r2, 80009c4 <__swsetup_r+0xa4>
 80009b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80009b6:	d1c5      	bne.n	8000944 <__swsetup_r+0x24>
 80009b8:	bd38      	pop	{r3, r4, r5, pc}
 80009ba:	0799      	lsls	r1, r3, #30
 80009bc:	bf58      	it	pl
 80009be:	6962      	ldrpl	r2, [r4, #20]
 80009c0:	60a2      	str	r2, [r4, #8]
 80009c2:	e7f4      	b.n	80009ae <__swsetup_r+0x8e>
 80009c4:	2000      	movs	r0, #0
 80009c6:	e7f7      	b.n	80009b8 <__swsetup_r+0x98>
 80009c8:	2000000c 	.word	0x2000000c

080009cc <memset>:
 80009cc:	4402      	add	r2, r0
 80009ce:	4603      	mov	r3, r0
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d100      	bne.n	80009d6 <memset+0xa>
 80009d4:	4770      	bx	lr
 80009d6:	f803 1b01 	strb.w	r1, [r3], #1
 80009da:	e7f9      	b.n	80009d0 <memset+0x4>

080009dc <_close_r>:
 80009dc:	b538      	push	{r3, r4, r5, lr}
 80009de:	4d06      	ldr	r5, [pc, #24]	@ (80009f8 <_close_r+0x1c>)
 80009e0:	2300      	movs	r3, #0
 80009e2:	4604      	mov	r4, r0
 80009e4:	4608      	mov	r0, r1
 80009e6:	602b      	str	r3, [r5, #0]
 80009e8:	f7ff fc4d 	bl	8000286 <_close>
 80009ec:	1c43      	adds	r3, r0, #1
 80009ee:	d102      	bne.n	80009f6 <_close_r+0x1a>
 80009f0:	682b      	ldr	r3, [r5, #0]
 80009f2:	b103      	cbz	r3, 80009f6 <_close_r+0x1a>
 80009f4:	6023      	str	r3, [r4, #0]
 80009f6:	bd38      	pop	{r3, r4, r5, pc}
 80009f8:	200001c0 	.word	0x200001c0

080009fc <_lseek_r>:
 80009fc:	b538      	push	{r3, r4, r5, lr}
 80009fe:	4d07      	ldr	r5, [pc, #28]	@ (8000a1c <_lseek_r+0x20>)
 8000a00:	4604      	mov	r4, r0
 8000a02:	4608      	mov	r0, r1
 8000a04:	4611      	mov	r1, r2
 8000a06:	2200      	movs	r2, #0
 8000a08:	602a      	str	r2, [r5, #0]
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	f7ff fc62 	bl	80002d4 <_lseek>
 8000a10:	1c43      	adds	r3, r0, #1
 8000a12:	d102      	bne.n	8000a1a <_lseek_r+0x1e>
 8000a14:	682b      	ldr	r3, [r5, #0]
 8000a16:	b103      	cbz	r3, 8000a1a <_lseek_r+0x1e>
 8000a18:	6023      	str	r3, [r4, #0]
 8000a1a:	bd38      	pop	{r3, r4, r5, pc}
 8000a1c:	200001c0 	.word	0x200001c0

08000a20 <_read_r>:
 8000a20:	b538      	push	{r3, r4, r5, lr}
 8000a22:	4d07      	ldr	r5, [pc, #28]	@ (8000a40 <_read_r+0x20>)
 8000a24:	4604      	mov	r4, r0
 8000a26:	4608      	mov	r0, r1
 8000a28:	4611      	mov	r1, r2
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	602a      	str	r2, [r5, #0]
 8000a2e:	461a      	mov	r2, r3
 8000a30:	f7ff fbf0 	bl	8000214 <_read>
 8000a34:	1c43      	adds	r3, r0, #1
 8000a36:	d102      	bne.n	8000a3e <_read_r+0x1e>
 8000a38:	682b      	ldr	r3, [r5, #0]
 8000a3a:	b103      	cbz	r3, 8000a3e <_read_r+0x1e>
 8000a3c:	6023      	str	r3, [r4, #0]
 8000a3e:	bd38      	pop	{r3, r4, r5, pc}
 8000a40:	200001c0 	.word	0x200001c0

08000a44 <_write_r>:
 8000a44:	b538      	push	{r3, r4, r5, lr}
 8000a46:	4d07      	ldr	r5, [pc, #28]	@ (8000a64 <_write_r+0x20>)
 8000a48:	4604      	mov	r4, r0
 8000a4a:	4608      	mov	r0, r1
 8000a4c:	4611      	mov	r1, r2
 8000a4e:	2200      	movs	r2, #0
 8000a50:	602a      	str	r2, [r5, #0]
 8000a52:	461a      	mov	r2, r3
 8000a54:	f7ff fbfb 	bl	800024e <_write>
 8000a58:	1c43      	adds	r3, r0, #1
 8000a5a:	d102      	bne.n	8000a62 <_write_r+0x1e>
 8000a5c:	682b      	ldr	r3, [r5, #0]
 8000a5e:	b103      	cbz	r3, 8000a62 <_write_r+0x1e>
 8000a60:	6023      	str	r3, [r4, #0]
 8000a62:	bd38      	pop	{r3, r4, r5, pc}
 8000a64:	200001c0 	.word	0x200001c0

08000a68 <__errno>:
 8000a68:	4b01      	ldr	r3, [pc, #4]	@ (8000a70 <__errno+0x8>)
 8000a6a:	6818      	ldr	r0, [r3, #0]
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	2000000c 	.word	0x2000000c

08000a74 <__libc_init_array>:
 8000a74:	b570      	push	{r4, r5, r6, lr}
 8000a76:	4d0d      	ldr	r5, [pc, #52]	@ (8000aac <__libc_init_array+0x38>)
 8000a78:	4c0d      	ldr	r4, [pc, #52]	@ (8000ab0 <__libc_init_array+0x3c>)
 8000a7a:	1b64      	subs	r4, r4, r5
 8000a7c:	10a4      	asrs	r4, r4, #2
 8000a7e:	2600      	movs	r6, #0
 8000a80:	42a6      	cmp	r6, r4
 8000a82:	d109      	bne.n	8000a98 <__libc_init_array+0x24>
 8000a84:	4d0b      	ldr	r5, [pc, #44]	@ (8000ab4 <__libc_init_array+0x40>)
 8000a86:	4c0c      	ldr	r4, [pc, #48]	@ (8000ab8 <__libc_init_array+0x44>)
 8000a88:	f000 fa54 	bl	8000f34 <_init>
 8000a8c:	1b64      	subs	r4, r4, r5
 8000a8e:	10a4      	asrs	r4, r4, #2
 8000a90:	2600      	movs	r6, #0
 8000a92:	42a6      	cmp	r6, r4
 8000a94:	d105      	bne.n	8000aa2 <__libc_init_array+0x2e>
 8000a96:	bd70      	pop	{r4, r5, r6, pc}
 8000a98:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a9c:	4798      	blx	r3
 8000a9e:	3601      	adds	r6, #1
 8000aa0:	e7ee      	b.n	8000a80 <__libc_init_array+0xc>
 8000aa2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000aa6:	4798      	blx	r3
 8000aa8:	3601      	adds	r6, #1
 8000aaa:	e7f2      	b.n	8000a92 <__libc_init_array+0x1e>
 8000aac:	08000f60 	.word	0x08000f60
 8000ab0:	08000f60 	.word	0x08000f60
 8000ab4:	08000f60 	.word	0x08000f60
 8000ab8:	08000f64 	.word	0x08000f64

08000abc <__retarget_lock_init_recursive>:
 8000abc:	4770      	bx	lr

08000abe <__retarget_lock_acquire_recursive>:
 8000abe:	4770      	bx	lr

08000ac0 <__retarget_lock_release_recursive>:
 8000ac0:	4770      	bx	lr
	...

08000ac4 <_free_r>:
 8000ac4:	b538      	push	{r3, r4, r5, lr}
 8000ac6:	4605      	mov	r5, r0
 8000ac8:	2900      	cmp	r1, #0
 8000aca:	d041      	beq.n	8000b50 <_free_r+0x8c>
 8000acc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000ad0:	1f0c      	subs	r4, r1, #4
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	bfb8      	it	lt
 8000ad6:	18e4      	addlt	r4, r4, r3
 8000ad8:	f000 f8e0 	bl	8000c9c <__malloc_lock>
 8000adc:	4a1d      	ldr	r2, [pc, #116]	@ (8000b54 <_free_r+0x90>)
 8000ade:	6813      	ldr	r3, [r2, #0]
 8000ae0:	b933      	cbnz	r3, 8000af0 <_free_r+0x2c>
 8000ae2:	6063      	str	r3, [r4, #4]
 8000ae4:	6014      	str	r4, [r2, #0]
 8000ae6:	4628      	mov	r0, r5
 8000ae8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000aec:	f000 b8dc 	b.w	8000ca8 <__malloc_unlock>
 8000af0:	42a3      	cmp	r3, r4
 8000af2:	d908      	bls.n	8000b06 <_free_r+0x42>
 8000af4:	6820      	ldr	r0, [r4, #0]
 8000af6:	1821      	adds	r1, r4, r0
 8000af8:	428b      	cmp	r3, r1
 8000afa:	bf01      	itttt	eq
 8000afc:	6819      	ldreq	r1, [r3, #0]
 8000afe:	685b      	ldreq	r3, [r3, #4]
 8000b00:	1809      	addeq	r1, r1, r0
 8000b02:	6021      	streq	r1, [r4, #0]
 8000b04:	e7ed      	b.n	8000ae2 <_free_r+0x1e>
 8000b06:	461a      	mov	r2, r3
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	b10b      	cbz	r3, 8000b10 <_free_r+0x4c>
 8000b0c:	42a3      	cmp	r3, r4
 8000b0e:	d9fa      	bls.n	8000b06 <_free_r+0x42>
 8000b10:	6811      	ldr	r1, [r2, #0]
 8000b12:	1850      	adds	r0, r2, r1
 8000b14:	42a0      	cmp	r0, r4
 8000b16:	d10b      	bne.n	8000b30 <_free_r+0x6c>
 8000b18:	6820      	ldr	r0, [r4, #0]
 8000b1a:	4401      	add	r1, r0
 8000b1c:	1850      	adds	r0, r2, r1
 8000b1e:	4283      	cmp	r3, r0
 8000b20:	6011      	str	r1, [r2, #0]
 8000b22:	d1e0      	bne.n	8000ae6 <_free_r+0x22>
 8000b24:	6818      	ldr	r0, [r3, #0]
 8000b26:	685b      	ldr	r3, [r3, #4]
 8000b28:	6053      	str	r3, [r2, #4]
 8000b2a:	4408      	add	r0, r1
 8000b2c:	6010      	str	r0, [r2, #0]
 8000b2e:	e7da      	b.n	8000ae6 <_free_r+0x22>
 8000b30:	d902      	bls.n	8000b38 <_free_r+0x74>
 8000b32:	230c      	movs	r3, #12
 8000b34:	602b      	str	r3, [r5, #0]
 8000b36:	e7d6      	b.n	8000ae6 <_free_r+0x22>
 8000b38:	6820      	ldr	r0, [r4, #0]
 8000b3a:	1821      	adds	r1, r4, r0
 8000b3c:	428b      	cmp	r3, r1
 8000b3e:	bf04      	itt	eq
 8000b40:	6819      	ldreq	r1, [r3, #0]
 8000b42:	685b      	ldreq	r3, [r3, #4]
 8000b44:	6063      	str	r3, [r4, #4]
 8000b46:	bf04      	itt	eq
 8000b48:	1809      	addeq	r1, r1, r0
 8000b4a:	6021      	streq	r1, [r4, #0]
 8000b4c:	6054      	str	r4, [r2, #4]
 8000b4e:	e7ca      	b.n	8000ae6 <_free_r+0x22>
 8000b50:	bd38      	pop	{r3, r4, r5, pc}
 8000b52:	bf00      	nop
 8000b54:	200001cc 	.word	0x200001cc

08000b58 <sbrk_aligned>:
 8000b58:	b570      	push	{r4, r5, r6, lr}
 8000b5a:	4e0f      	ldr	r6, [pc, #60]	@ (8000b98 <sbrk_aligned+0x40>)
 8000b5c:	460c      	mov	r4, r1
 8000b5e:	6831      	ldr	r1, [r6, #0]
 8000b60:	4605      	mov	r5, r0
 8000b62:	b911      	cbnz	r1, 8000b6a <sbrk_aligned+0x12>
 8000b64:	f000 f9d6 	bl	8000f14 <_sbrk_r>
 8000b68:	6030      	str	r0, [r6, #0]
 8000b6a:	4621      	mov	r1, r4
 8000b6c:	4628      	mov	r0, r5
 8000b6e:	f000 f9d1 	bl	8000f14 <_sbrk_r>
 8000b72:	1c43      	adds	r3, r0, #1
 8000b74:	d103      	bne.n	8000b7e <sbrk_aligned+0x26>
 8000b76:	f04f 34ff 	mov.w	r4, #4294967295
 8000b7a:	4620      	mov	r0, r4
 8000b7c:	bd70      	pop	{r4, r5, r6, pc}
 8000b7e:	1cc4      	adds	r4, r0, #3
 8000b80:	f024 0403 	bic.w	r4, r4, #3
 8000b84:	42a0      	cmp	r0, r4
 8000b86:	d0f8      	beq.n	8000b7a <sbrk_aligned+0x22>
 8000b88:	1a21      	subs	r1, r4, r0
 8000b8a:	4628      	mov	r0, r5
 8000b8c:	f000 f9c2 	bl	8000f14 <_sbrk_r>
 8000b90:	3001      	adds	r0, #1
 8000b92:	d1f2      	bne.n	8000b7a <sbrk_aligned+0x22>
 8000b94:	e7ef      	b.n	8000b76 <sbrk_aligned+0x1e>
 8000b96:	bf00      	nop
 8000b98:	200001c8 	.word	0x200001c8

08000b9c <_malloc_r>:
 8000b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ba0:	1ccd      	adds	r5, r1, #3
 8000ba2:	f025 0503 	bic.w	r5, r5, #3
 8000ba6:	3508      	adds	r5, #8
 8000ba8:	2d0c      	cmp	r5, #12
 8000baa:	bf38      	it	cc
 8000bac:	250c      	movcc	r5, #12
 8000bae:	2d00      	cmp	r5, #0
 8000bb0:	4606      	mov	r6, r0
 8000bb2:	db01      	blt.n	8000bb8 <_malloc_r+0x1c>
 8000bb4:	42a9      	cmp	r1, r5
 8000bb6:	d904      	bls.n	8000bc2 <_malloc_r+0x26>
 8000bb8:	230c      	movs	r3, #12
 8000bba:	6033      	str	r3, [r6, #0]
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000bc2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000c98 <_malloc_r+0xfc>
 8000bc6:	f000 f869 	bl	8000c9c <__malloc_lock>
 8000bca:	f8d8 3000 	ldr.w	r3, [r8]
 8000bce:	461c      	mov	r4, r3
 8000bd0:	bb44      	cbnz	r4, 8000c24 <_malloc_r+0x88>
 8000bd2:	4629      	mov	r1, r5
 8000bd4:	4630      	mov	r0, r6
 8000bd6:	f7ff ffbf 	bl	8000b58 <sbrk_aligned>
 8000bda:	1c43      	adds	r3, r0, #1
 8000bdc:	4604      	mov	r4, r0
 8000bde:	d158      	bne.n	8000c92 <_malloc_r+0xf6>
 8000be0:	f8d8 4000 	ldr.w	r4, [r8]
 8000be4:	4627      	mov	r7, r4
 8000be6:	2f00      	cmp	r7, #0
 8000be8:	d143      	bne.n	8000c72 <_malloc_r+0xd6>
 8000bea:	2c00      	cmp	r4, #0
 8000bec:	d04b      	beq.n	8000c86 <_malloc_r+0xea>
 8000bee:	6823      	ldr	r3, [r4, #0]
 8000bf0:	4639      	mov	r1, r7
 8000bf2:	4630      	mov	r0, r6
 8000bf4:	eb04 0903 	add.w	r9, r4, r3
 8000bf8:	f000 f98c 	bl	8000f14 <_sbrk_r>
 8000bfc:	4581      	cmp	r9, r0
 8000bfe:	d142      	bne.n	8000c86 <_malloc_r+0xea>
 8000c00:	6821      	ldr	r1, [r4, #0]
 8000c02:	1a6d      	subs	r5, r5, r1
 8000c04:	4629      	mov	r1, r5
 8000c06:	4630      	mov	r0, r6
 8000c08:	f7ff ffa6 	bl	8000b58 <sbrk_aligned>
 8000c0c:	3001      	adds	r0, #1
 8000c0e:	d03a      	beq.n	8000c86 <_malloc_r+0xea>
 8000c10:	6823      	ldr	r3, [r4, #0]
 8000c12:	442b      	add	r3, r5
 8000c14:	6023      	str	r3, [r4, #0]
 8000c16:	f8d8 3000 	ldr.w	r3, [r8]
 8000c1a:	685a      	ldr	r2, [r3, #4]
 8000c1c:	bb62      	cbnz	r2, 8000c78 <_malloc_r+0xdc>
 8000c1e:	f8c8 7000 	str.w	r7, [r8]
 8000c22:	e00f      	b.n	8000c44 <_malloc_r+0xa8>
 8000c24:	6822      	ldr	r2, [r4, #0]
 8000c26:	1b52      	subs	r2, r2, r5
 8000c28:	d420      	bmi.n	8000c6c <_malloc_r+0xd0>
 8000c2a:	2a0b      	cmp	r2, #11
 8000c2c:	d917      	bls.n	8000c5e <_malloc_r+0xc2>
 8000c2e:	1961      	adds	r1, r4, r5
 8000c30:	42a3      	cmp	r3, r4
 8000c32:	6025      	str	r5, [r4, #0]
 8000c34:	bf18      	it	ne
 8000c36:	6059      	strne	r1, [r3, #4]
 8000c38:	6863      	ldr	r3, [r4, #4]
 8000c3a:	bf08      	it	eq
 8000c3c:	f8c8 1000 	streq.w	r1, [r8]
 8000c40:	5162      	str	r2, [r4, r5]
 8000c42:	604b      	str	r3, [r1, #4]
 8000c44:	4630      	mov	r0, r6
 8000c46:	f000 f82f 	bl	8000ca8 <__malloc_unlock>
 8000c4a:	f104 000b 	add.w	r0, r4, #11
 8000c4e:	1d23      	adds	r3, r4, #4
 8000c50:	f020 0007 	bic.w	r0, r0, #7
 8000c54:	1ac2      	subs	r2, r0, r3
 8000c56:	bf1c      	itt	ne
 8000c58:	1a1b      	subne	r3, r3, r0
 8000c5a:	50a3      	strne	r3, [r4, r2]
 8000c5c:	e7af      	b.n	8000bbe <_malloc_r+0x22>
 8000c5e:	6862      	ldr	r2, [r4, #4]
 8000c60:	42a3      	cmp	r3, r4
 8000c62:	bf0c      	ite	eq
 8000c64:	f8c8 2000 	streq.w	r2, [r8]
 8000c68:	605a      	strne	r2, [r3, #4]
 8000c6a:	e7eb      	b.n	8000c44 <_malloc_r+0xa8>
 8000c6c:	4623      	mov	r3, r4
 8000c6e:	6864      	ldr	r4, [r4, #4]
 8000c70:	e7ae      	b.n	8000bd0 <_malloc_r+0x34>
 8000c72:	463c      	mov	r4, r7
 8000c74:	687f      	ldr	r7, [r7, #4]
 8000c76:	e7b6      	b.n	8000be6 <_malloc_r+0x4a>
 8000c78:	461a      	mov	r2, r3
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	42a3      	cmp	r3, r4
 8000c7e:	d1fb      	bne.n	8000c78 <_malloc_r+0xdc>
 8000c80:	2300      	movs	r3, #0
 8000c82:	6053      	str	r3, [r2, #4]
 8000c84:	e7de      	b.n	8000c44 <_malloc_r+0xa8>
 8000c86:	230c      	movs	r3, #12
 8000c88:	6033      	str	r3, [r6, #0]
 8000c8a:	4630      	mov	r0, r6
 8000c8c:	f000 f80c 	bl	8000ca8 <__malloc_unlock>
 8000c90:	e794      	b.n	8000bbc <_malloc_r+0x20>
 8000c92:	6005      	str	r5, [r0, #0]
 8000c94:	e7d6      	b.n	8000c44 <_malloc_r+0xa8>
 8000c96:	bf00      	nop
 8000c98:	200001cc 	.word	0x200001cc

08000c9c <__malloc_lock>:
 8000c9c:	4801      	ldr	r0, [pc, #4]	@ (8000ca4 <__malloc_lock+0x8>)
 8000c9e:	f7ff bf0e 	b.w	8000abe <__retarget_lock_acquire_recursive>
 8000ca2:	bf00      	nop
 8000ca4:	200001c4 	.word	0x200001c4

08000ca8 <__malloc_unlock>:
 8000ca8:	4801      	ldr	r0, [pc, #4]	@ (8000cb0 <__malloc_unlock+0x8>)
 8000caa:	f7ff bf09 	b.w	8000ac0 <__retarget_lock_release_recursive>
 8000cae:	bf00      	nop
 8000cb0:	200001c4 	.word	0x200001c4

08000cb4 <__sflush_r>:
 8000cb4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000cbc:	0716      	lsls	r6, r2, #28
 8000cbe:	4605      	mov	r5, r0
 8000cc0:	460c      	mov	r4, r1
 8000cc2:	d454      	bmi.n	8000d6e <__sflush_r+0xba>
 8000cc4:	684b      	ldr	r3, [r1, #4]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	dc02      	bgt.n	8000cd0 <__sflush_r+0x1c>
 8000cca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	dd48      	ble.n	8000d62 <__sflush_r+0xae>
 8000cd0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	d045      	beq.n	8000d62 <__sflush_r+0xae>
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000cdc:	682f      	ldr	r7, [r5, #0]
 8000cde:	6a21      	ldr	r1, [r4, #32]
 8000ce0:	602b      	str	r3, [r5, #0]
 8000ce2:	d030      	beq.n	8000d46 <__sflush_r+0x92>
 8000ce4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000ce6:	89a3      	ldrh	r3, [r4, #12]
 8000ce8:	0759      	lsls	r1, r3, #29
 8000cea:	d505      	bpl.n	8000cf8 <__sflush_r+0x44>
 8000cec:	6863      	ldr	r3, [r4, #4]
 8000cee:	1ad2      	subs	r2, r2, r3
 8000cf0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000cf2:	b10b      	cbz	r3, 8000cf8 <__sflush_r+0x44>
 8000cf4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000cf6:	1ad2      	subs	r2, r2, r3
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000cfc:	6a21      	ldr	r1, [r4, #32]
 8000cfe:	4628      	mov	r0, r5
 8000d00:	47b0      	blx	r6
 8000d02:	1c43      	adds	r3, r0, #1
 8000d04:	89a3      	ldrh	r3, [r4, #12]
 8000d06:	d106      	bne.n	8000d16 <__sflush_r+0x62>
 8000d08:	6829      	ldr	r1, [r5, #0]
 8000d0a:	291d      	cmp	r1, #29
 8000d0c:	d82b      	bhi.n	8000d66 <__sflush_r+0xb2>
 8000d0e:	4a2a      	ldr	r2, [pc, #168]	@ (8000db8 <__sflush_r+0x104>)
 8000d10:	40ca      	lsrs	r2, r1
 8000d12:	07d6      	lsls	r6, r2, #31
 8000d14:	d527      	bpl.n	8000d66 <__sflush_r+0xb2>
 8000d16:	2200      	movs	r2, #0
 8000d18:	6062      	str	r2, [r4, #4]
 8000d1a:	04d9      	lsls	r1, r3, #19
 8000d1c:	6922      	ldr	r2, [r4, #16]
 8000d1e:	6022      	str	r2, [r4, #0]
 8000d20:	d504      	bpl.n	8000d2c <__sflush_r+0x78>
 8000d22:	1c42      	adds	r2, r0, #1
 8000d24:	d101      	bne.n	8000d2a <__sflush_r+0x76>
 8000d26:	682b      	ldr	r3, [r5, #0]
 8000d28:	b903      	cbnz	r3, 8000d2c <__sflush_r+0x78>
 8000d2a:	6560      	str	r0, [r4, #84]	@ 0x54
 8000d2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000d2e:	602f      	str	r7, [r5, #0]
 8000d30:	b1b9      	cbz	r1, 8000d62 <__sflush_r+0xae>
 8000d32:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000d36:	4299      	cmp	r1, r3
 8000d38:	d002      	beq.n	8000d40 <__sflush_r+0x8c>
 8000d3a:	4628      	mov	r0, r5
 8000d3c:	f7ff fec2 	bl	8000ac4 <_free_r>
 8000d40:	2300      	movs	r3, #0
 8000d42:	6363      	str	r3, [r4, #52]	@ 0x34
 8000d44:	e00d      	b.n	8000d62 <__sflush_r+0xae>
 8000d46:	2301      	movs	r3, #1
 8000d48:	4628      	mov	r0, r5
 8000d4a:	47b0      	blx	r6
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	1c50      	adds	r0, r2, #1
 8000d50:	d1c9      	bne.n	8000ce6 <__sflush_r+0x32>
 8000d52:	682b      	ldr	r3, [r5, #0]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d0c6      	beq.n	8000ce6 <__sflush_r+0x32>
 8000d58:	2b1d      	cmp	r3, #29
 8000d5a:	d001      	beq.n	8000d60 <__sflush_r+0xac>
 8000d5c:	2b16      	cmp	r3, #22
 8000d5e:	d11e      	bne.n	8000d9e <__sflush_r+0xea>
 8000d60:	602f      	str	r7, [r5, #0]
 8000d62:	2000      	movs	r0, #0
 8000d64:	e022      	b.n	8000dac <__sflush_r+0xf8>
 8000d66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d6a:	b21b      	sxth	r3, r3
 8000d6c:	e01b      	b.n	8000da6 <__sflush_r+0xf2>
 8000d6e:	690f      	ldr	r7, [r1, #16]
 8000d70:	2f00      	cmp	r7, #0
 8000d72:	d0f6      	beq.n	8000d62 <__sflush_r+0xae>
 8000d74:	0793      	lsls	r3, r2, #30
 8000d76:	680e      	ldr	r6, [r1, #0]
 8000d78:	bf08      	it	eq
 8000d7a:	694b      	ldreq	r3, [r1, #20]
 8000d7c:	600f      	str	r7, [r1, #0]
 8000d7e:	bf18      	it	ne
 8000d80:	2300      	movne	r3, #0
 8000d82:	eba6 0807 	sub.w	r8, r6, r7
 8000d86:	608b      	str	r3, [r1, #8]
 8000d88:	f1b8 0f00 	cmp.w	r8, #0
 8000d8c:	dde9      	ble.n	8000d62 <__sflush_r+0xae>
 8000d8e:	6a21      	ldr	r1, [r4, #32]
 8000d90:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8000d92:	4643      	mov	r3, r8
 8000d94:	463a      	mov	r2, r7
 8000d96:	4628      	mov	r0, r5
 8000d98:	47b0      	blx	r6
 8000d9a:	2800      	cmp	r0, #0
 8000d9c:	dc08      	bgt.n	8000db0 <__sflush_r+0xfc>
 8000d9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000da2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000da6:	81a3      	strh	r3, [r4, #12]
 8000da8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000db0:	4407      	add	r7, r0
 8000db2:	eba8 0800 	sub.w	r8, r8, r0
 8000db6:	e7e7      	b.n	8000d88 <__sflush_r+0xd4>
 8000db8:	20400001 	.word	0x20400001

08000dbc <_fflush_r>:
 8000dbc:	b538      	push	{r3, r4, r5, lr}
 8000dbe:	690b      	ldr	r3, [r1, #16]
 8000dc0:	4605      	mov	r5, r0
 8000dc2:	460c      	mov	r4, r1
 8000dc4:	b913      	cbnz	r3, 8000dcc <_fflush_r+0x10>
 8000dc6:	2500      	movs	r5, #0
 8000dc8:	4628      	mov	r0, r5
 8000dca:	bd38      	pop	{r3, r4, r5, pc}
 8000dcc:	b118      	cbz	r0, 8000dd6 <_fflush_r+0x1a>
 8000dce:	6a03      	ldr	r3, [r0, #32]
 8000dd0:	b90b      	cbnz	r3, 8000dd6 <_fflush_r+0x1a>
 8000dd2:	f7ff fc8f 	bl	80006f4 <__sinit>
 8000dd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d0f3      	beq.n	8000dc6 <_fflush_r+0xa>
 8000dde:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8000de0:	07d0      	lsls	r0, r2, #31
 8000de2:	d404      	bmi.n	8000dee <_fflush_r+0x32>
 8000de4:	0599      	lsls	r1, r3, #22
 8000de6:	d402      	bmi.n	8000dee <_fflush_r+0x32>
 8000de8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000dea:	f7ff fe68 	bl	8000abe <__retarget_lock_acquire_recursive>
 8000dee:	4628      	mov	r0, r5
 8000df0:	4621      	mov	r1, r4
 8000df2:	f7ff ff5f 	bl	8000cb4 <__sflush_r>
 8000df6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000df8:	07da      	lsls	r2, r3, #31
 8000dfa:	4605      	mov	r5, r0
 8000dfc:	d4e4      	bmi.n	8000dc8 <_fflush_r+0xc>
 8000dfe:	89a3      	ldrh	r3, [r4, #12]
 8000e00:	059b      	lsls	r3, r3, #22
 8000e02:	d4e1      	bmi.n	8000dc8 <_fflush_r+0xc>
 8000e04:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000e06:	f7ff fe5b 	bl	8000ac0 <__retarget_lock_release_recursive>
 8000e0a:	e7dd      	b.n	8000dc8 <_fflush_r+0xc>

08000e0c <__swhatbuf_r>:
 8000e0c:	b570      	push	{r4, r5, r6, lr}
 8000e0e:	460c      	mov	r4, r1
 8000e10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000e14:	2900      	cmp	r1, #0
 8000e16:	b096      	sub	sp, #88	@ 0x58
 8000e18:	4615      	mov	r5, r2
 8000e1a:	461e      	mov	r6, r3
 8000e1c:	da0d      	bge.n	8000e3a <__swhatbuf_r+0x2e>
 8000e1e:	89a3      	ldrh	r3, [r4, #12]
 8000e20:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000e24:	f04f 0100 	mov.w	r1, #0
 8000e28:	bf14      	ite	ne
 8000e2a:	2340      	movne	r3, #64	@ 0x40
 8000e2c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8000e30:	2000      	movs	r0, #0
 8000e32:	6031      	str	r1, [r6, #0]
 8000e34:	602b      	str	r3, [r5, #0]
 8000e36:	b016      	add	sp, #88	@ 0x58
 8000e38:	bd70      	pop	{r4, r5, r6, pc}
 8000e3a:	466a      	mov	r2, sp
 8000e3c:	f000 f848 	bl	8000ed0 <_fstat_r>
 8000e40:	2800      	cmp	r0, #0
 8000e42:	dbec      	blt.n	8000e1e <__swhatbuf_r+0x12>
 8000e44:	9901      	ldr	r1, [sp, #4]
 8000e46:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8000e4a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8000e4e:	4259      	negs	r1, r3
 8000e50:	4159      	adcs	r1, r3
 8000e52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e56:	e7eb      	b.n	8000e30 <__swhatbuf_r+0x24>

08000e58 <__smakebuf_r>:
 8000e58:	898b      	ldrh	r3, [r1, #12]
 8000e5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000e5c:	079d      	lsls	r5, r3, #30
 8000e5e:	4606      	mov	r6, r0
 8000e60:	460c      	mov	r4, r1
 8000e62:	d507      	bpl.n	8000e74 <__smakebuf_r+0x1c>
 8000e64:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8000e68:	6023      	str	r3, [r4, #0]
 8000e6a:	6123      	str	r3, [r4, #16]
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	6163      	str	r3, [r4, #20]
 8000e70:	b003      	add	sp, #12
 8000e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e74:	ab01      	add	r3, sp, #4
 8000e76:	466a      	mov	r2, sp
 8000e78:	f7ff ffc8 	bl	8000e0c <__swhatbuf_r>
 8000e7c:	9f00      	ldr	r7, [sp, #0]
 8000e7e:	4605      	mov	r5, r0
 8000e80:	4639      	mov	r1, r7
 8000e82:	4630      	mov	r0, r6
 8000e84:	f7ff fe8a 	bl	8000b9c <_malloc_r>
 8000e88:	b948      	cbnz	r0, 8000e9e <__smakebuf_r+0x46>
 8000e8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e8e:	059a      	lsls	r2, r3, #22
 8000e90:	d4ee      	bmi.n	8000e70 <__smakebuf_r+0x18>
 8000e92:	f023 0303 	bic.w	r3, r3, #3
 8000e96:	f043 0302 	orr.w	r3, r3, #2
 8000e9a:	81a3      	strh	r3, [r4, #12]
 8000e9c:	e7e2      	b.n	8000e64 <__smakebuf_r+0xc>
 8000e9e:	89a3      	ldrh	r3, [r4, #12]
 8000ea0:	6020      	str	r0, [r4, #0]
 8000ea2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ea6:	81a3      	strh	r3, [r4, #12]
 8000ea8:	9b01      	ldr	r3, [sp, #4]
 8000eaa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8000eae:	b15b      	cbz	r3, 8000ec8 <__smakebuf_r+0x70>
 8000eb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	f000 f81d 	bl	8000ef4 <_isatty_r>
 8000eba:	b128      	cbz	r0, 8000ec8 <__smakebuf_r+0x70>
 8000ebc:	89a3      	ldrh	r3, [r4, #12]
 8000ebe:	f023 0303 	bic.w	r3, r3, #3
 8000ec2:	f043 0301 	orr.w	r3, r3, #1
 8000ec6:	81a3      	strh	r3, [r4, #12]
 8000ec8:	89a3      	ldrh	r3, [r4, #12]
 8000eca:	431d      	orrs	r5, r3
 8000ecc:	81a5      	strh	r5, [r4, #12]
 8000ece:	e7cf      	b.n	8000e70 <__smakebuf_r+0x18>

08000ed0 <_fstat_r>:
 8000ed0:	b538      	push	{r3, r4, r5, lr}
 8000ed2:	4d07      	ldr	r5, [pc, #28]	@ (8000ef0 <_fstat_r+0x20>)
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	4604      	mov	r4, r0
 8000ed8:	4608      	mov	r0, r1
 8000eda:	4611      	mov	r1, r2
 8000edc:	602b      	str	r3, [r5, #0]
 8000ede:	f7ff f9de 	bl	800029e <_fstat>
 8000ee2:	1c43      	adds	r3, r0, #1
 8000ee4:	d102      	bne.n	8000eec <_fstat_r+0x1c>
 8000ee6:	682b      	ldr	r3, [r5, #0]
 8000ee8:	b103      	cbz	r3, 8000eec <_fstat_r+0x1c>
 8000eea:	6023      	str	r3, [r4, #0]
 8000eec:	bd38      	pop	{r3, r4, r5, pc}
 8000eee:	bf00      	nop
 8000ef0:	200001c0 	.word	0x200001c0

08000ef4 <_isatty_r>:
 8000ef4:	b538      	push	{r3, r4, r5, lr}
 8000ef6:	4d06      	ldr	r5, [pc, #24]	@ (8000f10 <_isatty_r+0x1c>)
 8000ef8:	2300      	movs	r3, #0
 8000efa:	4604      	mov	r4, r0
 8000efc:	4608      	mov	r0, r1
 8000efe:	602b      	str	r3, [r5, #0]
 8000f00:	f7ff f9dd 	bl	80002be <_isatty>
 8000f04:	1c43      	adds	r3, r0, #1
 8000f06:	d102      	bne.n	8000f0e <_isatty_r+0x1a>
 8000f08:	682b      	ldr	r3, [r5, #0]
 8000f0a:	b103      	cbz	r3, 8000f0e <_isatty_r+0x1a>
 8000f0c:	6023      	str	r3, [r4, #0]
 8000f0e:	bd38      	pop	{r3, r4, r5, pc}
 8000f10:	200001c0 	.word	0x200001c0

08000f14 <_sbrk_r>:
 8000f14:	b538      	push	{r3, r4, r5, lr}
 8000f16:	4d06      	ldr	r5, [pc, #24]	@ (8000f30 <_sbrk_r+0x1c>)
 8000f18:	2300      	movs	r3, #0
 8000f1a:	4604      	mov	r4, r0
 8000f1c:	4608      	mov	r0, r1
 8000f1e:	602b      	str	r3, [r5, #0]
 8000f20:	f7ff f9e6 	bl	80002f0 <_sbrk>
 8000f24:	1c43      	adds	r3, r0, #1
 8000f26:	d102      	bne.n	8000f2e <_sbrk_r+0x1a>
 8000f28:	682b      	ldr	r3, [r5, #0]
 8000f2a:	b103      	cbz	r3, 8000f2e <_sbrk_r+0x1a>
 8000f2c:	6023      	str	r3, [r4, #0]
 8000f2e:	bd38      	pop	{r3, r4, r5, pc}
 8000f30:	200001c0 	.word	0x200001c0

08000f34 <_init>:
 8000f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f36:	bf00      	nop
 8000f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f3a:	bc08      	pop	{r3}
 8000f3c:	469e      	mov	lr, r3
 8000f3e:	4770      	bx	lr

08000f40 <_fini>:
 8000f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f42:	bf00      	nop
 8000f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000f46:	bc08      	pop	{r3}
 8000f48:	469e      	mov	lr, r3
 8000f4a:	4770      	bx	lr
