
2_system_drivers-UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000cec  0800018c  0800018c  0000118c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  08000e78  08000e78  00001e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000e8c  08000e8c  0000205c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08000e8c  08000e8c  0000205c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08000e8c  08000e8c  0000205c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e8c  08000e8c  00001e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000e90  08000e90  00001e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08000e94  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .sram2        00000000  10000000  10000000  0000205c  2**0
                  CONTENTS
 10 .bss          0000016c  2000005c  2000005c  0000205c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001c8  200001c8  0000205c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000205c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000102d  00000000  00000000  0000208c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000504  00000000  00000000  000030b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000170  00000000  00000000  000035c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000f7  00000000  00000000  00003730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e42b  00000000  00000000  00003827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002120  00000000  00000000  00021c52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a4724  00000000  00000000  00023d72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000c8496  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000aa0  00000000  00000000  000c84dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  000c8f7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	@ (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000005c 	.word	0x2000005c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08000e60 	.word	0x08000e60

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	@ (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	@ (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	@ (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000060 	.word	0x20000060
 80001c8:	08000e60 	.word	0x08000e60

080001cc <FPU_Enable>:

#include "fpu.h"
#include "stm32l4xx.h"

void FPU_Enable(void)
{
 80001cc:	b480      	push	{r7}
 80001ce:	af00      	add	r7, sp, #0
	/* Enable floating point unit: Enable CP10 and CPU11 full access*/
	SCB->CPACR |= (1 << 20)|(1 << 21)|(1 << 22)|(1 << 23);
 80001d0:	4b06      	ldr	r3, [pc, #24]	@ (80001ec <FPU_Enable+0x20>)
 80001d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80001d6:	4a05      	ldr	r2, [pc, #20]	@ (80001ec <FPU_Enable+0x20>)
 80001d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80001dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

}
 80001e0:	bf00      	nop
 80001e2:	46bd      	mov	sp, r7
 80001e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop
 80001ec:	e000ed00 	.word	0xe000ed00

080001f0 <main>:
#include "uart.h"
#include <stdio.h>


int main(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b082      	sub	sp, #8
 80001f4:	af00      	add	r7, sp, #0
	/* Enable FPU */
	FPU_Enable();
 80001f6:	f7ff ffe9 	bl	80001cc <FPU_Enable>

	/* Initialize UART */
	Debug_UART_Init();
 80001fa:	f000 f8c1 	bl	8000380 <Debug_UART_Init>

	while(1)
	{
		printf("Hello from STM32\r\n");
 80001fe:	4807      	ldr	r0, [pc, #28]	@ (800021c <main+0x2c>)
 8000200:	f000 fa9a 	bl	8000738 <puts>
		for(int i = 0; i < 9000; i++);
 8000204:	2300      	movs	r3, #0
 8000206:	607b      	str	r3, [r7, #4]
 8000208:	e002      	b.n	8000210 <main+0x20>
 800020a:	687b      	ldr	r3, [r7, #4]
 800020c:	3301      	adds	r3, #1
 800020e:	607b      	str	r3, [r7, #4]
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	f242 3227 	movw	r2, #8999	@ 0x2327
 8000216:	4293      	cmp	r3, r2
 8000218:	ddf7      	ble.n	800020a <main+0x1a>
		printf("Hello from STM32\r\n");
 800021a:	e7f0      	b.n	80001fe <main+0xe>
 800021c:	08000e78 	.word	0x08000e78

08000220 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b086      	sub	sp, #24
 8000224:	af00      	add	r7, sp, #0
 8000226:	60f8      	str	r0, [r7, #12]
 8000228:	60b9      	str	r1, [r7, #8]
 800022a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800022c:	2300      	movs	r3, #0
 800022e:	617b      	str	r3, [r7, #20]
 8000230:	e00a      	b.n	8000248 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000232:	f3af 8000 	nop.w
 8000236:	4601      	mov	r1, r0
 8000238:	68bb      	ldr	r3, [r7, #8]
 800023a:	1c5a      	adds	r2, r3, #1
 800023c:	60ba      	str	r2, [r7, #8]
 800023e:	b2ca      	uxtb	r2, r1
 8000240:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000242:	697b      	ldr	r3, [r7, #20]
 8000244:	3301      	adds	r3, #1
 8000246:	617b      	str	r3, [r7, #20]
 8000248:	697a      	ldr	r2, [r7, #20]
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	429a      	cmp	r2, r3
 800024e:	dbf0      	blt.n	8000232 <_read+0x12>
  }

  return len;
 8000250:	687b      	ldr	r3, [r7, #4]
}
 8000252:	4618      	mov	r0, r3
 8000254:	3718      	adds	r7, #24
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}

0800025a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800025a:	b580      	push	{r7, lr}
 800025c:	b086      	sub	sp, #24
 800025e:	af00      	add	r7, sp, #0
 8000260:	60f8      	str	r0, [r7, #12]
 8000262:	60b9      	str	r1, [r7, #8]
 8000264:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000266:	2300      	movs	r3, #0
 8000268:	617b      	str	r3, [r7, #20]
 800026a:	e009      	b.n	8000280 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800026c:	68bb      	ldr	r3, [r7, #8]
 800026e:	1c5a      	adds	r2, r3, #1
 8000270:	60ba      	str	r2, [r7, #8]
 8000272:	781b      	ldrb	r3, [r3, #0]
 8000274:	4618      	mov	r0, r3
 8000276:	f000 f877 	bl	8000368 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800027a:	697b      	ldr	r3, [r7, #20]
 800027c:	3301      	adds	r3, #1
 800027e:	617b      	str	r3, [r7, #20]
 8000280:	697a      	ldr	r2, [r7, #20]
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	429a      	cmp	r2, r3
 8000286:	dbf1      	blt.n	800026c <_write+0x12>
  }
  return len;
 8000288:	687b      	ldr	r3, [r7, #4]
}
 800028a:	4618      	mov	r0, r3
 800028c:	3718      	adds	r7, #24
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}

08000292 <_close>:

int _close(int file)
{
 8000292:	b480      	push	{r7}
 8000294:	b083      	sub	sp, #12
 8000296:	af00      	add	r7, sp, #0
 8000298:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800029a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800029e:	4618      	mov	r0, r3
 80002a0:	370c      	adds	r7, #12
 80002a2:	46bd      	mov	sp, r7
 80002a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a8:	4770      	bx	lr

080002aa <_fstat>:


int _fstat(int file, struct stat *st)
{
 80002aa:	b480      	push	{r7}
 80002ac:	b083      	sub	sp, #12
 80002ae:	af00      	add	r7, sp, #0
 80002b0:	6078      	str	r0, [r7, #4]
 80002b2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80002b4:	683b      	ldr	r3, [r7, #0]
 80002b6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80002ba:	605a      	str	r2, [r3, #4]
  return 0;
 80002bc:	2300      	movs	r3, #0
}
 80002be:	4618      	mov	r0, r3
 80002c0:	370c      	adds	r7, #12
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr

080002ca <_isatty>:

int _isatty(int file)
{
 80002ca:	b480      	push	{r7}
 80002cc:	b083      	sub	sp, #12
 80002ce:	af00      	add	r7, sp, #0
 80002d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80002d2:	2301      	movs	r3, #1
}
 80002d4:	4618      	mov	r0, r3
 80002d6:	370c      	adds	r7, #12
 80002d8:	46bd      	mov	sp, r7
 80002da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002de:	4770      	bx	lr

080002e0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b085      	sub	sp, #20
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	60f8      	str	r0, [r7, #12]
 80002e8:	60b9      	str	r1, [r7, #8]
 80002ea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80002ec:	2300      	movs	r3, #0
}
 80002ee:	4618      	mov	r0, r3
 80002f0:	3714      	adds	r7, #20
 80002f2:	46bd      	mov	sp, r7
 80002f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f8:	4770      	bx	lr
	...

080002fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b086      	sub	sp, #24
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000304:	4a14      	ldr	r2, [pc, #80]	@ (8000358 <_sbrk+0x5c>)
 8000306:	4b15      	ldr	r3, [pc, #84]	@ (800035c <_sbrk+0x60>)
 8000308:	1ad3      	subs	r3, r2, r3
 800030a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800030c:	697b      	ldr	r3, [r7, #20]
 800030e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000310:	4b13      	ldr	r3, [pc, #76]	@ (8000360 <_sbrk+0x64>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	2b00      	cmp	r3, #0
 8000316:	d102      	bne.n	800031e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000318:	4b11      	ldr	r3, [pc, #68]	@ (8000360 <_sbrk+0x64>)
 800031a:	4a12      	ldr	r2, [pc, #72]	@ (8000364 <_sbrk+0x68>)
 800031c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800031e:	4b10      	ldr	r3, [pc, #64]	@ (8000360 <_sbrk+0x64>)
 8000320:	681a      	ldr	r2, [r3, #0]
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	4413      	add	r3, r2
 8000326:	693a      	ldr	r2, [r7, #16]
 8000328:	429a      	cmp	r2, r3
 800032a:	d207      	bcs.n	800033c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800032c:	f000 fb32 	bl	8000994 <__errno>
 8000330:	4603      	mov	r3, r0
 8000332:	220c      	movs	r2, #12
 8000334:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000336:	f04f 33ff 	mov.w	r3, #4294967295
 800033a:	e009      	b.n	8000350 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800033c:	4b08      	ldr	r3, [pc, #32]	@ (8000360 <_sbrk+0x64>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000342:	4b07      	ldr	r3, [pc, #28]	@ (8000360 <_sbrk+0x64>)
 8000344:	681a      	ldr	r2, [r3, #0]
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	4413      	add	r3, r2
 800034a:	4a05      	ldr	r2, [pc, #20]	@ (8000360 <_sbrk+0x64>)
 800034c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800034e:	68fb      	ldr	r3, [r7, #12]
}
 8000350:	4618      	mov	r0, r3
 8000352:	3718      	adds	r7, #24
 8000354:	46bd      	mov	sp, r7
 8000356:	bd80      	pop	{r7, pc}
 8000358:	20018000 	.word	0x20018000
 800035c:	00000400 	.word	0x00000400
 8000360:	20000078 	.word	0x20000078
 8000364:	200001c8 	.word	0x200001c8

08000368 <__io_putchar>:
static uint16_t UART_Compute_Baudrate(uint32_t peripheral_clk, uint32_t baudrate);
static void UART_Set_Baudrate(uint32_t peripheral_clk, uint32_t baudrate);
static void UART_Write(int ch);

int __io_putchar(int ch)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
	UART_Write(ch);
 8000370:	6878      	ldr	r0, [r7, #4]
 8000372:	f000 f85d 	bl	8000430 <UART_Write>
	return ch;
 8000376:	687b      	ldr	r3, [r7, #4]
}
 8000378:	4618      	mov	r0, r3
 800037a:	3708      	adds	r7, #8
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}

08000380 <Debug_UART_Init>:

void Debug_UART_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
	/* Enable clock access to GPIOA */
	RCC->AHB2ENR |= GPIOAEN;
 8000384:	4b27      	ldr	r3, [pc, #156]	@ (8000424 <Debug_UART_Init+0xa4>)
 8000386:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000388:	4a26      	ldr	r2, [pc, #152]	@ (8000424 <Debug_UART_Init+0xa4>)
 800038a:	f043 0301 	orr.w	r3, r3, #1
 800038e:	64d3      	str	r3, [r2, #76]	@ 0x4c

	/* Set the mode of PA2 to alternate function mode */
	GPIOA->MODER &= ~(1U << 4U);
 8000390:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 800039a:	f023 0310 	bic.w	r3, r3, #16
 800039e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U << 5U);
 80003a0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80003aa:	f043 0320 	orr.w	r3, r3, #32
 80003ae:	6013      	str	r3, [r2, #0]

	/* Set alternate function type to AF7 (UART2_TX) */
	GPIOA->AFR[0] |= (1U << 8U);
 80003b0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003b4:	6a1b      	ldr	r3, [r3, #32]
 80003b6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80003ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003be:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 9U);
 80003c0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003c4:	6a1b      	ldr	r3, [r3, #32]
 80003c6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80003ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80003ce:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U << 10U);
 80003d0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003d4:	6a1b      	ldr	r3, [r3, #32]
 80003d6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80003da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80003de:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U << 11U);
 80003e0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80003e4:	6a1b      	ldr	r3, [r3, #32]
 80003e6:	f04f 4290 	mov.w	r2, #1207959552	@ 0x48000000
 80003ea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80003ee:	6213      	str	r3, [r2, #32]

	/* Enable clock access to UART2 */
	RCC->APB1ENR1 |= UART2EN;
 80003f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000424 <Debug_UART_Init+0xa4>)
 80003f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80003f4:	4a0b      	ldr	r2, [pc, #44]	@ (8000424 <Debug_UART_Init+0xa4>)
 80003f6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80003fa:	6593      	str	r3, [r2, #88]	@ 0x58

	/* Configure UART baudrate */
	UART_Set_Baudrate(APB1_CLK, DEBUG_UART_BAUDRATE);
 80003fc:	f44f 31e1 	mov.w	r1, #115200	@ 0x1c200
 8000400:	4809      	ldr	r0, [pc, #36]	@ (8000428 <Debug_UART_Init+0xa8>)
 8000402:	f000 f843 	bl	800048c <UART_Set_Baudrate>

	/* Configure transfer direction */
	USART2->CR1 |= CR1_TE;
 8000406:	4b09      	ldr	r3, [pc, #36]	@ (800042c <Debug_UART_Init+0xac>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	4a08      	ldr	r2, [pc, #32]	@ (800042c <Debug_UART_Init+0xac>)
 800040c:	f043 0308 	orr.w	r3, r3, #8
 8000410:	6013      	str	r3, [r2, #0]

	/* Enable UART mode */
	USART2->CR1 |= CR1_UE;
 8000412:	4b06      	ldr	r3, [pc, #24]	@ (800042c <Debug_UART_Init+0xac>)
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	4a05      	ldr	r2, [pc, #20]	@ (800042c <Debug_UART_Init+0xac>)
 8000418:	f043 0301 	orr.w	r3, r3, #1
 800041c:	6013      	str	r3, [r2, #0]
}
 800041e:	bf00      	nop
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	40021000 	.word	0x40021000
 8000428:	003d0900 	.word	0x003d0900
 800042c:	40004400 	.word	0x40004400

08000430 <UART_Write>:

static void UART_Write(int ch)
{
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
	/* Make sure transmit data register is empty */
	while(!(USART2->ISR & ISR_TXE));
 8000438:	bf00      	nop
 800043a:	4b09      	ldr	r3, [pc, #36]	@ (8000460 <UART_Write+0x30>)
 800043c:	69db      	ldr	r3, [r3, #28]
 800043e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000442:	2b00      	cmp	r3, #0
 8000444:	d0f9      	beq.n	800043a <UART_Write+0xa>

	/* Write to transmit data register */
	USART2->TDR = (ch & 0xFF);
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	b29a      	uxth	r2, r3
 800044a:	4b05      	ldr	r3, [pc, #20]	@ (8000460 <UART_Write+0x30>)
 800044c:	b2d2      	uxtb	r2, r2
 800044e:	b292      	uxth	r2, r2
 8000450:	851a      	strh	r2, [r3, #40]	@ 0x28
}
 8000452:	bf00      	nop
 8000454:	370c      	adds	r7, #12
 8000456:	46bd      	mov	sp, r7
 8000458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045c:	4770      	bx	lr
 800045e:	bf00      	nop
 8000460:	40004400 	.word	0x40004400

08000464 <UART_Compute_Baudrate>:

static uint16_t UART_Compute_Baudrate(uint32_t peripheral_clk, uint32_t baudrate)
{
 8000464:	b480      	push	{r7}
 8000466:	b083      	sub	sp, #12
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
 800046c:	6039      	str	r1, [r7, #0]
	return ( ( peripheral_clk + ( baudrate / 2U ) ) / baudrate );
 800046e:	683b      	ldr	r3, [r7, #0]
 8000470:	085a      	lsrs	r2, r3, #1
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	441a      	add	r2, r3
 8000476:	683b      	ldr	r3, [r7, #0]
 8000478:	fbb2 f3f3 	udiv	r3, r2, r3
 800047c:	b29b      	uxth	r3, r3
}
 800047e:	4618      	mov	r0, r3
 8000480:	370c      	adds	r7, #12
 8000482:	46bd      	mov	sp, r7
 8000484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000488:	4770      	bx	lr
	...

0800048c <UART_Set_Baudrate>:

static void UART_Set_Baudrate(uint32_t peripheral_clk, uint32_t baudrate)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b082      	sub	sp, #8
 8000490:	af00      	add	r7, sp, #0
 8000492:	6078      	str	r0, [r7, #4]
 8000494:	6039      	str	r1, [r7, #0]
	USART2->BRR = UART_Compute_Baudrate(peripheral_clk, baudrate);
 8000496:	6839      	ldr	r1, [r7, #0]
 8000498:	6878      	ldr	r0, [r7, #4]
 800049a:	f7ff ffe3 	bl	8000464 <UART_Compute_Baudrate>
 800049e:	4603      	mov	r3, r0
 80004a0:	461a      	mov	r2, r3
 80004a2:	4b03      	ldr	r3, [pc, #12]	@ (80004b0 <UART_Set_Baudrate+0x24>)
 80004a4:	60da      	str	r2, [r3, #12]
}
 80004a6:	bf00      	nop
 80004a8:	3708      	adds	r7, #8
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	bf00      	nop
 80004b0:	40004400 	.word	0x40004400

080004b4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004b4:	480d      	ldr	r0, [pc, #52]	@ (80004ec <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004b6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004b8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004bc:	480c      	ldr	r0, [pc, #48]	@ (80004f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80004be:	490d      	ldr	r1, [pc, #52]	@ (80004f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80004c0:	4a0d      	ldr	r2, [pc, #52]	@ (80004f8 <LoopForever+0xe>)
  movs r3, #0
 80004c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004c4:	e002      	b.n	80004cc <LoopCopyDataInit>

080004c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ca:	3304      	adds	r3, #4

080004cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004d0:	d3f9      	bcc.n	80004c6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004d2:	4a0a      	ldr	r2, [pc, #40]	@ (80004fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80004d4:	4c0a      	ldr	r4, [pc, #40]	@ (8000500 <LoopForever+0x16>)
  movs r3, #0
 80004d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004d8:	e001      	b.n	80004de <LoopFillZerobss>

080004da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004dc:	3204      	adds	r2, #4

080004de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004e0:	d3fb      	bcc.n	80004da <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80004e2:	f000 fa5d 	bl	80009a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80004e6:	f7ff fe83 	bl	80001f0 <main>

080004ea <LoopForever>:

LoopForever:
  b LoopForever
 80004ea:	e7fe      	b.n	80004ea <LoopForever>
  ldr   r0, =_estack
 80004ec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80004f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004f4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80004f8:	08000e94 	.word	0x08000e94
  ldr r2, =_sbss
 80004fc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000500:	200001c8 	.word	0x200001c8

08000504 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000504:	e7fe      	b.n	8000504 <ADC1_2_IRQHandler>
	...

08000508 <std>:
 8000508:	2300      	movs	r3, #0
 800050a:	b510      	push	{r4, lr}
 800050c:	4604      	mov	r4, r0
 800050e:	e9c0 3300 	strd	r3, r3, [r0]
 8000512:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000516:	6083      	str	r3, [r0, #8]
 8000518:	8181      	strh	r1, [r0, #12]
 800051a:	6643      	str	r3, [r0, #100]	@ 0x64
 800051c:	81c2      	strh	r2, [r0, #14]
 800051e:	6183      	str	r3, [r0, #24]
 8000520:	4619      	mov	r1, r3
 8000522:	2208      	movs	r2, #8
 8000524:	305c      	adds	r0, #92	@ 0x5c
 8000526:	f000 f9e7 	bl	80008f8 <memset>
 800052a:	4b0d      	ldr	r3, [pc, #52]	@ (8000560 <std+0x58>)
 800052c:	6263      	str	r3, [r4, #36]	@ 0x24
 800052e:	4b0d      	ldr	r3, [pc, #52]	@ (8000564 <std+0x5c>)
 8000530:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000532:	4b0d      	ldr	r3, [pc, #52]	@ (8000568 <std+0x60>)
 8000534:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8000536:	4b0d      	ldr	r3, [pc, #52]	@ (800056c <std+0x64>)
 8000538:	6323      	str	r3, [r4, #48]	@ 0x30
 800053a:	4b0d      	ldr	r3, [pc, #52]	@ (8000570 <std+0x68>)
 800053c:	6224      	str	r4, [r4, #32]
 800053e:	429c      	cmp	r4, r3
 8000540:	d006      	beq.n	8000550 <std+0x48>
 8000542:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8000546:	4294      	cmp	r4, r2
 8000548:	d002      	beq.n	8000550 <std+0x48>
 800054a:	33d0      	adds	r3, #208	@ 0xd0
 800054c:	429c      	cmp	r4, r3
 800054e:	d105      	bne.n	800055c <std+0x54>
 8000550:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000558:	f000 ba46 	b.w	80009e8 <__retarget_lock_init_recursive>
 800055c:	bd10      	pop	{r4, pc}
 800055e:	bf00      	nop
 8000560:	08000749 	.word	0x08000749
 8000564:	0800076b 	.word	0x0800076b
 8000568:	080007a3 	.word	0x080007a3
 800056c:	080007c7 	.word	0x080007c7
 8000570:	2000007c 	.word	0x2000007c

08000574 <stdio_exit_handler>:
 8000574:	4a02      	ldr	r2, [pc, #8]	@ (8000580 <stdio_exit_handler+0xc>)
 8000576:	4903      	ldr	r1, [pc, #12]	@ (8000584 <stdio_exit_handler+0x10>)
 8000578:	4803      	ldr	r0, [pc, #12]	@ (8000588 <stdio_exit_handler+0x14>)
 800057a:	f000 b869 	b.w	8000650 <_fwalk_sglue>
 800057e:	bf00      	nop
 8000580:	20000000 	.word	0x20000000
 8000584:	08000ce9 	.word	0x08000ce9
 8000588:	20000010 	.word	0x20000010

0800058c <cleanup_stdio>:
 800058c:	6841      	ldr	r1, [r0, #4]
 800058e:	4b0c      	ldr	r3, [pc, #48]	@ (80005c0 <cleanup_stdio+0x34>)
 8000590:	4299      	cmp	r1, r3
 8000592:	b510      	push	{r4, lr}
 8000594:	4604      	mov	r4, r0
 8000596:	d001      	beq.n	800059c <cleanup_stdio+0x10>
 8000598:	f000 fba6 	bl	8000ce8 <_fflush_r>
 800059c:	68a1      	ldr	r1, [r4, #8]
 800059e:	4b09      	ldr	r3, [pc, #36]	@ (80005c4 <cleanup_stdio+0x38>)
 80005a0:	4299      	cmp	r1, r3
 80005a2:	d002      	beq.n	80005aa <cleanup_stdio+0x1e>
 80005a4:	4620      	mov	r0, r4
 80005a6:	f000 fb9f 	bl	8000ce8 <_fflush_r>
 80005aa:	68e1      	ldr	r1, [r4, #12]
 80005ac:	4b06      	ldr	r3, [pc, #24]	@ (80005c8 <cleanup_stdio+0x3c>)
 80005ae:	4299      	cmp	r1, r3
 80005b0:	d004      	beq.n	80005bc <cleanup_stdio+0x30>
 80005b2:	4620      	mov	r0, r4
 80005b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005b8:	f000 bb96 	b.w	8000ce8 <_fflush_r>
 80005bc:	bd10      	pop	{r4, pc}
 80005be:	bf00      	nop
 80005c0:	2000007c 	.word	0x2000007c
 80005c4:	200000e4 	.word	0x200000e4
 80005c8:	2000014c 	.word	0x2000014c

080005cc <global_stdio_init.part.0>:
 80005cc:	b510      	push	{r4, lr}
 80005ce:	4b0b      	ldr	r3, [pc, #44]	@ (80005fc <global_stdio_init.part.0+0x30>)
 80005d0:	4c0b      	ldr	r4, [pc, #44]	@ (8000600 <global_stdio_init.part.0+0x34>)
 80005d2:	4a0c      	ldr	r2, [pc, #48]	@ (8000604 <global_stdio_init.part.0+0x38>)
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	4620      	mov	r0, r4
 80005d8:	2200      	movs	r2, #0
 80005da:	2104      	movs	r1, #4
 80005dc:	f7ff ff94 	bl	8000508 <std>
 80005e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80005e4:	2201      	movs	r2, #1
 80005e6:	2109      	movs	r1, #9
 80005e8:	f7ff ff8e 	bl	8000508 <std>
 80005ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80005f0:	2202      	movs	r2, #2
 80005f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80005f6:	2112      	movs	r1, #18
 80005f8:	f7ff bf86 	b.w	8000508 <std>
 80005fc:	200001b4 	.word	0x200001b4
 8000600:	2000007c 	.word	0x2000007c
 8000604:	08000575 	.word	0x08000575

08000608 <__sfp_lock_acquire>:
 8000608:	4801      	ldr	r0, [pc, #4]	@ (8000610 <__sfp_lock_acquire+0x8>)
 800060a:	f000 b9ee 	b.w	80009ea <__retarget_lock_acquire_recursive>
 800060e:	bf00      	nop
 8000610:	200001bd 	.word	0x200001bd

08000614 <__sfp_lock_release>:
 8000614:	4801      	ldr	r0, [pc, #4]	@ (800061c <__sfp_lock_release+0x8>)
 8000616:	f000 b9e9 	b.w	80009ec <__retarget_lock_release_recursive>
 800061a:	bf00      	nop
 800061c:	200001bd 	.word	0x200001bd

08000620 <__sinit>:
 8000620:	b510      	push	{r4, lr}
 8000622:	4604      	mov	r4, r0
 8000624:	f7ff fff0 	bl	8000608 <__sfp_lock_acquire>
 8000628:	6a23      	ldr	r3, [r4, #32]
 800062a:	b11b      	cbz	r3, 8000634 <__sinit+0x14>
 800062c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000630:	f7ff bff0 	b.w	8000614 <__sfp_lock_release>
 8000634:	4b04      	ldr	r3, [pc, #16]	@ (8000648 <__sinit+0x28>)
 8000636:	6223      	str	r3, [r4, #32]
 8000638:	4b04      	ldr	r3, [pc, #16]	@ (800064c <__sinit+0x2c>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d1f5      	bne.n	800062c <__sinit+0xc>
 8000640:	f7ff ffc4 	bl	80005cc <global_stdio_init.part.0>
 8000644:	e7f2      	b.n	800062c <__sinit+0xc>
 8000646:	bf00      	nop
 8000648:	0800058d 	.word	0x0800058d
 800064c:	200001b4 	.word	0x200001b4

08000650 <_fwalk_sglue>:
 8000650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000654:	4607      	mov	r7, r0
 8000656:	4688      	mov	r8, r1
 8000658:	4614      	mov	r4, r2
 800065a:	2600      	movs	r6, #0
 800065c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000660:	f1b9 0901 	subs.w	r9, r9, #1
 8000664:	d505      	bpl.n	8000672 <_fwalk_sglue+0x22>
 8000666:	6824      	ldr	r4, [r4, #0]
 8000668:	2c00      	cmp	r4, #0
 800066a:	d1f7      	bne.n	800065c <_fwalk_sglue+0xc>
 800066c:	4630      	mov	r0, r6
 800066e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000672:	89ab      	ldrh	r3, [r5, #12]
 8000674:	2b01      	cmp	r3, #1
 8000676:	d907      	bls.n	8000688 <_fwalk_sglue+0x38>
 8000678:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800067c:	3301      	adds	r3, #1
 800067e:	d003      	beq.n	8000688 <_fwalk_sglue+0x38>
 8000680:	4629      	mov	r1, r5
 8000682:	4638      	mov	r0, r7
 8000684:	47c0      	blx	r8
 8000686:	4306      	orrs	r6, r0
 8000688:	3568      	adds	r5, #104	@ 0x68
 800068a:	e7e9      	b.n	8000660 <_fwalk_sglue+0x10>

0800068c <_puts_r>:
 800068c:	6a03      	ldr	r3, [r0, #32]
 800068e:	b570      	push	{r4, r5, r6, lr}
 8000690:	6884      	ldr	r4, [r0, #8]
 8000692:	4605      	mov	r5, r0
 8000694:	460e      	mov	r6, r1
 8000696:	b90b      	cbnz	r3, 800069c <_puts_r+0x10>
 8000698:	f7ff ffc2 	bl	8000620 <__sinit>
 800069c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800069e:	07db      	lsls	r3, r3, #31
 80006a0:	d405      	bmi.n	80006ae <_puts_r+0x22>
 80006a2:	89a3      	ldrh	r3, [r4, #12]
 80006a4:	0598      	lsls	r0, r3, #22
 80006a6:	d402      	bmi.n	80006ae <_puts_r+0x22>
 80006a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80006aa:	f000 f99e 	bl	80009ea <__retarget_lock_acquire_recursive>
 80006ae:	89a3      	ldrh	r3, [r4, #12]
 80006b0:	0719      	lsls	r1, r3, #28
 80006b2:	d502      	bpl.n	80006ba <_puts_r+0x2e>
 80006b4:	6923      	ldr	r3, [r4, #16]
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d135      	bne.n	8000726 <_puts_r+0x9a>
 80006ba:	4621      	mov	r1, r4
 80006bc:	4628      	mov	r0, r5
 80006be:	f000 f8c5 	bl	800084c <__swsetup_r>
 80006c2:	b380      	cbz	r0, 8000726 <_puts_r+0x9a>
 80006c4:	f04f 35ff 	mov.w	r5, #4294967295
 80006c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80006ca:	07da      	lsls	r2, r3, #31
 80006cc:	d405      	bmi.n	80006da <_puts_r+0x4e>
 80006ce:	89a3      	ldrh	r3, [r4, #12]
 80006d0:	059b      	lsls	r3, r3, #22
 80006d2:	d402      	bmi.n	80006da <_puts_r+0x4e>
 80006d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80006d6:	f000 f989 	bl	80009ec <__retarget_lock_release_recursive>
 80006da:	4628      	mov	r0, r5
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	2b00      	cmp	r3, #0
 80006e0:	da04      	bge.n	80006ec <_puts_r+0x60>
 80006e2:	69a2      	ldr	r2, [r4, #24]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	dc17      	bgt.n	8000718 <_puts_r+0x8c>
 80006e8:	290a      	cmp	r1, #10
 80006ea:	d015      	beq.n	8000718 <_puts_r+0x8c>
 80006ec:	6823      	ldr	r3, [r4, #0]
 80006ee:	1c5a      	adds	r2, r3, #1
 80006f0:	6022      	str	r2, [r4, #0]
 80006f2:	7019      	strb	r1, [r3, #0]
 80006f4:	68a3      	ldr	r3, [r4, #8]
 80006f6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80006fa:	3b01      	subs	r3, #1
 80006fc:	60a3      	str	r3, [r4, #8]
 80006fe:	2900      	cmp	r1, #0
 8000700:	d1ed      	bne.n	80006de <_puts_r+0x52>
 8000702:	2b00      	cmp	r3, #0
 8000704:	da11      	bge.n	800072a <_puts_r+0x9e>
 8000706:	4622      	mov	r2, r4
 8000708:	210a      	movs	r1, #10
 800070a:	4628      	mov	r0, r5
 800070c:	f000 f85f 	bl	80007ce <__swbuf_r>
 8000710:	3001      	adds	r0, #1
 8000712:	d0d7      	beq.n	80006c4 <_puts_r+0x38>
 8000714:	250a      	movs	r5, #10
 8000716:	e7d7      	b.n	80006c8 <_puts_r+0x3c>
 8000718:	4622      	mov	r2, r4
 800071a:	4628      	mov	r0, r5
 800071c:	f000 f857 	bl	80007ce <__swbuf_r>
 8000720:	3001      	adds	r0, #1
 8000722:	d1e7      	bne.n	80006f4 <_puts_r+0x68>
 8000724:	e7ce      	b.n	80006c4 <_puts_r+0x38>
 8000726:	3e01      	subs	r6, #1
 8000728:	e7e4      	b.n	80006f4 <_puts_r+0x68>
 800072a:	6823      	ldr	r3, [r4, #0]
 800072c:	1c5a      	adds	r2, r3, #1
 800072e:	6022      	str	r2, [r4, #0]
 8000730:	220a      	movs	r2, #10
 8000732:	701a      	strb	r2, [r3, #0]
 8000734:	e7ee      	b.n	8000714 <_puts_r+0x88>
	...

08000738 <puts>:
 8000738:	4b02      	ldr	r3, [pc, #8]	@ (8000744 <puts+0xc>)
 800073a:	4601      	mov	r1, r0
 800073c:	6818      	ldr	r0, [r3, #0]
 800073e:	f7ff bfa5 	b.w	800068c <_puts_r>
 8000742:	bf00      	nop
 8000744:	2000000c 	.word	0x2000000c

08000748 <__sread>:
 8000748:	b510      	push	{r4, lr}
 800074a:	460c      	mov	r4, r1
 800074c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000750:	f000 f8fc 	bl	800094c <_read_r>
 8000754:	2800      	cmp	r0, #0
 8000756:	bfab      	itete	ge
 8000758:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800075a:	89a3      	ldrhlt	r3, [r4, #12]
 800075c:	181b      	addge	r3, r3, r0
 800075e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8000762:	bfac      	ite	ge
 8000764:	6563      	strge	r3, [r4, #84]	@ 0x54
 8000766:	81a3      	strhlt	r3, [r4, #12]
 8000768:	bd10      	pop	{r4, pc}

0800076a <__swrite>:
 800076a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800076e:	461f      	mov	r7, r3
 8000770:	898b      	ldrh	r3, [r1, #12]
 8000772:	05db      	lsls	r3, r3, #23
 8000774:	4605      	mov	r5, r0
 8000776:	460c      	mov	r4, r1
 8000778:	4616      	mov	r6, r2
 800077a:	d505      	bpl.n	8000788 <__swrite+0x1e>
 800077c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000780:	2302      	movs	r3, #2
 8000782:	2200      	movs	r2, #0
 8000784:	f000 f8d0 	bl	8000928 <_lseek_r>
 8000788:	89a3      	ldrh	r3, [r4, #12]
 800078a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800078e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000792:	81a3      	strh	r3, [r4, #12]
 8000794:	4632      	mov	r2, r6
 8000796:	463b      	mov	r3, r7
 8000798:	4628      	mov	r0, r5
 800079a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800079e:	f000 b8e7 	b.w	8000970 <_write_r>

080007a2 <__sseek>:
 80007a2:	b510      	push	{r4, lr}
 80007a4:	460c      	mov	r4, r1
 80007a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007aa:	f000 f8bd 	bl	8000928 <_lseek_r>
 80007ae:	1c43      	adds	r3, r0, #1
 80007b0:	89a3      	ldrh	r3, [r4, #12]
 80007b2:	bf15      	itete	ne
 80007b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80007b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80007ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80007be:	81a3      	strheq	r3, [r4, #12]
 80007c0:	bf18      	it	ne
 80007c2:	81a3      	strhne	r3, [r4, #12]
 80007c4:	bd10      	pop	{r4, pc}

080007c6 <__sclose>:
 80007c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80007ca:	f000 b89d 	b.w	8000908 <_close_r>

080007ce <__swbuf_r>:
 80007ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007d0:	460e      	mov	r6, r1
 80007d2:	4614      	mov	r4, r2
 80007d4:	4605      	mov	r5, r0
 80007d6:	b118      	cbz	r0, 80007e0 <__swbuf_r+0x12>
 80007d8:	6a03      	ldr	r3, [r0, #32]
 80007da:	b90b      	cbnz	r3, 80007e0 <__swbuf_r+0x12>
 80007dc:	f7ff ff20 	bl	8000620 <__sinit>
 80007e0:	69a3      	ldr	r3, [r4, #24]
 80007e2:	60a3      	str	r3, [r4, #8]
 80007e4:	89a3      	ldrh	r3, [r4, #12]
 80007e6:	071a      	lsls	r2, r3, #28
 80007e8:	d501      	bpl.n	80007ee <__swbuf_r+0x20>
 80007ea:	6923      	ldr	r3, [r4, #16]
 80007ec:	b943      	cbnz	r3, 8000800 <__swbuf_r+0x32>
 80007ee:	4621      	mov	r1, r4
 80007f0:	4628      	mov	r0, r5
 80007f2:	f000 f82b 	bl	800084c <__swsetup_r>
 80007f6:	b118      	cbz	r0, 8000800 <__swbuf_r+0x32>
 80007f8:	f04f 37ff 	mov.w	r7, #4294967295
 80007fc:	4638      	mov	r0, r7
 80007fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000800:	6823      	ldr	r3, [r4, #0]
 8000802:	6922      	ldr	r2, [r4, #16]
 8000804:	1a98      	subs	r0, r3, r2
 8000806:	6963      	ldr	r3, [r4, #20]
 8000808:	b2f6      	uxtb	r6, r6
 800080a:	4283      	cmp	r3, r0
 800080c:	4637      	mov	r7, r6
 800080e:	dc05      	bgt.n	800081c <__swbuf_r+0x4e>
 8000810:	4621      	mov	r1, r4
 8000812:	4628      	mov	r0, r5
 8000814:	f000 fa68 	bl	8000ce8 <_fflush_r>
 8000818:	2800      	cmp	r0, #0
 800081a:	d1ed      	bne.n	80007f8 <__swbuf_r+0x2a>
 800081c:	68a3      	ldr	r3, [r4, #8]
 800081e:	3b01      	subs	r3, #1
 8000820:	60a3      	str	r3, [r4, #8]
 8000822:	6823      	ldr	r3, [r4, #0]
 8000824:	1c5a      	adds	r2, r3, #1
 8000826:	6022      	str	r2, [r4, #0]
 8000828:	701e      	strb	r6, [r3, #0]
 800082a:	6962      	ldr	r2, [r4, #20]
 800082c:	1c43      	adds	r3, r0, #1
 800082e:	429a      	cmp	r2, r3
 8000830:	d004      	beq.n	800083c <__swbuf_r+0x6e>
 8000832:	89a3      	ldrh	r3, [r4, #12]
 8000834:	07db      	lsls	r3, r3, #31
 8000836:	d5e1      	bpl.n	80007fc <__swbuf_r+0x2e>
 8000838:	2e0a      	cmp	r6, #10
 800083a:	d1df      	bne.n	80007fc <__swbuf_r+0x2e>
 800083c:	4621      	mov	r1, r4
 800083e:	4628      	mov	r0, r5
 8000840:	f000 fa52 	bl	8000ce8 <_fflush_r>
 8000844:	2800      	cmp	r0, #0
 8000846:	d0d9      	beq.n	80007fc <__swbuf_r+0x2e>
 8000848:	e7d6      	b.n	80007f8 <__swbuf_r+0x2a>
	...

0800084c <__swsetup_r>:
 800084c:	b538      	push	{r3, r4, r5, lr}
 800084e:	4b29      	ldr	r3, [pc, #164]	@ (80008f4 <__swsetup_r+0xa8>)
 8000850:	4605      	mov	r5, r0
 8000852:	6818      	ldr	r0, [r3, #0]
 8000854:	460c      	mov	r4, r1
 8000856:	b118      	cbz	r0, 8000860 <__swsetup_r+0x14>
 8000858:	6a03      	ldr	r3, [r0, #32]
 800085a:	b90b      	cbnz	r3, 8000860 <__swsetup_r+0x14>
 800085c:	f7ff fee0 	bl	8000620 <__sinit>
 8000860:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000864:	0719      	lsls	r1, r3, #28
 8000866:	d422      	bmi.n	80008ae <__swsetup_r+0x62>
 8000868:	06da      	lsls	r2, r3, #27
 800086a:	d407      	bmi.n	800087c <__swsetup_r+0x30>
 800086c:	2209      	movs	r2, #9
 800086e:	602a      	str	r2, [r5, #0]
 8000870:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000874:	81a3      	strh	r3, [r4, #12]
 8000876:	f04f 30ff 	mov.w	r0, #4294967295
 800087a:	e033      	b.n	80008e4 <__swsetup_r+0x98>
 800087c:	0758      	lsls	r0, r3, #29
 800087e:	d512      	bpl.n	80008a6 <__swsetup_r+0x5a>
 8000880:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000882:	b141      	cbz	r1, 8000896 <__swsetup_r+0x4a>
 8000884:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000888:	4299      	cmp	r1, r3
 800088a:	d002      	beq.n	8000892 <__swsetup_r+0x46>
 800088c:	4628      	mov	r0, r5
 800088e:	f000 f8af 	bl	80009f0 <_free_r>
 8000892:	2300      	movs	r3, #0
 8000894:	6363      	str	r3, [r4, #52]	@ 0x34
 8000896:	89a3      	ldrh	r3, [r4, #12]
 8000898:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800089c:	81a3      	strh	r3, [r4, #12]
 800089e:	2300      	movs	r3, #0
 80008a0:	6063      	str	r3, [r4, #4]
 80008a2:	6923      	ldr	r3, [r4, #16]
 80008a4:	6023      	str	r3, [r4, #0]
 80008a6:	89a3      	ldrh	r3, [r4, #12]
 80008a8:	f043 0308 	orr.w	r3, r3, #8
 80008ac:	81a3      	strh	r3, [r4, #12]
 80008ae:	6923      	ldr	r3, [r4, #16]
 80008b0:	b94b      	cbnz	r3, 80008c6 <__swsetup_r+0x7a>
 80008b2:	89a3      	ldrh	r3, [r4, #12]
 80008b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80008b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80008bc:	d003      	beq.n	80008c6 <__swsetup_r+0x7a>
 80008be:	4621      	mov	r1, r4
 80008c0:	4628      	mov	r0, r5
 80008c2:	f000 fa5f 	bl	8000d84 <__smakebuf_r>
 80008c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80008ca:	f013 0201 	ands.w	r2, r3, #1
 80008ce:	d00a      	beq.n	80008e6 <__swsetup_r+0x9a>
 80008d0:	2200      	movs	r2, #0
 80008d2:	60a2      	str	r2, [r4, #8]
 80008d4:	6962      	ldr	r2, [r4, #20]
 80008d6:	4252      	negs	r2, r2
 80008d8:	61a2      	str	r2, [r4, #24]
 80008da:	6922      	ldr	r2, [r4, #16]
 80008dc:	b942      	cbnz	r2, 80008f0 <__swsetup_r+0xa4>
 80008de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80008e2:	d1c5      	bne.n	8000870 <__swsetup_r+0x24>
 80008e4:	bd38      	pop	{r3, r4, r5, pc}
 80008e6:	0799      	lsls	r1, r3, #30
 80008e8:	bf58      	it	pl
 80008ea:	6962      	ldrpl	r2, [r4, #20]
 80008ec:	60a2      	str	r2, [r4, #8]
 80008ee:	e7f4      	b.n	80008da <__swsetup_r+0x8e>
 80008f0:	2000      	movs	r0, #0
 80008f2:	e7f7      	b.n	80008e4 <__swsetup_r+0x98>
 80008f4:	2000000c 	.word	0x2000000c

080008f8 <memset>:
 80008f8:	4402      	add	r2, r0
 80008fa:	4603      	mov	r3, r0
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d100      	bne.n	8000902 <memset+0xa>
 8000900:	4770      	bx	lr
 8000902:	f803 1b01 	strb.w	r1, [r3], #1
 8000906:	e7f9      	b.n	80008fc <memset+0x4>

08000908 <_close_r>:
 8000908:	b538      	push	{r3, r4, r5, lr}
 800090a:	4d06      	ldr	r5, [pc, #24]	@ (8000924 <_close_r+0x1c>)
 800090c:	2300      	movs	r3, #0
 800090e:	4604      	mov	r4, r0
 8000910:	4608      	mov	r0, r1
 8000912:	602b      	str	r3, [r5, #0]
 8000914:	f7ff fcbd 	bl	8000292 <_close>
 8000918:	1c43      	adds	r3, r0, #1
 800091a:	d102      	bne.n	8000922 <_close_r+0x1a>
 800091c:	682b      	ldr	r3, [r5, #0]
 800091e:	b103      	cbz	r3, 8000922 <_close_r+0x1a>
 8000920:	6023      	str	r3, [r4, #0]
 8000922:	bd38      	pop	{r3, r4, r5, pc}
 8000924:	200001b8 	.word	0x200001b8

08000928 <_lseek_r>:
 8000928:	b538      	push	{r3, r4, r5, lr}
 800092a:	4d07      	ldr	r5, [pc, #28]	@ (8000948 <_lseek_r+0x20>)
 800092c:	4604      	mov	r4, r0
 800092e:	4608      	mov	r0, r1
 8000930:	4611      	mov	r1, r2
 8000932:	2200      	movs	r2, #0
 8000934:	602a      	str	r2, [r5, #0]
 8000936:	461a      	mov	r2, r3
 8000938:	f7ff fcd2 	bl	80002e0 <_lseek>
 800093c:	1c43      	adds	r3, r0, #1
 800093e:	d102      	bne.n	8000946 <_lseek_r+0x1e>
 8000940:	682b      	ldr	r3, [r5, #0]
 8000942:	b103      	cbz	r3, 8000946 <_lseek_r+0x1e>
 8000944:	6023      	str	r3, [r4, #0]
 8000946:	bd38      	pop	{r3, r4, r5, pc}
 8000948:	200001b8 	.word	0x200001b8

0800094c <_read_r>:
 800094c:	b538      	push	{r3, r4, r5, lr}
 800094e:	4d07      	ldr	r5, [pc, #28]	@ (800096c <_read_r+0x20>)
 8000950:	4604      	mov	r4, r0
 8000952:	4608      	mov	r0, r1
 8000954:	4611      	mov	r1, r2
 8000956:	2200      	movs	r2, #0
 8000958:	602a      	str	r2, [r5, #0]
 800095a:	461a      	mov	r2, r3
 800095c:	f7ff fc60 	bl	8000220 <_read>
 8000960:	1c43      	adds	r3, r0, #1
 8000962:	d102      	bne.n	800096a <_read_r+0x1e>
 8000964:	682b      	ldr	r3, [r5, #0]
 8000966:	b103      	cbz	r3, 800096a <_read_r+0x1e>
 8000968:	6023      	str	r3, [r4, #0]
 800096a:	bd38      	pop	{r3, r4, r5, pc}
 800096c:	200001b8 	.word	0x200001b8

08000970 <_write_r>:
 8000970:	b538      	push	{r3, r4, r5, lr}
 8000972:	4d07      	ldr	r5, [pc, #28]	@ (8000990 <_write_r+0x20>)
 8000974:	4604      	mov	r4, r0
 8000976:	4608      	mov	r0, r1
 8000978:	4611      	mov	r1, r2
 800097a:	2200      	movs	r2, #0
 800097c:	602a      	str	r2, [r5, #0]
 800097e:	461a      	mov	r2, r3
 8000980:	f7ff fc6b 	bl	800025a <_write>
 8000984:	1c43      	adds	r3, r0, #1
 8000986:	d102      	bne.n	800098e <_write_r+0x1e>
 8000988:	682b      	ldr	r3, [r5, #0]
 800098a:	b103      	cbz	r3, 800098e <_write_r+0x1e>
 800098c:	6023      	str	r3, [r4, #0]
 800098e:	bd38      	pop	{r3, r4, r5, pc}
 8000990:	200001b8 	.word	0x200001b8

08000994 <__errno>:
 8000994:	4b01      	ldr	r3, [pc, #4]	@ (800099c <__errno+0x8>)
 8000996:	6818      	ldr	r0, [r3, #0]
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	2000000c 	.word	0x2000000c

080009a0 <__libc_init_array>:
 80009a0:	b570      	push	{r4, r5, r6, lr}
 80009a2:	4d0d      	ldr	r5, [pc, #52]	@ (80009d8 <__libc_init_array+0x38>)
 80009a4:	4c0d      	ldr	r4, [pc, #52]	@ (80009dc <__libc_init_array+0x3c>)
 80009a6:	1b64      	subs	r4, r4, r5
 80009a8:	10a4      	asrs	r4, r4, #2
 80009aa:	2600      	movs	r6, #0
 80009ac:	42a6      	cmp	r6, r4
 80009ae:	d109      	bne.n	80009c4 <__libc_init_array+0x24>
 80009b0:	4d0b      	ldr	r5, [pc, #44]	@ (80009e0 <__libc_init_array+0x40>)
 80009b2:	4c0c      	ldr	r4, [pc, #48]	@ (80009e4 <__libc_init_array+0x44>)
 80009b4:	f000 fa54 	bl	8000e60 <_init>
 80009b8:	1b64      	subs	r4, r4, r5
 80009ba:	10a4      	asrs	r4, r4, #2
 80009bc:	2600      	movs	r6, #0
 80009be:	42a6      	cmp	r6, r4
 80009c0:	d105      	bne.n	80009ce <__libc_init_array+0x2e>
 80009c2:	bd70      	pop	{r4, r5, r6, pc}
 80009c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80009c8:	4798      	blx	r3
 80009ca:	3601      	adds	r6, #1
 80009cc:	e7ee      	b.n	80009ac <__libc_init_array+0xc>
 80009ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80009d2:	4798      	blx	r3
 80009d4:	3601      	adds	r6, #1
 80009d6:	e7f2      	b.n	80009be <__libc_init_array+0x1e>
 80009d8:	08000e8c 	.word	0x08000e8c
 80009dc:	08000e8c 	.word	0x08000e8c
 80009e0:	08000e8c 	.word	0x08000e8c
 80009e4:	08000e90 	.word	0x08000e90

080009e8 <__retarget_lock_init_recursive>:
 80009e8:	4770      	bx	lr

080009ea <__retarget_lock_acquire_recursive>:
 80009ea:	4770      	bx	lr

080009ec <__retarget_lock_release_recursive>:
 80009ec:	4770      	bx	lr
	...

080009f0 <_free_r>:
 80009f0:	b538      	push	{r3, r4, r5, lr}
 80009f2:	4605      	mov	r5, r0
 80009f4:	2900      	cmp	r1, #0
 80009f6:	d041      	beq.n	8000a7c <_free_r+0x8c>
 80009f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80009fc:	1f0c      	subs	r4, r1, #4
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	bfb8      	it	lt
 8000a02:	18e4      	addlt	r4, r4, r3
 8000a04:	f000 f8e0 	bl	8000bc8 <__malloc_lock>
 8000a08:	4a1d      	ldr	r2, [pc, #116]	@ (8000a80 <_free_r+0x90>)
 8000a0a:	6813      	ldr	r3, [r2, #0]
 8000a0c:	b933      	cbnz	r3, 8000a1c <_free_r+0x2c>
 8000a0e:	6063      	str	r3, [r4, #4]
 8000a10:	6014      	str	r4, [r2, #0]
 8000a12:	4628      	mov	r0, r5
 8000a14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a18:	f000 b8dc 	b.w	8000bd4 <__malloc_unlock>
 8000a1c:	42a3      	cmp	r3, r4
 8000a1e:	d908      	bls.n	8000a32 <_free_r+0x42>
 8000a20:	6820      	ldr	r0, [r4, #0]
 8000a22:	1821      	adds	r1, r4, r0
 8000a24:	428b      	cmp	r3, r1
 8000a26:	bf01      	itttt	eq
 8000a28:	6819      	ldreq	r1, [r3, #0]
 8000a2a:	685b      	ldreq	r3, [r3, #4]
 8000a2c:	1809      	addeq	r1, r1, r0
 8000a2e:	6021      	streq	r1, [r4, #0]
 8000a30:	e7ed      	b.n	8000a0e <_free_r+0x1e>
 8000a32:	461a      	mov	r2, r3
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	b10b      	cbz	r3, 8000a3c <_free_r+0x4c>
 8000a38:	42a3      	cmp	r3, r4
 8000a3a:	d9fa      	bls.n	8000a32 <_free_r+0x42>
 8000a3c:	6811      	ldr	r1, [r2, #0]
 8000a3e:	1850      	adds	r0, r2, r1
 8000a40:	42a0      	cmp	r0, r4
 8000a42:	d10b      	bne.n	8000a5c <_free_r+0x6c>
 8000a44:	6820      	ldr	r0, [r4, #0]
 8000a46:	4401      	add	r1, r0
 8000a48:	1850      	adds	r0, r2, r1
 8000a4a:	4283      	cmp	r3, r0
 8000a4c:	6011      	str	r1, [r2, #0]
 8000a4e:	d1e0      	bne.n	8000a12 <_free_r+0x22>
 8000a50:	6818      	ldr	r0, [r3, #0]
 8000a52:	685b      	ldr	r3, [r3, #4]
 8000a54:	6053      	str	r3, [r2, #4]
 8000a56:	4408      	add	r0, r1
 8000a58:	6010      	str	r0, [r2, #0]
 8000a5a:	e7da      	b.n	8000a12 <_free_r+0x22>
 8000a5c:	d902      	bls.n	8000a64 <_free_r+0x74>
 8000a5e:	230c      	movs	r3, #12
 8000a60:	602b      	str	r3, [r5, #0]
 8000a62:	e7d6      	b.n	8000a12 <_free_r+0x22>
 8000a64:	6820      	ldr	r0, [r4, #0]
 8000a66:	1821      	adds	r1, r4, r0
 8000a68:	428b      	cmp	r3, r1
 8000a6a:	bf04      	itt	eq
 8000a6c:	6819      	ldreq	r1, [r3, #0]
 8000a6e:	685b      	ldreq	r3, [r3, #4]
 8000a70:	6063      	str	r3, [r4, #4]
 8000a72:	bf04      	itt	eq
 8000a74:	1809      	addeq	r1, r1, r0
 8000a76:	6021      	streq	r1, [r4, #0]
 8000a78:	6054      	str	r4, [r2, #4]
 8000a7a:	e7ca      	b.n	8000a12 <_free_r+0x22>
 8000a7c:	bd38      	pop	{r3, r4, r5, pc}
 8000a7e:	bf00      	nop
 8000a80:	200001c4 	.word	0x200001c4

08000a84 <sbrk_aligned>:
 8000a84:	b570      	push	{r4, r5, r6, lr}
 8000a86:	4e0f      	ldr	r6, [pc, #60]	@ (8000ac4 <sbrk_aligned+0x40>)
 8000a88:	460c      	mov	r4, r1
 8000a8a:	6831      	ldr	r1, [r6, #0]
 8000a8c:	4605      	mov	r5, r0
 8000a8e:	b911      	cbnz	r1, 8000a96 <sbrk_aligned+0x12>
 8000a90:	f000 f9d6 	bl	8000e40 <_sbrk_r>
 8000a94:	6030      	str	r0, [r6, #0]
 8000a96:	4621      	mov	r1, r4
 8000a98:	4628      	mov	r0, r5
 8000a9a:	f000 f9d1 	bl	8000e40 <_sbrk_r>
 8000a9e:	1c43      	adds	r3, r0, #1
 8000aa0:	d103      	bne.n	8000aaa <sbrk_aligned+0x26>
 8000aa2:	f04f 34ff 	mov.w	r4, #4294967295
 8000aa6:	4620      	mov	r0, r4
 8000aa8:	bd70      	pop	{r4, r5, r6, pc}
 8000aaa:	1cc4      	adds	r4, r0, #3
 8000aac:	f024 0403 	bic.w	r4, r4, #3
 8000ab0:	42a0      	cmp	r0, r4
 8000ab2:	d0f8      	beq.n	8000aa6 <sbrk_aligned+0x22>
 8000ab4:	1a21      	subs	r1, r4, r0
 8000ab6:	4628      	mov	r0, r5
 8000ab8:	f000 f9c2 	bl	8000e40 <_sbrk_r>
 8000abc:	3001      	adds	r0, #1
 8000abe:	d1f2      	bne.n	8000aa6 <sbrk_aligned+0x22>
 8000ac0:	e7ef      	b.n	8000aa2 <sbrk_aligned+0x1e>
 8000ac2:	bf00      	nop
 8000ac4:	200001c0 	.word	0x200001c0

08000ac8 <_malloc_r>:
 8000ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000acc:	1ccd      	adds	r5, r1, #3
 8000ace:	f025 0503 	bic.w	r5, r5, #3
 8000ad2:	3508      	adds	r5, #8
 8000ad4:	2d0c      	cmp	r5, #12
 8000ad6:	bf38      	it	cc
 8000ad8:	250c      	movcc	r5, #12
 8000ada:	2d00      	cmp	r5, #0
 8000adc:	4606      	mov	r6, r0
 8000ade:	db01      	blt.n	8000ae4 <_malloc_r+0x1c>
 8000ae0:	42a9      	cmp	r1, r5
 8000ae2:	d904      	bls.n	8000aee <_malloc_r+0x26>
 8000ae4:	230c      	movs	r3, #12
 8000ae6:	6033      	str	r3, [r6, #0]
 8000ae8:	2000      	movs	r0, #0
 8000aea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000aee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000bc4 <_malloc_r+0xfc>
 8000af2:	f000 f869 	bl	8000bc8 <__malloc_lock>
 8000af6:	f8d8 3000 	ldr.w	r3, [r8]
 8000afa:	461c      	mov	r4, r3
 8000afc:	bb44      	cbnz	r4, 8000b50 <_malloc_r+0x88>
 8000afe:	4629      	mov	r1, r5
 8000b00:	4630      	mov	r0, r6
 8000b02:	f7ff ffbf 	bl	8000a84 <sbrk_aligned>
 8000b06:	1c43      	adds	r3, r0, #1
 8000b08:	4604      	mov	r4, r0
 8000b0a:	d158      	bne.n	8000bbe <_malloc_r+0xf6>
 8000b0c:	f8d8 4000 	ldr.w	r4, [r8]
 8000b10:	4627      	mov	r7, r4
 8000b12:	2f00      	cmp	r7, #0
 8000b14:	d143      	bne.n	8000b9e <_malloc_r+0xd6>
 8000b16:	2c00      	cmp	r4, #0
 8000b18:	d04b      	beq.n	8000bb2 <_malloc_r+0xea>
 8000b1a:	6823      	ldr	r3, [r4, #0]
 8000b1c:	4639      	mov	r1, r7
 8000b1e:	4630      	mov	r0, r6
 8000b20:	eb04 0903 	add.w	r9, r4, r3
 8000b24:	f000 f98c 	bl	8000e40 <_sbrk_r>
 8000b28:	4581      	cmp	r9, r0
 8000b2a:	d142      	bne.n	8000bb2 <_malloc_r+0xea>
 8000b2c:	6821      	ldr	r1, [r4, #0]
 8000b2e:	1a6d      	subs	r5, r5, r1
 8000b30:	4629      	mov	r1, r5
 8000b32:	4630      	mov	r0, r6
 8000b34:	f7ff ffa6 	bl	8000a84 <sbrk_aligned>
 8000b38:	3001      	adds	r0, #1
 8000b3a:	d03a      	beq.n	8000bb2 <_malloc_r+0xea>
 8000b3c:	6823      	ldr	r3, [r4, #0]
 8000b3e:	442b      	add	r3, r5
 8000b40:	6023      	str	r3, [r4, #0]
 8000b42:	f8d8 3000 	ldr.w	r3, [r8]
 8000b46:	685a      	ldr	r2, [r3, #4]
 8000b48:	bb62      	cbnz	r2, 8000ba4 <_malloc_r+0xdc>
 8000b4a:	f8c8 7000 	str.w	r7, [r8]
 8000b4e:	e00f      	b.n	8000b70 <_malloc_r+0xa8>
 8000b50:	6822      	ldr	r2, [r4, #0]
 8000b52:	1b52      	subs	r2, r2, r5
 8000b54:	d420      	bmi.n	8000b98 <_malloc_r+0xd0>
 8000b56:	2a0b      	cmp	r2, #11
 8000b58:	d917      	bls.n	8000b8a <_malloc_r+0xc2>
 8000b5a:	1961      	adds	r1, r4, r5
 8000b5c:	42a3      	cmp	r3, r4
 8000b5e:	6025      	str	r5, [r4, #0]
 8000b60:	bf18      	it	ne
 8000b62:	6059      	strne	r1, [r3, #4]
 8000b64:	6863      	ldr	r3, [r4, #4]
 8000b66:	bf08      	it	eq
 8000b68:	f8c8 1000 	streq.w	r1, [r8]
 8000b6c:	5162      	str	r2, [r4, r5]
 8000b6e:	604b      	str	r3, [r1, #4]
 8000b70:	4630      	mov	r0, r6
 8000b72:	f000 f82f 	bl	8000bd4 <__malloc_unlock>
 8000b76:	f104 000b 	add.w	r0, r4, #11
 8000b7a:	1d23      	adds	r3, r4, #4
 8000b7c:	f020 0007 	bic.w	r0, r0, #7
 8000b80:	1ac2      	subs	r2, r0, r3
 8000b82:	bf1c      	itt	ne
 8000b84:	1a1b      	subne	r3, r3, r0
 8000b86:	50a3      	strne	r3, [r4, r2]
 8000b88:	e7af      	b.n	8000aea <_malloc_r+0x22>
 8000b8a:	6862      	ldr	r2, [r4, #4]
 8000b8c:	42a3      	cmp	r3, r4
 8000b8e:	bf0c      	ite	eq
 8000b90:	f8c8 2000 	streq.w	r2, [r8]
 8000b94:	605a      	strne	r2, [r3, #4]
 8000b96:	e7eb      	b.n	8000b70 <_malloc_r+0xa8>
 8000b98:	4623      	mov	r3, r4
 8000b9a:	6864      	ldr	r4, [r4, #4]
 8000b9c:	e7ae      	b.n	8000afc <_malloc_r+0x34>
 8000b9e:	463c      	mov	r4, r7
 8000ba0:	687f      	ldr	r7, [r7, #4]
 8000ba2:	e7b6      	b.n	8000b12 <_malloc_r+0x4a>
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	42a3      	cmp	r3, r4
 8000baa:	d1fb      	bne.n	8000ba4 <_malloc_r+0xdc>
 8000bac:	2300      	movs	r3, #0
 8000bae:	6053      	str	r3, [r2, #4]
 8000bb0:	e7de      	b.n	8000b70 <_malloc_r+0xa8>
 8000bb2:	230c      	movs	r3, #12
 8000bb4:	6033      	str	r3, [r6, #0]
 8000bb6:	4630      	mov	r0, r6
 8000bb8:	f000 f80c 	bl	8000bd4 <__malloc_unlock>
 8000bbc:	e794      	b.n	8000ae8 <_malloc_r+0x20>
 8000bbe:	6005      	str	r5, [r0, #0]
 8000bc0:	e7d6      	b.n	8000b70 <_malloc_r+0xa8>
 8000bc2:	bf00      	nop
 8000bc4:	200001c4 	.word	0x200001c4

08000bc8 <__malloc_lock>:
 8000bc8:	4801      	ldr	r0, [pc, #4]	@ (8000bd0 <__malloc_lock+0x8>)
 8000bca:	f7ff bf0e 	b.w	80009ea <__retarget_lock_acquire_recursive>
 8000bce:	bf00      	nop
 8000bd0:	200001bc 	.word	0x200001bc

08000bd4 <__malloc_unlock>:
 8000bd4:	4801      	ldr	r0, [pc, #4]	@ (8000bdc <__malloc_unlock+0x8>)
 8000bd6:	f7ff bf09 	b.w	80009ec <__retarget_lock_release_recursive>
 8000bda:	bf00      	nop
 8000bdc:	200001bc 	.word	0x200001bc

08000be0 <__sflush_r>:
 8000be0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000be8:	0716      	lsls	r6, r2, #28
 8000bea:	4605      	mov	r5, r0
 8000bec:	460c      	mov	r4, r1
 8000bee:	d454      	bmi.n	8000c9a <__sflush_r+0xba>
 8000bf0:	684b      	ldr	r3, [r1, #4]
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	dc02      	bgt.n	8000bfc <__sflush_r+0x1c>
 8000bf6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	dd48      	ble.n	8000c8e <__sflush_r+0xae>
 8000bfc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000bfe:	2e00      	cmp	r6, #0
 8000c00:	d045      	beq.n	8000c8e <__sflush_r+0xae>
 8000c02:	2300      	movs	r3, #0
 8000c04:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000c08:	682f      	ldr	r7, [r5, #0]
 8000c0a:	6a21      	ldr	r1, [r4, #32]
 8000c0c:	602b      	str	r3, [r5, #0]
 8000c0e:	d030      	beq.n	8000c72 <__sflush_r+0x92>
 8000c10:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000c12:	89a3      	ldrh	r3, [r4, #12]
 8000c14:	0759      	lsls	r1, r3, #29
 8000c16:	d505      	bpl.n	8000c24 <__sflush_r+0x44>
 8000c18:	6863      	ldr	r3, [r4, #4]
 8000c1a:	1ad2      	subs	r2, r2, r3
 8000c1c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000c1e:	b10b      	cbz	r3, 8000c24 <__sflush_r+0x44>
 8000c20:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000c22:	1ad2      	subs	r2, r2, r3
 8000c24:	2300      	movs	r3, #0
 8000c26:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000c28:	6a21      	ldr	r1, [r4, #32]
 8000c2a:	4628      	mov	r0, r5
 8000c2c:	47b0      	blx	r6
 8000c2e:	1c43      	adds	r3, r0, #1
 8000c30:	89a3      	ldrh	r3, [r4, #12]
 8000c32:	d106      	bne.n	8000c42 <__sflush_r+0x62>
 8000c34:	6829      	ldr	r1, [r5, #0]
 8000c36:	291d      	cmp	r1, #29
 8000c38:	d82b      	bhi.n	8000c92 <__sflush_r+0xb2>
 8000c3a:	4a2a      	ldr	r2, [pc, #168]	@ (8000ce4 <__sflush_r+0x104>)
 8000c3c:	40ca      	lsrs	r2, r1
 8000c3e:	07d6      	lsls	r6, r2, #31
 8000c40:	d527      	bpl.n	8000c92 <__sflush_r+0xb2>
 8000c42:	2200      	movs	r2, #0
 8000c44:	6062      	str	r2, [r4, #4]
 8000c46:	04d9      	lsls	r1, r3, #19
 8000c48:	6922      	ldr	r2, [r4, #16]
 8000c4a:	6022      	str	r2, [r4, #0]
 8000c4c:	d504      	bpl.n	8000c58 <__sflush_r+0x78>
 8000c4e:	1c42      	adds	r2, r0, #1
 8000c50:	d101      	bne.n	8000c56 <__sflush_r+0x76>
 8000c52:	682b      	ldr	r3, [r5, #0]
 8000c54:	b903      	cbnz	r3, 8000c58 <__sflush_r+0x78>
 8000c56:	6560      	str	r0, [r4, #84]	@ 0x54
 8000c58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000c5a:	602f      	str	r7, [r5, #0]
 8000c5c:	b1b9      	cbz	r1, 8000c8e <__sflush_r+0xae>
 8000c5e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d002      	beq.n	8000c6c <__sflush_r+0x8c>
 8000c66:	4628      	mov	r0, r5
 8000c68:	f7ff fec2 	bl	80009f0 <_free_r>
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	6363      	str	r3, [r4, #52]	@ 0x34
 8000c70:	e00d      	b.n	8000c8e <__sflush_r+0xae>
 8000c72:	2301      	movs	r3, #1
 8000c74:	4628      	mov	r0, r5
 8000c76:	47b0      	blx	r6
 8000c78:	4602      	mov	r2, r0
 8000c7a:	1c50      	adds	r0, r2, #1
 8000c7c:	d1c9      	bne.n	8000c12 <__sflush_r+0x32>
 8000c7e:	682b      	ldr	r3, [r5, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d0c6      	beq.n	8000c12 <__sflush_r+0x32>
 8000c84:	2b1d      	cmp	r3, #29
 8000c86:	d001      	beq.n	8000c8c <__sflush_r+0xac>
 8000c88:	2b16      	cmp	r3, #22
 8000c8a:	d11e      	bne.n	8000cca <__sflush_r+0xea>
 8000c8c:	602f      	str	r7, [r5, #0]
 8000c8e:	2000      	movs	r0, #0
 8000c90:	e022      	b.n	8000cd8 <__sflush_r+0xf8>
 8000c92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000c96:	b21b      	sxth	r3, r3
 8000c98:	e01b      	b.n	8000cd2 <__sflush_r+0xf2>
 8000c9a:	690f      	ldr	r7, [r1, #16]
 8000c9c:	2f00      	cmp	r7, #0
 8000c9e:	d0f6      	beq.n	8000c8e <__sflush_r+0xae>
 8000ca0:	0793      	lsls	r3, r2, #30
 8000ca2:	680e      	ldr	r6, [r1, #0]
 8000ca4:	bf08      	it	eq
 8000ca6:	694b      	ldreq	r3, [r1, #20]
 8000ca8:	600f      	str	r7, [r1, #0]
 8000caa:	bf18      	it	ne
 8000cac:	2300      	movne	r3, #0
 8000cae:	eba6 0807 	sub.w	r8, r6, r7
 8000cb2:	608b      	str	r3, [r1, #8]
 8000cb4:	f1b8 0f00 	cmp.w	r8, #0
 8000cb8:	dde9      	ble.n	8000c8e <__sflush_r+0xae>
 8000cba:	6a21      	ldr	r1, [r4, #32]
 8000cbc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8000cbe:	4643      	mov	r3, r8
 8000cc0:	463a      	mov	r2, r7
 8000cc2:	4628      	mov	r0, r5
 8000cc4:	47b0      	blx	r6
 8000cc6:	2800      	cmp	r0, #0
 8000cc8:	dc08      	bgt.n	8000cdc <__sflush_r+0xfc>
 8000cca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000cce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cd2:	81a3      	strh	r3, [r4, #12]
 8000cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000cdc:	4407      	add	r7, r0
 8000cde:	eba8 0800 	sub.w	r8, r8, r0
 8000ce2:	e7e7      	b.n	8000cb4 <__sflush_r+0xd4>
 8000ce4:	20400001 	.word	0x20400001

08000ce8 <_fflush_r>:
 8000ce8:	b538      	push	{r3, r4, r5, lr}
 8000cea:	690b      	ldr	r3, [r1, #16]
 8000cec:	4605      	mov	r5, r0
 8000cee:	460c      	mov	r4, r1
 8000cf0:	b913      	cbnz	r3, 8000cf8 <_fflush_r+0x10>
 8000cf2:	2500      	movs	r5, #0
 8000cf4:	4628      	mov	r0, r5
 8000cf6:	bd38      	pop	{r3, r4, r5, pc}
 8000cf8:	b118      	cbz	r0, 8000d02 <_fflush_r+0x1a>
 8000cfa:	6a03      	ldr	r3, [r0, #32]
 8000cfc:	b90b      	cbnz	r3, 8000d02 <_fflush_r+0x1a>
 8000cfe:	f7ff fc8f 	bl	8000620 <__sinit>
 8000d02:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d0f3      	beq.n	8000cf2 <_fflush_r+0xa>
 8000d0a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8000d0c:	07d0      	lsls	r0, r2, #31
 8000d0e:	d404      	bmi.n	8000d1a <_fflush_r+0x32>
 8000d10:	0599      	lsls	r1, r3, #22
 8000d12:	d402      	bmi.n	8000d1a <_fflush_r+0x32>
 8000d14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000d16:	f7ff fe68 	bl	80009ea <__retarget_lock_acquire_recursive>
 8000d1a:	4628      	mov	r0, r5
 8000d1c:	4621      	mov	r1, r4
 8000d1e:	f7ff ff5f 	bl	8000be0 <__sflush_r>
 8000d22:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000d24:	07da      	lsls	r2, r3, #31
 8000d26:	4605      	mov	r5, r0
 8000d28:	d4e4      	bmi.n	8000cf4 <_fflush_r+0xc>
 8000d2a:	89a3      	ldrh	r3, [r4, #12]
 8000d2c:	059b      	lsls	r3, r3, #22
 8000d2e:	d4e1      	bmi.n	8000cf4 <_fflush_r+0xc>
 8000d30:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000d32:	f7ff fe5b 	bl	80009ec <__retarget_lock_release_recursive>
 8000d36:	e7dd      	b.n	8000cf4 <_fflush_r+0xc>

08000d38 <__swhatbuf_r>:
 8000d38:	b570      	push	{r4, r5, r6, lr}
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d40:	2900      	cmp	r1, #0
 8000d42:	b096      	sub	sp, #88	@ 0x58
 8000d44:	4615      	mov	r5, r2
 8000d46:	461e      	mov	r6, r3
 8000d48:	da0d      	bge.n	8000d66 <__swhatbuf_r+0x2e>
 8000d4a:	89a3      	ldrh	r3, [r4, #12]
 8000d4c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000d50:	f04f 0100 	mov.w	r1, #0
 8000d54:	bf14      	ite	ne
 8000d56:	2340      	movne	r3, #64	@ 0x40
 8000d58:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	6031      	str	r1, [r6, #0]
 8000d60:	602b      	str	r3, [r5, #0]
 8000d62:	b016      	add	sp, #88	@ 0x58
 8000d64:	bd70      	pop	{r4, r5, r6, pc}
 8000d66:	466a      	mov	r2, sp
 8000d68:	f000 f848 	bl	8000dfc <_fstat_r>
 8000d6c:	2800      	cmp	r0, #0
 8000d6e:	dbec      	blt.n	8000d4a <__swhatbuf_r+0x12>
 8000d70:	9901      	ldr	r1, [sp, #4]
 8000d72:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8000d76:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8000d7a:	4259      	negs	r1, r3
 8000d7c:	4159      	adcs	r1, r3
 8000d7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d82:	e7eb      	b.n	8000d5c <__swhatbuf_r+0x24>

08000d84 <__smakebuf_r>:
 8000d84:	898b      	ldrh	r3, [r1, #12]
 8000d86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000d88:	079d      	lsls	r5, r3, #30
 8000d8a:	4606      	mov	r6, r0
 8000d8c:	460c      	mov	r4, r1
 8000d8e:	d507      	bpl.n	8000da0 <__smakebuf_r+0x1c>
 8000d90:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8000d94:	6023      	str	r3, [r4, #0]
 8000d96:	6123      	str	r3, [r4, #16]
 8000d98:	2301      	movs	r3, #1
 8000d9a:	6163      	str	r3, [r4, #20]
 8000d9c:	b003      	add	sp, #12
 8000d9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000da0:	ab01      	add	r3, sp, #4
 8000da2:	466a      	mov	r2, sp
 8000da4:	f7ff ffc8 	bl	8000d38 <__swhatbuf_r>
 8000da8:	9f00      	ldr	r7, [sp, #0]
 8000daa:	4605      	mov	r5, r0
 8000dac:	4639      	mov	r1, r7
 8000dae:	4630      	mov	r0, r6
 8000db0:	f7ff fe8a 	bl	8000ac8 <_malloc_r>
 8000db4:	b948      	cbnz	r0, 8000dca <__smakebuf_r+0x46>
 8000db6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000dba:	059a      	lsls	r2, r3, #22
 8000dbc:	d4ee      	bmi.n	8000d9c <__smakebuf_r+0x18>
 8000dbe:	f023 0303 	bic.w	r3, r3, #3
 8000dc2:	f043 0302 	orr.w	r3, r3, #2
 8000dc6:	81a3      	strh	r3, [r4, #12]
 8000dc8:	e7e2      	b.n	8000d90 <__smakebuf_r+0xc>
 8000dca:	89a3      	ldrh	r3, [r4, #12]
 8000dcc:	6020      	str	r0, [r4, #0]
 8000dce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dd2:	81a3      	strh	r3, [r4, #12]
 8000dd4:	9b01      	ldr	r3, [sp, #4]
 8000dd6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8000dda:	b15b      	cbz	r3, 8000df4 <__smakebuf_r+0x70>
 8000ddc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000de0:	4630      	mov	r0, r6
 8000de2:	f000 f81d 	bl	8000e20 <_isatty_r>
 8000de6:	b128      	cbz	r0, 8000df4 <__smakebuf_r+0x70>
 8000de8:	89a3      	ldrh	r3, [r4, #12]
 8000dea:	f023 0303 	bic.w	r3, r3, #3
 8000dee:	f043 0301 	orr.w	r3, r3, #1
 8000df2:	81a3      	strh	r3, [r4, #12]
 8000df4:	89a3      	ldrh	r3, [r4, #12]
 8000df6:	431d      	orrs	r5, r3
 8000df8:	81a5      	strh	r5, [r4, #12]
 8000dfa:	e7cf      	b.n	8000d9c <__smakebuf_r+0x18>

08000dfc <_fstat_r>:
 8000dfc:	b538      	push	{r3, r4, r5, lr}
 8000dfe:	4d07      	ldr	r5, [pc, #28]	@ (8000e1c <_fstat_r+0x20>)
 8000e00:	2300      	movs	r3, #0
 8000e02:	4604      	mov	r4, r0
 8000e04:	4608      	mov	r0, r1
 8000e06:	4611      	mov	r1, r2
 8000e08:	602b      	str	r3, [r5, #0]
 8000e0a:	f7ff fa4e 	bl	80002aa <_fstat>
 8000e0e:	1c43      	adds	r3, r0, #1
 8000e10:	d102      	bne.n	8000e18 <_fstat_r+0x1c>
 8000e12:	682b      	ldr	r3, [r5, #0]
 8000e14:	b103      	cbz	r3, 8000e18 <_fstat_r+0x1c>
 8000e16:	6023      	str	r3, [r4, #0]
 8000e18:	bd38      	pop	{r3, r4, r5, pc}
 8000e1a:	bf00      	nop
 8000e1c:	200001b8 	.word	0x200001b8

08000e20 <_isatty_r>:
 8000e20:	b538      	push	{r3, r4, r5, lr}
 8000e22:	4d06      	ldr	r5, [pc, #24]	@ (8000e3c <_isatty_r+0x1c>)
 8000e24:	2300      	movs	r3, #0
 8000e26:	4604      	mov	r4, r0
 8000e28:	4608      	mov	r0, r1
 8000e2a:	602b      	str	r3, [r5, #0]
 8000e2c:	f7ff fa4d 	bl	80002ca <_isatty>
 8000e30:	1c43      	adds	r3, r0, #1
 8000e32:	d102      	bne.n	8000e3a <_isatty_r+0x1a>
 8000e34:	682b      	ldr	r3, [r5, #0]
 8000e36:	b103      	cbz	r3, 8000e3a <_isatty_r+0x1a>
 8000e38:	6023      	str	r3, [r4, #0]
 8000e3a:	bd38      	pop	{r3, r4, r5, pc}
 8000e3c:	200001b8 	.word	0x200001b8

08000e40 <_sbrk_r>:
 8000e40:	b538      	push	{r3, r4, r5, lr}
 8000e42:	4d06      	ldr	r5, [pc, #24]	@ (8000e5c <_sbrk_r+0x1c>)
 8000e44:	2300      	movs	r3, #0
 8000e46:	4604      	mov	r4, r0
 8000e48:	4608      	mov	r0, r1
 8000e4a:	602b      	str	r3, [r5, #0]
 8000e4c:	f7ff fa56 	bl	80002fc <_sbrk>
 8000e50:	1c43      	adds	r3, r0, #1
 8000e52:	d102      	bne.n	8000e5a <_sbrk_r+0x1a>
 8000e54:	682b      	ldr	r3, [r5, #0]
 8000e56:	b103      	cbz	r3, 8000e5a <_sbrk_r+0x1a>
 8000e58:	6023      	str	r3, [r4, #0]
 8000e5a:	bd38      	pop	{r3, r4, r5, pc}
 8000e5c:	200001b8 	.word	0x200001b8

08000e60 <_init>:
 8000e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e62:	bf00      	nop
 8000e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e66:	bc08      	pop	{r3}
 8000e68:	469e      	mov	lr, r3
 8000e6a:	4770      	bx	lr

08000e6c <_fini>:
 8000e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e6e:	bf00      	nop
 8000e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e72:	bc08      	pop	{r3}
 8000e74:	469e      	mov	lr, r3
 8000e76:	4770      	bx	lr
